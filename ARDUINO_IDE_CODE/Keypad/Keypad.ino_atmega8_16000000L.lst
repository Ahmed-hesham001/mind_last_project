
/private/var/folders/z0/j71jsxbs7l5bd67ln9qz1dph0000gn/T/arduino/sketches/E75C631EB8DA1A20A0029019DF6BBB4F/Keypad.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	46 c0       	rjmp	.+140    	; 0x8e <__dtors_end>
       2:	6a c0       	rjmp	.+212    	; 0xd8 <__bad_interrupt>
       4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
       6:	68 c0       	rjmp	.+208    	; 0xd8 <__bad_interrupt>
       8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
       a:	66 c0       	rjmp	.+204    	; 0xd8 <__bad_interrupt>
       c:	3f c5       	rjmp	.+2686   	; 0xa8c <__vector_6>
       e:	64 c0       	rjmp	.+200    	; 0xd8 <__bad_interrupt>
      10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
      12:	90 c3       	rjmp	.+1824   	; 0x734 <__vector_9>
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	fd c3       	rjmp	.+2042   	; 0x812 <__vector_11>
      18:	d7 c3       	rjmp	.+1966   	; 0x7c8 <__vector_12>
      1a:	5e c0       	rjmp	.+188    	; 0xd8 <__bad_interrupt>
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	5c c0       	rjmp	.+184    	; 0xd8 <__bad_interrupt>
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	29 c4       	rjmp	.+2130   	; 0x876 <__vector_17>
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>

00000026 <__trampolines_end>:
__trampolines_start():
      26:	00 00       	nop
      28:	00 00       	nop
      2a:	37 00       	.word	0x0037	; ????
      2c:	34 00       	.word	0x0034	; ????
      2e:	31 00       	.word	0x0031	; ????

00000030 <digital_pin_to_timer_PGM>:
	...
      38:	00 04 05 07 00 00 00 00 00 00 00 00 00 00 00        ...............

00000047 <port_to_input_PGM>:
      47:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

00000051 <digital_pin_to_bit_mask_PGM>:
      51:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      61:	04 08 10 20 40 80 40                                ... @.@

00000068 <port_to_output_PGM>:
      68:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

00000072 <digital_pin_to_port_PGM>:
      72:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      82:	03 03 03 03 02 02 03 00                             ........

0000008a <__ctors_start>:
__ctors_start():
      8a:	2d 06       	cpc	r2, r29

0000008c <__ctors_end>:
__dtors_start():
      8c:	a8 09       	sbc	r26, r8

0000008e <__dtors_end>:
__dtors_end():
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf e5       	ldi	r28, 0x5F	; 95
      94:	d4 e0       	ldi	r29, 0x04	; 4
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      9a:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      9c:	a0 e6       	ldi	r26, 0x60	; 96
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      9e:	b0 e0       	ldi	r27, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      a0:	ee ec       	ldi	r30, 0xCE	; 206
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      a2:	f8 e1       	ldi	r31, 0x18	; 24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      a6:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      a8:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      aa:	a0 3c       	cpi	r26, 0xC0	; 192
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      ac:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      b0:	22 e0       	ldi	r18, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      b2:	a0 ec       	ldi	r26, 0xC0	; 192
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      b4:	b0 e0       	ldi	r27, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      b6:	01 c0       	rjmp	.+2      	; 0xba <.do_clear_bss_start>

000000b8 <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      b8:	1d 92       	st	X+, r1

000000ba <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      ba:	ac 32       	cpi	r26, 0x2C	; 44
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      bc:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      be:	e1 f7       	brne	.-8      	; 0xb8 <.do_clear_bss_loop>

000000c0 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      c0:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      c2:	c6 e4       	ldi	r28, 0x46	; 70
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      c4:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      c6:	03 c0       	rjmp	.+6      	; 0xce <__do_global_ctors+0xe>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      c8:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      ca:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      cc:	fa d9       	rcall	.-3084   	; 0xfffff4c2 <__eeprom_end+0xff7ef4c2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      ce:	c5 34       	cpi	r28, 0x45	; 69
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      d0:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      d2:	d1 f7       	brne	.-12     	; 0xc8 <__do_global_ctors+0x8>
      d4:	d8 d6       	rcall	.+3504   	; 0xe86 <main>
      d6:	ef cb       	rjmp	.-2082   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>

000000d8 <__bad_interrupt>:
__vector_1():
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <Servo::write(int) [clone .constprop.35]>:
write():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:264
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}

void Servo::write(int value)
      da:	8f 92       	push	r8
      dc:	9f 92       	push	r9
      de:	af 92       	push	r10
      e0:	bf 92       	push	r11
      e2:	ff 92       	push	r15
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
writeMicroseconds():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:278
}

void Servo::writeMicroseconds(int value)
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
      ec:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <myservo>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:279
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
      f0:	2b e0       	ldi	r18, 0x0B	; 11
      f2:	2f 15       	cp	r18, r15
      f4:	08 f4       	brcc	.+2      	; 0xf8 <Servo::write(int) [clone .constprop.35]+0x1e>
      f6:	4a c0       	rjmp	.+148    	; 0x18c <Servo::write(int) [clone .constprop.35]+0xb2>
write():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:270
{
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
      f8:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <myservo+0x2>
      fc:	08 e5       	ldi	r16, 0x58	; 88
      fe:	12 e0       	ldi	r17, 0x02	; 2
     100:	02 1b       	sub	r16, r18
     102:	11 09       	sbc	r17, r1
     104:	27 fd       	sbrc	r18, 7
     106:	13 95       	inc	r17
     108:	00 0f       	add	r16, r16
     10a:	11 1f       	adc	r17, r17
     10c:	00 0f       	add	r16, r16
     10e:	11 1f       	adc	r17, r17
     110:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <myservo+0x1>
     114:	c8 e8       	ldi	r28, 0x88	; 136
     116:	d0 e0       	ldi	r29, 0x00	; 0
     118:	c2 1b       	sub	r28, r18
     11a:	d1 09       	sbc	r29, r1
     11c:	27 fd       	sbrc	r18, 7
     11e:	d3 95       	inc	r29
     120:	cc 0f       	add	r28, r28
     122:	dd 1f       	adc	r29, r29
     124:	cc 0f       	add	r28, r28
     126:	dd 1f       	adc	r29, r29
     128:	4e 01       	movw	r8, r28
     12a:	0d 2e       	mov	r0, r29
     12c:	00 0c       	add	r0, r0
     12e:	aa 08       	sbc	r10, r10
     130:	bb 08       	sbc	r11, r11
     132:	98 01       	movw	r18, r16
     134:	01 2e       	mov	r0, r17
     136:	00 0c       	add	r0, r0
     138:	44 0b       	sbc	r20, r20
     13a:	55 0b       	sbc	r21, r21
map():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WMath.cpp:54
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     13c:	28 19       	sub	r18, r8
     13e:	39 09       	sbc	r19, r9
     140:	4a 09       	sbc	r20, r10
     142:	5b 09       	sbc	r21, r11
     144:	dc 01       	movw	r26, r24
     146:	46 d9       	rcall	.-3444   	; 0xfffff3d4 <__eeprom_end+0xff7ef3d4>
     148:	24 eb       	ldi	r18, 0xB4	; 180
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e0       	ldi	r20, 0x00	; 0
     14e:	50 e0       	ldi	r21, 0x00	; 0
     150:	1b d9       	rcall	.-3530   	; 0xfffff388 <__eeprom_end+0xff7ef388>
     152:	82 0e       	add	r8, r18
     154:	93 1e       	adc	r9, r19
     156:	a4 1e       	adc	r10, r20
     158:	b5 1e       	adc	r11, r21
writeMicroseconds():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:281
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     15a:	8c 16       	cp	r8, r28
     15c:	9d 06       	cpc	r9, r29
     15e:	2c f0       	brlt	.+10     	; 0x16a <Servo::write(int) [clone .constprop.35]+0x90>
     160:	e8 01       	movw	r28, r16
     162:	80 16       	cp	r8, r16
     164:	91 06       	cpc	r9, r17
     166:	0c f4       	brge	.+2      	; 0x16a <Servo::write(int) [clone .constprop.35]+0x90>
     168:	e4 01       	movw	r28, r8
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:286
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
     16a:	22 97       	sbiw	r28, 0x02	; 2
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:287
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
     16c:	cc 0f       	add	r28, r28
     16e:	dd 1f       	adc	r29, r29
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:289

    uint8_t oldSREG = SREG;
     170:	2f b7       	in	r18, 0x3f	; 63
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:290
    cli();
     172:	f8 94       	cli
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:291
    servos[channel].ticks = value;
     174:	8f 2d       	mov	r24, r15
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	fc 01       	movw	r30, r24
     17a:	ee 0f       	add	r30, r30
     17c:	ff 1f       	adc	r31, r31
     17e:	e8 0f       	add	r30, r24
     180:	f9 1f       	adc	r31, r25
     182:	e2 52       	subi	r30, 0x22	; 34
     184:	fe 4f       	sbci	r31, 0xFE	; 254
     186:	d2 83       	std	Z+2, r29	; 0x02
     188:	c1 83       	std	Z+1, r28	; 0x01
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:292
    SREG = oldSREG;
     18a:	2f bf       	out	0x3f, r18	; 63
write():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:273
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
}
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	ff 90       	pop	r15
     196:	bf 90       	pop	r11
     198:	af 90       	pop	r10
     19a:	9f 90       	pop	r9
     19c:	8f 90       	pop	r8
     19e:	08 95       	ret

000001a0 <turnOffPWM>:
turnOffPWM():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     1a0:	85 30       	cpi	r24, 0x05	; 5
     1a2:	41 f0       	breq	.+16     	; 0x1b4 <turnOffPWM+0x14>
     1a4:	87 30       	cpi	r24, 0x07	; 7
     1a6:	49 f0       	breq	.+18     	; 0x1ba <turnOffPWM+0x1a>
     1a8:	84 30       	cpi	r24, 0x04	; 4
     1aa:	51 f4       	brne	.+20     	; 0x1c0 <turnOffPWM+0x20>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     1ac:	8f b5       	in	r24, 0x2f	; 47
     1ae:	8f 77       	andi	r24, 0x7F	; 127
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     1b0:	8f bd       	out	0x2f, r24	; 47
     1b2:	08 95       	ret
     1b4:	8f b5       	in	r24, 0x2f	; 47
     1b6:	8f 7d       	andi	r24, 0xDF	; 223
     1b8:	fb cf       	rjmp	.-10     	; 0x1b0 <turnOffPWM+0x10>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     1ba:	85 b5       	in	r24, 0x25	; 37
     1bc:	8f 7d       	andi	r24, 0xDF	; 223
     1be:	85 bd       	out	0x25, r24	; 37
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
     1c0:	08 95       	ret

000001c2 <digitalRead>:
digitalRead():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     1c6:	28 2f       	mov	r18, r24
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	f9 01       	movw	r30, r18
     1cc:	e0 5d       	subi	r30, 0xD0	; 208
     1ce:	ff 4f       	sbci	r31, 0xFF	; 255
     1d0:	84 91       	lpm	r24, Z
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     1d2:	f9 01       	movw	r30, r18
     1d4:	ef 5a       	subi	r30, 0xAF	; 175
     1d6:	ff 4f       	sbci	r31, 0xFF	; 255
     1d8:	d4 91       	lpm	r29, Z
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     1da:	f9 01       	movw	r30, r18
     1dc:	ee 58       	subi	r30, 0x8E	; 142
     1de:	ff 4f       	sbci	r31, 0xFF	; 255
     1e0:	c4 91       	lpm	r28, Z
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     1e2:	cc 23       	and	r28, r28
     1e4:	99 f0       	breq	.+38     	; 0x20c <digitalRead+0x4a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     1e6:	81 11       	cpse	r24, r1
     1e8:	db df       	rcall	.-74     	; 0x1a0 <turnOffPWM>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     1ea:	ec 2f       	mov	r30, r28
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	ee 0f       	add	r30, r30
     1f0:	ff 1f       	adc	r31, r31
     1f2:	e9 5b       	subi	r30, 0xB9	; 185
     1f4:	ff 4f       	sbci	r31, 0xFF	; 255
     1f6:	a5 91       	lpm	r26, Z+
     1f8:	b4 91       	lpm	r27, Z
     1fa:	ec 91       	ld	r30, X
     1fc:	ed 23       	and	r30, r29
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	09 f4       	brne	.+2      	; 0x206 <digitalRead+0x44>
     204:	80 e0       	ldi	r24, 0x00	; 0
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	fa cf       	rjmp	.-12     	; 0x206 <digitalRead+0x44>

00000212 <digitalWrite>:
digitalWrite():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     218:	28 2f       	mov	r18, r24
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	f9 01       	movw	r30, r18
     21e:	e0 5d       	subi	r30, 0xD0	; 208
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	84 91       	lpm	r24, Z
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     224:	f9 01       	movw	r30, r18
     226:	ef 5a       	subi	r30, 0xAF	; 175
     228:	ff 4f       	sbci	r31, 0xFF	; 255
     22a:	d4 91       	lpm	r29, Z
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     22c:	f9 01       	movw	r30, r18
     22e:	ee 58       	subi	r30, 0x8E	; 142
     230:	ff 4f       	sbci	r31, 0xFF	; 255
     232:	c4 91       	lpm	r28, Z
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     234:	cc 23       	and	r28, r28
     236:	a1 f0       	breq	.+40     	; 0x260 <digitalWrite+0x4e>
     238:	16 2f       	mov	r17, r22
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     23a:	81 11       	cpse	r24, r1
     23c:	b1 df       	rcall	.-158    	; 0x1a0 <turnOffPWM>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     23e:	ec 2f       	mov	r30, r28
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	ee 0f       	add	r30, r30
     244:	ff 1f       	adc	r31, r31
     246:	e8 59       	subi	r30, 0x98	; 152
     248:	ff 4f       	sbci	r31, 0xFF	; 255
     24a:	a5 91       	lpm	r26, Z+
     24c:	b4 91       	lpm	r27, Z
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     24e:	8f b7       	in	r24, 0x3f	; 63
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
     250:	f8 94       	cli
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     252:	ec 91       	ld	r30, X
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     254:	11 11       	cpse	r17, r1
     256:	08 c0       	rjmp	.+16     	; 0x268 <digitalWrite+0x56>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     258:	d0 95       	com	r29
     25a:	de 23       	and	r29, r30
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     25c:	dc 93       	st	X, r29
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     25e:	8f bf       	out	0x3f, r24	; 63
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:212
}
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	08 95       	ret
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     268:	de 2b       	or	r29, r30
     26a:	f8 cf       	rjmp	.-16     	; 0x25c <digitalWrite+0x4a>

0000026c <pinMode>:
pinMode():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	fc 01       	movw	r30, r24
     274:	ef 5a       	subi	r30, 0xAF	; 175
     276:	ff 4f       	sbci	r31, 0xFF	; 255
     278:	24 91       	lpm	r18, Z
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     27a:	8e 58       	subi	r24, 0x8E	; 142
     27c:	9f 4f       	sbci	r25, 0xFF	; 255
     27e:	fc 01       	movw	r30, r24
     280:	84 91       	lpm	r24, Z
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     282:	88 23       	and	r24, r24
     284:	d1 f0       	breq	.+52     	; 0x2ba <pinMode+0x4e>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	fc 01       	movw	r30, r24
     28e:	ea 5d       	subi	r30, 0xDA	; 218
     290:	ff 4f       	sbci	r31, 0xFF	; 255
     292:	a5 91       	lpm	r26, Z+
     294:	b4 91       	lpm	r27, Z
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     296:	fc 01       	movw	r30, r24
     298:	e8 59       	subi	r30, 0x98	; 152
     29a:	ff 4f       	sbci	r31, 0xFF	; 255
     29c:	c5 91       	lpm	r28, Z+
     29e:	d4 91       	lpm	r29, Z
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     2a0:	61 11       	cpse	r22, r1
     2a2:	0e c0       	rjmp	.+28     	; 0x2c0 <pinMode+0x54>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     2a4:	9f b7       	in	r25, 0x3f	; 63
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
     2a6:	f8 94       	cli
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     2a8:	8c 91       	ld	r24, X
     2aa:	e2 2f       	mov	r30, r18
     2ac:	e0 95       	com	r30
     2ae:	8e 23       	and	r24, r30
     2b0:	8c 93       	st	X, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     2b2:	28 81       	ld	r18, Y
     2b4:	e2 23       	and	r30, r18
     2b6:	e8 83       	st	Y, r30
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     2b8:	9f bf       	out	0x3f, r25	; 63
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     2c0:	8f b7       	in	r24, 0x3f	; 63
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
     2c2:	f8 94       	cli
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     2c4:	ec 91       	ld	r30, X
     2c6:	e2 2b       	or	r30, r18
     2c8:	ec 93       	st	X, r30
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     2ca:	8f bf       	out	0x3f, r24	; 63
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <pinMode+0x4e>

000002ce <micros>:
micros():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     2ce:	3f b7       	in	r19, 0x3f	; 63
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     2d0:	f8 94       	cli
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     2d2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timer0_overflow_count>
     2d6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timer0_overflow_count+0x1>
     2da:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <timer0_overflow_count+0x2>
     2de:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <timer0_overflow_count+0x3>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     2e2:	22 b7       	in	r18, 0x32	; 50
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     2e4:	08 b6       	in	r0, 0x38	; 56
     2e6:	00 fe       	sbrs	r0, 0
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <micros+0x26>
     2ea:	2f 3f       	cpi	r18, 0xFF	; 255
     2ec:	19 f0       	breq	.+6      	; 0x2f4 <micros+0x26>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	a1 1d       	adc	r26, r1
     2f2:	b1 1d       	adc	r27, r1
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     2f4:	3f bf       	out	0x3f, r19	; 63
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     2f6:	ba 2f       	mov	r27, r26
     2f8:	a9 2f       	mov	r26, r25
     2fa:	98 2f       	mov	r25, r24
     2fc:	88 27       	eor	r24, r24
     2fe:	bc 01       	movw	r22, r24
     300:	cd 01       	movw	r24, r26
     302:	62 0f       	add	r22, r18
     304:	71 1d       	adc	r23, r1
     306:	81 1d       	adc	r24, r1
     308:	91 1d       	adc	r25, r1
     30a:	42 e0       	ldi	r20, 0x02	; 2
     30c:	66 0f       	add	r22, r22
     30e:	77 1f       	adc	r23, r23
     310:	88 1f       	adc	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	4a 95       	dec	r20
     316:	d1 f7       	brne	.-12     	; 0x30c <micros+0x3e>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     318:	08 95       	ret

0000031a <delay>:
delay():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     31a:	8f 92       	push	r8
     31c:	9f 92       	push	r9
     31e:	af 92       	push	r10
     320:	bf 92       	push	r11
     322:	cf 92       	push	r12
     324:	df 92       	push	r13
     326:	ef 92       	push	r14
     328:	ff 92       	push	r15
     32a:	4b 01       	movw	r8, r22
     32c:	5c 01       	movw	r10, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     32e:	cf df       	rcall	.-98     	; 0x2ce <micros>
     330:	6b 01       	movw	r12, r22
     332:	7c 01       	movw	r14, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     334:	cc df       	rcall	.-104    	; 0x2ce <micros>
     336:	6c 19       	sub	r22, r12
     338:	7d 09       	sbc	r23, r13
     33a:	8e 09       	sbc	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	68 3e       	cpi	r22, 0xE8	; 232
     340:	73 40       	sbci	r23, 0x03	; 3
     342:	81 05       	cpc	r24, r1
     344:	91 05       	cpc	r25, r1
     346:	b0 f3       	brcs	.-20     	; 0x334 <delay+0x1a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:402
      ms--;
     348:	21 e0       	ldi	r18, 0x01	; 1
     34a:	82 1a       	sub	r8, r18
     34c:	91 08       	sbc	r9, r1
     34e:	a1 08       	sbc	r10, r1
     350:	b1 08       	sbc	r11, r1
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     352:	88 ee       	ldi	r24, 0xE8	; 232
     354:	c8 0e       	add	r12, r24
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	d8 1e       	adc	r13, r24
     35a:	e1 1c       	adc	r14, r1
     35c:	f1 1c       	adc	r15, r1
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     35e:	81 14       	cp	r8, r1
     360:	91 04       	cpc	r9, r1
     362:	a1 04       	cpc	r10, r1
     364:	b1 04       	cpc	r11, r1
     366:	31 f7       	brne	.-52     	; 0x334 <delay+0x1a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	cf 90       	pop	r12
     370:	bf 90       	pop	r11
     372:	af 90       	pop	r10
     374:	9f 90       	pop	r9
     376:	8f 90       	pop	r8
     378:	08 95       	ret

0000037a <Print::write(unsigned char const*, unsigned int)>:
write():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     37a:	af 92       	push	r10
     37c:	bf 92       	push	r11
     37e:	cf 92       	push	r12
     380:	df 92       	push	r13
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	6c 01       	movw	r12, r24
     390:	7b 01       	movw	r14, r22
     392:	8b 01       	movw	r16, r22
     394:	04 0f       	add	r16, r20
     396:	15 1f       	adc	r17, r21
     398:	eb 01       	movw	r28, r22
     39a:	5e 01       	movw	r10, r28
     39c:	ae 18       	sub	r10, r14
     39e:	bf 08       	sbc	r11, r15
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     3a0:	c0 17       	cp	r28, r16
     3a2:	d1 07       	cpc	r29, r17
     3a4:	59 f0       	breq	.+22     	; 0x3bc <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     3a6:	69 91       	ld	r22, Y+
     3a8:	d6 01       	movw	r26, r12
     3aa:	ed 91       	ld	r30, X+
     3ac:	fc 91       	ld	r31, X
     3ae:	01 90       	ld	r0, Z+
     3b0:	f0 81       	ld	r31, Z
     3b2:	e0 2d       	mov	r30, r0
     3b4:	c6 01       	movw	r24, r12
     3b6:	09 95       	icall
     3b8:	89 2b       	or	r24, r25
     3ba:	79 f7       	brne	.-34     	; 0x39a <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     3bc:	c5 01       	movw	r24, r10
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	ff 90       	pop	r15
     3c8:	ef 90       	pop	r14
     3ca:	df 90       	pop	r13
     3cc:	cf 90       	pop	r12
     3ce:	bf 90       	pop	r11
     3d0:	af 90       	pop	r10
     3d2:	08 95       	ret

000003d4 <HardwareSerial::availableForWrite()>:
availableForWrite():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     3d4:	fc 01       	movw	r30, r24
     3d6:	53 8d       	ldd	r21, Z+27	; 0x1b
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     3d8:	44 8d       	ldd	r20, Z+28	; 0x1c
     3da:	25 2f       	mov	r18, r21
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	84 2f       	mov	r24, r20
     3e0:	90 e0       	ldi	r25, 0x00	; 0
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     3e2:	82 1b       	sub	r24, r18
     3e4:	93 0b       	sbc	r25, r19
     3e6:	54 17       	cp	r21, r20
     3e8:	10 f0       	brcs	.+4      	; 0x3ee <HardwareSerial::availableForWrite()+0x1a>
     3ea:	cf 96       	adiw	r24, 0x3f	; 63
     3ec:	08 95       	ret
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     3ee:	01 97       	sbiw	r24, 0x01	; 1
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
     3f0:	08 95       	ret

000003f2 <HardwareSerial::read()>:
read():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     3f2:	fc 01       	movw	r30, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     3f4:	91 8d       	ldd	r25, Z+25	; 0x19
     3f6:	82 8d       	ldd	r24, Z+26	; 0x1a
     3f8:	98 17       	cp	r25, r24
     3fa:	61 f0       	breq	.+24     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     3fc:	a2 8d       	ldd	r26, Z+26	; 0x1a
     3fe:	ae 0f       	add	r26, r30
     400:	bf 2f       	mov	r27, r31
     402:	b1 1d       	adc	r27, r1
     404:	5d 96       	adiw	r26, 0x1d	; 29
     406:	8c 91       	ld	r24, X
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     408:	92 8d       	ldd	r25, Z+26	; 0x1a
     40a:	9f 5f       	subi	r25, 0xFF	; 255
     40c:	9f 73       	andi	r25, 0x3F	; 63
     40e:	92 8f       	std	Z+26, r25	; 0x1a
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	08 95       	ret
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     414:	8f ef       	ldi	r24, 0xFF	; 255
     416:	9f ef       	ldi	r25, 0xFF	; 255
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     418:	08 95       	ret

0000041a <HardwareSerial::peek()>:
peek():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     41a:	fc 01       	movw	r30, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     41c:	91 8d       	ldd	r25, Z+25	; 0x19
     41e:	82 8d       	ldd	r24, Z+26	; 0x1a
     420:	98 17       	cp	r25, r24
     422:	31 f0       	breq	.+12     	; 0x430 <HardwareSerial::peek()+0x16>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     424:	82 8d       	ldd	r24, Z+26	; 0x1a
     426:	e8 0f       	add	r30, r24
     428:	f1 1d       	adc	r31, r1
     42a:	85 8d       	ldd	r24, Z+29	; 0x1d
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	08 95       	ret
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	9f ef       	ldi	r25, 0xFF	; 255
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     434:	08 95       	ret

00000436 <HardwareSerial::available()>:
available():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     436:	fc 01       	movw	r30, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     438:	91 8d       	ldd	r25, Z+25	; 0x19
     43a:	22 8d       	ldd	r18, Z+26	; 0x1a
     43c:	89 2f       	mov	r24, r25
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	80 5c       	subi	r24, 0xC0	; 192
     442:	9f 4f       	sbci	r25, 0xFF	; 255
     444:	82 1b       	sub	r24, r18
     446:	91 09       	sbc	r25, r1
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
     448:	8f 73       	andi	r24, 0x3F	; 63
     44a:	99 27       	eor	r25, r25
     44c:	08 95       	ret

0000044e <Serial0_available()>:
Serial0_available():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     44e:	8c e1       	ldi	r24, 0x1C	; 28
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	f1 df       	rcall	.-30     	; 0x436 <HardwareSerial::available()>
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	89 2b       	or	r24, r25
     458:	09 f4       	brne	.+2      	; 0x45c <Serial0_available()+0xe>
     45a:	20 e0       	ldi	r18, 0x00	; 0
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
     45c:	82 2f       	mov	r24, r18
     45e:	08 95       	ret

00000460 <serialEventRun()>:
serialEventRun():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	89 2b       	or	r24, r25
     466:	19 f0       	breq	.+6      	; 0x46e <serialEventRun()+0xe>
     468:	f2 df       	rcall	.-28     	; 0x44e <Serial0_available()>
     46a:	81 11       	cpse	r24, r1
     46c:	c9 cd       	rjmp	.-1134   	; 0x0 <__vectors>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     46e:	08 95       	ret

00000470 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     470:	fc 01       	movw	r30, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     472:	a4 8d       	ldd	r26, Z+28	; 0x1c
     474:	a8 0f       	add	r26, r24
     476:	b9 2f       	mov	r27, r25
     478:	b1 1d       	adc	r27, r1
     47a:	a3 5a       	subi	r26, 0xA3	; 163
     47c:	bf 4f       	sbci	r27, 0xFF	; 255
     47e:	2c 91       	ld	r18, X
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     480:	84 8d       	ldd	r24, Z+28	; 0x1c
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	8f 73       	andi	r24, 0x3F	; 63
     488:	99 27       	eor	r25, r25
     48a:	84 8f       	std	Z+28, r24	; 0x1c
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     48c:	a6 89       	ldd	r26, Z+22	; 0x16
     48e:	b7 89       	ldd	r27, Z+23	; 0x17
     490:	2c 93       	st	X, r18
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:106
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     492:	a0 89       	ldd	r26, Z+16	; 0x10
     494:	b1 89       	ldd	r27, Z+17	; 0x11
     496:	8c 91       	ld	r24, X
     498:	82 74       	andi	r24, 0x42	; 66
     49a:	8c 93       	st	X, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     49c:	93 8d       	ldd	r25, Z+27	; 0x1b
     49e:	84 8d       	ldd	r24, Z+28	; 0x1c
     4a0:	98 13       	cpse	r25, r24
     4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     4a4:	02 88       	ldd	r0, Z+18	; 0x12
     4a6:	f3 89       	ldd	r31, Z+19	; 0x13
     4a8:	e0 2d       	mov	r30, r0
     4aa:	80 81       	ld	r24, Z
     4ac:	8f 7d       	andi	r24, 0xDF	; 223
     4ae:	80 83       	st	Z, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     4b0:	08 95       	ret

000004b2 <HardwareSerial::write(unsigned char)>:
write():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	88 8f       	std	Y+24, r24	; 0x18
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     4c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     4c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4c8:	98 13       	cpse	r25, r24
     4ca:	19 c0       	rjmp	.+50     	; 0x4fe <HardwareSerial::write(unsigned char)+0x4c>
     4cc:	e8 89       	ldd	r30, Y+16	; 0x10
     4ce:	f9 89       	ldd	r31, Y+17	; 0x11
     4d0:	80 81       	ld	r24, Z
     4d2:	85 ff       	sbrs	r24, 5
     4d4:	14 c0       	rjmp	.+40     	; 0x4fe <HardwareSerial::write(unsigned char)+0x4c>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     4d6:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/yousefmahmoud/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4d8:	f8 94       	cli
write():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     4da:	ee 89       	ldd	r30, Y+22	; 0x16
     4dc:	ff 89       	ldd	r31, Y+23	; 0x17
     4de:	60 83       	st	Z, r22
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:243
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
      #else
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     4e0:	e8 89       	ldd	r30, Y+16	; 0x10
     4e2:	f9 89       	ldd	r31, Y+17	; 0x11
     4e4:	80 81       	ld	r24, Z
     4e6:	82 74       	andi	r24, 0x42	; 66
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     4e8:	80 83       	st	Z, r24
__iRestore():
/Users/yousefmahmoud/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4ea:	9f bf       	out	0x3f, r25	; 63
write():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	08 95       	ret
     4fe:	f6 2e       	mov	r15, r22
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     500:	0b 8d       	ldd	r16, Y+27	; 0x1b
     502:	10 e0       	ldi	r17, 0x00	; 0
     504:	0f 5f       	subi	r16, 0xFF	; 255
     506:	1f 4f       	sbci	r17, 0xFF	; 255
     508:	0f 73       	andi	r16, 0x3F	; 63
     50a:	11 27       	eor	r17, r17
     50c:	e0 2e       	mov	r14, r16
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     50e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     510:	8e 11       	cpse	r24, r14
     512:	0b c0       	rjmp	.+22     	; 0x52a <HardwareSerial::write(unsigned char)+0x78>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	07 fc       	sbrc	r0, 7
     518:	fa cf       	rjmp	.-12     	; 0x50e <HardwareSerial::write(unsigned char)+0x5c>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     51a:	e8 89       	ldd	r30, Y+16	; 0x10
     51c:	f9 89       	ldd	r31, Y+17	; 0x11
     51e:	80 81       	ld	r24, Z
     520:	85 ff       	sbrs	r24, 5
     522:	f5 cf       	rjmp	.-22     	; 0x50e <HardwareSerial::write(unsigned char)+0x5c>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     524:	ce 01       	movw	r24, r28
     526:	a4 df       	rcall	.-184    	; 0x470 <HardwareSerial::_tx_udr_empty_irq()>
     528:	f2 cf       	rjmp	.-28     	; 0x50e <HardwareSerial::write(unsigned char)+0x5c>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     52a:	eb 8d       	ldd	r30, Y+27	; 0x1b
     52c:	ec 0f       	add	r30, r28
     52e:	fd 2f       	mov	r31, r29
     530:	f1 1d       	adc	r31, r1
     532:	e3 5a       	subi	r30, 0xA3	; 163
     534:	ff 4f       	sbci	r31, 0xFF	; 255
     536:	f0 82       	st	Z, r15
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     538:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/yousefmahmoud/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     53a:	f8 94       	cli
write():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     53c:	0b 8f       	std	Y+27, r16	; 0x1b
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     53e:	ea 89       	ldd	r30, Y+18	; 0x12
     540:	fb 89       	ldd	r31, Y+19	; 0x13
     542:	80 81       	ld	r24, Z
     544:	80 62       	ori	r24, 0x20	; 32
     546:	d0 cf       	rjmp	.-96     	; 0x4e8 <HardwareSerial::write(unsigned char)+0x36>

00000548 <HardwareSerial::flush()>:
flush():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ec 01       	movw	r28, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     54e:	88 8d       	ldd	r24, Y+24	; 0x18
     550:	88 23       	and	r24, r24
     552:	b1 f0       	breq	.+44     	; 0x580 <HardwareSerial::flush()+0x38>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     554:	aa 89       	ldd	r26, Y+18	; 0x12
     556:	bb 89       	ldd	r27, Y+19	; 0x13
     558:	e8 89       	ldd	r30, Y+16	; 0x10
     55a:	f9 89       	ldd	r31, Y+17	; 0x11
     55c:	8c 91       	ld	r24, X
     55e:	85 fd       	sbrc	r24, 5
     560:	03 c0       	rjmp	.+6      	; 0x568 <HardwareSerial::flush()+0x20>
     562:	80 81       	ld	r24, Z
     564:	86 fd       	sbrc	r24, 6
     566:	0c c0       	rjmp	.+24     	; 0x580 <HardwareSerial::flush()+0x38>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	07 fc       	sbrc	r0, 7
     56c:	f7 cf       	rjmp	.-18     	; 0x55c <HardwareSerial::flush()+0x14>
     56e:	8c 91       	ld	r24, X
     570:	85 ff       	sbrs	r24, 5
     572:	f2 cf       	rjmp	.-28     	; 0x558 <HardwareSerial::flush()+0x10>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     574:	80 81       	ld	r24, Z
     576:	85 ff       	sbrs	r24, 5
     578:	ed cf       	rjmp	.-38     	; 0x554 <HardwareSerial::flush()+0xc>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     57a:	ce 01       	movw	r24, r28
     57c:	79 df       	rcall	.-270    	; 0x470 <HardwareSerial::_tx_udr_empty_irq()>
     57e:	ea cf       	rjmp	.-44     	; 0x554 <HardwareSerial::flush()+0xc>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <twi_stop>:
twi_stop():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     586:	85 ed       	ldi	r24, 0xD5	; 213
     588:	86 bf       	out	0x36, r24	; 54
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     58a:	06 b6       	in	r0, 0x36	; 54
     58c:	04 fc       	sbrc	r0, 4
     58e:	fd cf       	rjmp	.-6      	; 0x58a <twi_stop+0x4>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     590:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <twi_state>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:463
}
     594:	08 95       	ret

00000596 <twi_transmit>:
twi_transmit():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     596:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <twi_txBufferLength>
     59a:	26 0f       	add	r18, r22
     59c:	33 27       	eor	r19, r19
     59e:	33 1f       	adc	r19, r19
     5a0:	21 32       	cpi	r18, 0x21	; 33
     5a2:	31 05       	cpc	r19, r1
     5a4:	ec f4       	brge	.+58     	; 0x5e0 <twi_transmit+0x4a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     5a6:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <twi_state>
     5aa:	fc 01       	movw	r30, r24
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	24 30       	cpi	r18, 0x04	; 4
     5b2:	69 f0       	breq	.+26     	; 0x5ce <twi_transmit+0x38>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:377
    return 2;
     5b4:	82 e0       	ldi	r24, 0x02	; 2
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     5b6:	08 95       	ret
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     5b8:	a0 91 e8 00 	lds	r26, 0x00E8	; 0x8000e8 <twi_txBufferLength>
     5bc:	21 91       	ld	r18, Z+
     5be:	ac 01       	movw	r20, r24
     5c0:	48 53       	subi	r20, 0x38	; 56
     5c2:	5f 4f       	sbci	r21, 0xFF	; 255
     5c4:	a4 0f       	add	r26, r20
     5c6:	b5 2f       	mov	r27, r21
     5c8:	b1 1d       	adc	r27, r1
     5ca:	2c 93       	st	X, r18
     5cc:	01 96       	adiw	r24, 0x01	; 1
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     5ce:	86 17       	cp	r24, r22
     5d0:	98 f3       	brcs	.-26     	; 0x5b8 <twi_transmit+0x22>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     5d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <twi_txBufferLength>
     5d6:	68 0f       	add	r22, r24
     5d8:	60 93 e8 00 	sts	0x00E8, r22	; 0x8000e8 <twi_txBufferLength>
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	08 95       	ret
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	08 95       	ret

000005e4 <TwoWire::flush()>:
flush():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:326
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     5e4:	08 95       	ret

000005e6 <TwoWire::peek()>:
peek():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:321
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	9f ef       	ldi	r25, 0xFF	; 255
     5ea:	08 95       	ret

000005ec <TwoWire::read()>:
read():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:307
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	9f ef       	ldi	r25, 0xFF	; 255
     5f0:	08 95       	ret

000005f2 <TwoWire::available()>:
available():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     5f2:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <TwoWire::rxBufferIndex>
     5f6:	90 e0       	ldi	r25, 0x00	; 0
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:291
}
     5f8:	91 95       	neg	r25
     5fa:	81 95       	neg	r24
     5fc:	91 09       	sbc	r25, r1
     5fe:	08 95       	ret

00000600 <TwoWire::write(unsigned char const*, unsigned int)>:
write():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:271

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	cb 01       	movw	r24, r22
     606:	ea 01       	movw	r28, r20
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:280
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     608:	64 2f       	mov	r22, r20
     60a:	c5 df       	rcall	.-118    	; 0x596 <twi_transmit>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:283
  }
  return quantity;
}
     60c:	ce 01       	movw	r24, r28
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <TwoWire::write(unsigned char)>:
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:246

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	1f 92       	push	r1
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	69 83       	std	Y+1, r22	; 0x01
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:262
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	ce 01       	movw	r24, r28
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	b7 df       	rcall	.-146    	; 0x596 <twi_transmit>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:265
  }
  return 1;
}
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0f 90       	pop	r0
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <Print::availableForWrite()>:
availableForWrite():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	08 95       	ret

0000063a <ReadRowPins(char)>:
ReadRowPins():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:130

}

bool ReadRowPins(char rownum){

  switch(rownum){
     63a:	82 30       	cpi	r24, 0x02	; 2
     63c:	01 f1       	breq	.+64     	; 0x67e <ReadRowPins(char)+0x44>
     63e:	4c f4       	brge	.+18     	; 0x652 <ReadRowPins(char)+0x18>
     640:	81 30       	cpi	r24, 0x01	; 1
     642:	b1 f0       	breq	.+44     	; 0x670 <ReadRowPins(char)+0x36>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:132
    case 0://for reading any input in all rows
      return (digitalRead(rowPins[0]) && 1) || (digitalRead(rowPins[1]) && 1) ||
     644:	88 e0       	ldi	r24, 0x08	; 8
     646:	bd dd       	rcall	.-1158   	; 0x1c2 <digitalRead>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:133
             (digitalRead(rowPins[2]) && 1) || (digitalRead(rowPins[3]) && 1);
     648:	89 2b       	or	r24, r25
     64a:	49 f0       	breq	.+18     	; 0x65e <ReadRowPins(char)+0x24>
     64c:	21 e0       	ldi	r18, 0x01	; 1
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:151

    default:
      break;
  }

}
     64e:	82 2f       	mov	r24, r18
     650:	08 95       	ret
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:130

}

bool ReadRowPins(char rownum){

  switch(rownum){
     652:	83 30       	cpi	r24, 0x03	; 3
     654:	b1 f0       	breq	.+44     	; 0x682 <ReadRowPins(char)+0x48>
     656:	84 30       	cpi	r24, 0x04	; 4
     658:	a9 f7       	brne	.-22     	; 0x644 <ReadRowPins(char)+0xa>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:145
      
    case 3:
      return digitalRead(rowPins[2]) && 1;

    case 4:
      return digitalRead(rowPins[3]) && 1;
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	0a c0       	rjmp	.+20     	; 0x672 <ReadRowPins(char)+0x38>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:132

bool ReadRowPins(char rownum){

  switch(rownum){
    case 0://for reading any input in all rows
      return (digitalRead(rowPins[0]) && 1) || (digitalRead(rowPins[1]) && 1) ||
     65e:	89 e0       	ldi	r24, 0x09	; 9
     660:	b0 dd       	rcall	.-1184   	; 0x1c2 <digitalRead>
     662:	89 2b       	or	r24, r25
     664:	99 f7       	brne	.-26     	; 0x64c <ReadRowPins(char)+0x12>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:133
             (digitalRead(rowPins[2]) && 1) || (digitalRead(rowPins[3]) && 1);
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	ac dd       	rcall	.-1192   	; 0x1c2 <digitalRead>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:132

bool ReadRowPins(char rownum){

  switch(rownum){
    case 0://for reading any input in all rows
      return (digitalRead(rowPins[0]) && 1) || (digitalRead(rowPins[1]) && 1) ||
     66a:	89 2b       	or	r24, r25
     66c:	79 f7       	brne	.-34     	; 0x64c <ReadRowPins(char)+0x12>
     66e:	f5 cf       	rjmp	.-22     	; 0x65a <ReadRowPins(char)+0x20>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:136
             (digitalRead(rowPins[2]) && 1) || (digitalRead(rowPins[3]) && 1);
    
    case 1:
      return digitalRead(rowPins[0]) && 1;
     670:	88 e0       	ldi	r24, 0x08	; 8
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:145
      
    case 3:
      return digitalRead(rowPins[2]) && 1;

    case 4:
      return digitalRead(rowPins[3]) && 1;
     672:	a7 dd       	rcall	.-1202   	; 0x1c2 <digitalRead>
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	89 2b       	or	r24, r25
     678:	51 f7       	brne	.-44     	; 0x64e <ReadRowPins(char)+0x14>
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	e8 cf       	rjmp	.-48     	; 0x64e <ReadRowPins(char)+0x14>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:139
    
    case 1:
      return digitalRead(rowPins[0]) && 1;

    case 2:
      return digitalRead(rowPins[1]) && 1;
     67e:	89 e0       	ldi	r24, 0x09	; 9
     680:	f8 cf       	rjmp	.-16     	; 0x672 <ReadRowPins(char)+0x38>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:142
      
    case 3:
      return digitalRead(rowPins[2]) && 1;
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	f6 cf       	rjmp	.-20     	; 0x672 <ReadRowPins(char)+0x38>

00000686 <ResetCols()>:
ResetCols():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:122
void ResetCols(){

  for(int i=0;i<4;i++)
    {

      digitalWrite(colPins[i],LOW);
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	84 e0       	ldi	r24, 0x04	; 4
     68a:	c3 dd       	rcall	.-1146   	; 0x212 <digitalWrite>
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	85 e0       	ldi	r24, 0x05	; 5
     690:	c0 dd       	rcall	.-1152   	; 0x212 <digitalWrite>
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	86 e0       	ldi	r24, 0x06	; 6
     696:	bd dd       	rcall	.-1158   	; 0x212 <digitalWrite>
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	87 e0       	ldi	r24, 0x07	; 7
     69c:	ba cd       	rjmp	.-1164   	; 0x212 <digitalWrite>

0000069e <SetCols()>:
SetCols():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:99
///functions to use keypad////
void SetCols(){
for(int i=0;i<4;i++)
    {

      digitalWrite(colPins[i],HIGH);
     69e:	61 e0       	ldi	r22, 0x01	; 1
     6a0:	84 e0       	ldi	r24, 0x04	; 4
     6a2:	b7 dd       	rcall	.-1170   	; 0x212 <digitalWrite>
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	85 e0       	ldi	r24, 0x05	; 5
     6a8:	b4 dd       	rcall	.-1176   	; 0x212 <digitalWrite>
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	86 e0       	ldi	r24, 0x06	; 6
     6ae:	b1 dd       	rcall	.-1182   	; 0x212 <digitalWrite>
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	87 e0       	ldi	r24, 0x07	; 7
     6b4:	ae cd       	rjmp	.-1188   	; 0x212 <digitalWrite>

000006b6 <Print::write(char const*) [clone .part.2] [clone .constprop.32]>:
_ZN5Print5writeEPKc.part.2():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     6b6:	fc 01       	movw	r30, r24
     6b8:	01 90       	ld	r0, Z+
     6ba:	00 20       	and	r0, r0
     6bc:	e9 f7       	brne	.-6      	; 0x6b8 <Print::write(char const*) [clone .part.2] [clone .constprop.32]+0x2>
     6be:	31 97       	sbiw	r30, 0x01	; 1
     6c0:	af 01       	movw	r20, r30
     6c2:	48 1b       	sub	r20, r24
     6c4:	59 0b       	sbc	r21, r25
     6c6:	bc 01       	movw	r22, r24
     6c8:	8c e1       	ldi	r24, 0x1C	; 28
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	56 ce       	rjmp	.-852    	; 0x37a <Print::write(unsigned char const*, unsigned int)>

000006ce <Print::println(char const*) [clone .constprop.29]>:
println():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:138
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
write():
     6d2:	f1 df       	rcall	.-30     	; 0x6b6 <Print::write(char const*) [clone .part.2] [clone .constprop.32]>
     6d4:	ec 01       	movw	r28, r24
     6d6:	80 e8       	ldi	r24, 0x80	; 128
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	ed df       	rcall	.-38     	; 0x6b6 <Print::write(char const*) [clone .part.2] [clone .constprop.32]>
println():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:143
{
  size_t n = print(c);
  n += println();
  return n;
}
     6dc:	8c 0f       	add	r24, r28
     6de:	9d 1f       	adc	r25, r29
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <String::reserve(unsigned int)>:
reserve():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	ec 01       	movw	r28, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
     6f0:	88 81       	ld	r24, Y
     6f2:	99 81       	ldd	r25, Y+1	; 0x01
     6f4:	00 97       	sbiw	r24, 0x00	; 0
     6f6:	59 f0       	breq	.+22     	; 0x70e <String::reserve(unsigned int)+0x28>
     6f8:	2a 81       	ldd	r18, Y+2	; 0x02
     6fa:	3b 81       	ldd	r19, Y+3	; 0x03
     6fc:	26 17       	cp	r18, r22
     6fe:	37 07       	cpc	r19, r23
     700:	30 f0       	brcs	.+12     	; 0x70e <String::reserve(unsigned int)+0x28>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     702:	81 e0       	ldi	r24, 0x01	; 1
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	08 95       	ret
     70e:	8b 01       	movw	r16, r22
changeBuffer():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:158

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     710:	6f 5f       	subi	r22, 0xFF	; 255
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	01 d8       	rcall	.-4094   	; 0xfffff718 <__eeprom_end+0xff7ef718>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
     716:	00 97       	sbiw	r24, 0x00	; 0
     718:	59 f0       	breq	.+22     	; 0x730 <String::reserve(unsigned int)+0x4a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
     71a:	99 83       	std	Y+1, r25	; 0x01
     71c:	88 83       	st	Y, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
     71e:	1b 83       	std	Y+3, r17	; 0x03
     720:	0a 83       	std	Y+2, r16	; 0x02
reserve():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
     722:	2c 81       	ldd	r18, Y+4	; 0x04
     724:	3d 81       	ldd	r19, Y+5	; 0x05
     726:	23 2b       	or	r18, r19
     728:	61 f7       	brne	.-40     	; 0x702 <String::reserve(unsigned int)+0x1c>
     72a:	fc 01       	movw	r30, r24
     72c:	10 82       	st	Z, r1
     72e:	e9 cf       	rjmp	.-46     	; 0x702 <String::reserve(unsigned int)+0x1c>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	e8 cf       	rjmp	.-48     	; 0x704 <String::reserve(unsigned int)+0x1e>

00000734 <__vector_9>:
__vector_9():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     734:	1f 92       	push	r1
     736:	0f 92       	push	r0
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	0f 92       	push	r0
     73c:	11 24       	eor	r1, r1
     73e:	2f 93       	push	r18
     740:	3f 93       	push	r19
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     74a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <timer0_millis>
     74e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <timer0_millis+0x1>
     752:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <timer0_millis+0x2>
     756:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <timer0_millis+0x3>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     75a:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <timer0_fract>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     75e:	23 e0       	ldi	r18, 0x03	; 3
     760:	23 0f       	add	r18, r19
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     762:	2d 37       	cpi	r18, 0x7D	; 125
     764:	68 f1       	brcs	.+90     	; 0x7c0 <__vector_9+0x8c>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     766:	26 e8       	ldi	r18, 0x86	; 134
     768:	23 0f       	add	r18, r19
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     76a:	02 96       	adiw	r24, 0x02	; 2
     76c:	a1 1d       	adc	r26, r1
     76e:	b1 1d       	adc	r27, r1
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     770:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <timer0_fract>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     774:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer0_millis>
     778:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timer0_millis+0x1>
     77c:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timer0_millis+0x2>
     780:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timer0_millis+0x3>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     784:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <timer0_overflow_count>
     788:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <timer0_overflow_count+0x1>
     78c:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <timer0_overflow_count+0x2>
     790:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <timer0_overflow_count+0x3>
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	a1 1d       	adc	r26, r1
     798:	b1 1d       	adc	r27, r1
     79a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <timer0_overflow_count>
     79e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <timer0_overflow_count+0x1>
     7a2:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <timer0_overflow_count+0x2>
     7a6:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <timer0_overflow_count+0x3>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:213
#endif
}
     7aa:	bf 91       	pop	r27
     7ac:	af 91       	pop	r26
     7ae:	9f 91       	pop	r25
     7b0:	8f 91       	pop	r24
     7b2:	3f 91       	pop	r19
     7b4:	2f 91       	pop	r18
     7b6:	0f 90       	pop	r0
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	0f 90       	pop	r0
     7bc:	1f 90       	pop	r1
     7be:	18 95       	reti
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	a1 1d       	adc	r26, r1
     7c4:	b1 1d       	adc	r27, r1
     7c6:	d4 cf       	rjmp	.-88     	; 0x770 <__vector_9+0x3c>

000007c8 <__vector_12>:
__vector_12():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	0f 92       	push	r0
     7d0:	11 24       	eor	r1, r1
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	ef 93       	push	r30
     7e8:	ff 93       	push	r31
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     7ea:	8c e1       	ldi	r24, 0x1C	; 28
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	40 de       	rcall	.-896    	; 0x470 <HardwareSerial::_tx_udr_empty_irq()>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	7f 91       	pop	r23
     7fe:	6f 91       	pop	r22
     800:	5f 91       	pop	r21
     802:	4f 91       	pop	r20
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	0f 90       	pop	r0
     80e:	1f 90       	pop	r1
     810:	18 95       	reti

00000812 <__vector_11>:
__vector_11():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     812:	1f 92       	push	r1
     814:	0f 92       	push	r0
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	2f 93       	push	r18
     81e:	8f 93       	push	r24
     820:	9f 93       	push	r25
     822:	ef 93       	push	r30
     824:	ff 93       	push	r31
_rx_complete_irq():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     826:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <Serial+0x10>
     82a:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <Serial+0x11>
     82e:	80 81       	ld	r24, Z
     830:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <Serial+0x16>
     834:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <Serial+0x17>
     838:	82 fd       	sbrc	r24, 2
     83a:	1b c0       	rjmp	.+54     	; 0x872 <__vector_11+0x60>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     83c:	90 81       	ld	r25, Z
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     83e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Serial+0x19>
     842:	8f 5f       	subi	r24, 0xFF	; 255
     844:	8f 73       	andi	r24, 0x3F	; 63
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     846:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <Serial+0x1a>
     84a:	82 17       	cp	r24, r18
     84c:	41 f0       	breq	.+16     	; 0x85e <__vector_11+0x4c>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     84e:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Serial+0x19>
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	e4 5e       	subi	r30, 0xE4	; 228
     856:	fe 4f       	sbci	r31, 0xFE	; 254
     858:	95 8f       	std	Z+29, r25	; 0x1d
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     85a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Serial+0x19>
__vector_11():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     85e:	ff 91       	pop	r31
     860:	ef 91       	pop	r30
     862:	9f 91       	pop	r25
     864:	8f 91       	pop	r24
     866:	2f 91       	pop	r18
     868:	0f 90       	pop	r0
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	0f 90       	pop	r0
     86e:	1f 90       	pop	r1
     870:	18 95       	reti
_rx_complete_irq():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     872:	80 81       	ld	r24, Z
     874:	f4 cf       	rjmp	.-24     	; 0x85e <__vector_11+0x4c>

00000876 <__vector_17>:
__vector_17():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
     876:	1f 92       	push	r1
     878:	0f 92       	push	r0
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	0f 92       	push	r0
     87e:	11 24       	eor	r1, r1
     880:	2f 93       	push	r18
     882:	3f 93       	push	r19
     884:	4f 93       	push	r20
     886:	5f 93       	push	r21
     888:	6f 93       	push	r22
     88a:	7f 93       	push	r23
     88c:	8f 93       	push	r24
     88e:	9f 93       	push	r25
     890:	af 93       	push	r26
     892:	bf 93       	push	r27
     894:	ef 93       	push	r30
     896:	ff 93       	push	r31
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
     898:	81 b1       	in	r24, 0x01	; 1
     89a:	88 7f       	andi	r24, 0xF8	; 248
     89c:	80 36       	cpi	r24, 0x60	; 96
     89e:	09 f4       	brne	.+2      	; 0x8a2 <__vector_17+0x2c>
     8a0:	49 c0       	rjmp	.+146    	; 0x934 <__vector_17+0xbe>
     8a2:	e8 f5       	brcc	.+122    	; 0x91e <__vector_17+0xa8>
     8a4:	88 32       	cpi	r24, 0x28	; 40
     8a6:	09 f4       	brne	.+2      	; 0x8aa <__vector_17+0x34>
     8a8:	a0 c0       	rjmp	.+320    	; 0x9ea <__vector_17+0x174>
     8aa:	18 f5       	brcc	.+70     	; 0x8f2 <__vector_17+0x7c>
     8ac:	80 31       	cpi	r24, 0x10	; 16
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <__vector_17+0x3c>
     8b0:	96 c0       	rjmp	.+300    	; 0x9de <__vector_17+0x168>
     8b2:	b8 f4       	brcc	.+46     	; 0x8e2 <__vector_17+0x6c>
     8b4:	88 23       	and	r24, r24
     8b6:	09 f4       	brne	.+2      	; 0x8ba <__vector_17+0x44>
     8b8:	e6 c0       	rjmp	.+460    	; 0xa86 <__vector_17+0x210>
     8ba:	88 30       	cpi	r24, 0x08	; 8
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <__vector_17+0x4a>
     8be:	8f c0       	rjmp	.+286    	; 0x9de <__vector_17+0x168>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     8c0:	ff 91       	pop	r31
     8c2:	ef 91       	pop	r30
     8c4:	bf 91       	pop	r27
     8c6:	af 91       	pop	r26
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	7f 91       	pop	r23
     8ce:	6f 91       	pop	r22
     8d0:	5f 91       	pop	r21
     8d2:	4f 91       	pop	r20
     8d4:	3f 91       	pop	r19
     8d6:	2f 91       	pop	r18
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     8e2:	88 31       	cpi	r24, 0x18	; 24
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <__vector_17+0x72>
     8e6:	81 c0       	rjmp	.+258    	; 0x9ea <__vector_17+0x174>
     8e8:	80 32       	cpi	r24, 0x20	; 32
     8ea:	51 f7       	brne	.-44     	; 0x8c0 <__vector_17+0x4a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     8ec:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <twi_error>
     8f0:	14 c0       	rjmp	.+40     	; 0x91a <__vector_17+0xa4>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     8f2:	80 34       	cpi	r24, 0x40	; 64
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <__vector_17+0x82>
     8f6:	91 c0       	rjmp	.+290    	; 0xa1a <__vector_17+0x1a4>
     8f8:	40 f4       	brcc	.+16     	; 0x90a <__vector_17+0x94>
     8fa:	80 33       	cpi	r24, 0x30	; 48
     8fc:	b9 f3       	breq	.-18     	; 0x8ec <__vector_17+0x76>
     8fe:	88 33       	cpi	r24, 0x38	; 56
     900:	f9 f6       	brne	.-66     	; 0x8c0 <__vector_17+0x4a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     902:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <twi_error>
twi_reply():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     906:	85 ec       	ldi	r24, 0xC5	; 197
     908:	a1 c0       	rjmp	.+322    	; 0xa4c <__vector_17+0x1d6>
__vector_17():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     90a:	80 35       	cpi	r24, 0x50	; 80
     90c:	09 f4       	brne	.+2      	; 0x910 <__vector_17+0x9a>
     90e:	7c c0       	rjmp	.+248    	; 0xa08 <__vector_17+0x192>
     910:	88 35       	cpi	r24, 0x58	; 88
     912:	09 f4       	brne	.+2      	; 0x916 <__vector_17+0xa0>
     914:	8a c0       	rjmp	.+276    	; 0xa2a <__vector_17+0x1b4>
     916:	88 34       	cpi	r24, 0x48	; 72
     918:	99 f6       	brne	.-90     	; 0x8c0 <__vector_17+0x4a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
     91a:	35 de       	rcall	.-918    	; 0x586 <twi_stop>
     91c:	d1 cf       	rjmp	.-94     	; 0x8c0 <__vector_17+0x4a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     91e:	88 39       	cpi	r24, 0x98	; 152
     920:	09 f4       	brne	.+2      	; 0x924 <__vector_17+0xae>
     922:	81 c0       	rjmp	.+258    	; 0xa26 <__vector_17+0x1b0>
     924:	30 f5       	brcc	.+76     	; 0x972 <__vector_17+0xfc>
     926:	88 37       	cpi	r24, 0x78	; 120
     928:	29 f0       	breq	.+10     	; 0x934 <__vector_17+0xbe>
     92a:	50 f4       	brcc	.+20     	; 0x940 <__vector_17+0xca>
     92c:	88 36       	cpi	r24, 0x68	; 104
     92e:	11 f0       	breq	.+4      	; 0x934 <__vector_17+0xbe>
     930:	80 37       	cpi	r24, 0x70	; 112
     932:	31 f6       	brne	.-116    	; 0x8c0 <__vector_17+0x4a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <twi_state>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     93a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <twi_rxBufferIndex>
     93e:	52 c0       	rjmp	.+164    	; 0x9e4 <__vector_17+0x16e>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     940:	88 38       	cpi	r24, 0x88	; 136
     942:	09 f4       	brne	.+2      	; 0x946 <__vector_17+0xd0>
     944:	70 c0       	rjmp	.+224    	; 0xa26 <__vector_17+0x1b0>
     946:	80 39       	cpi	r24, 0x90	; 144
     948:	19 f0       	breq	.+6      	; 0x950 <__vector_17+0xda>
     94a:	80 38       	cpi	r24, 0x80	; 128
     94c:	09 f0       	breq	.+2      	; 0x950 <__vector_17+0xda>
     94e:	b8 cf       	rjmp	.-144    	; 0x8c0 <__vector_17+0x4a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
     950:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <twi_rxBufferIndex>
     954:	80 32       	cpi	r24, 0x20	; 32
     956:	08 f0       	brcs	.+2      	; 0x95a <__vector_17+0xe4>
     958:	66 c0       	rjmp	.+204    	; 0xa26 <__vector_17+0x1b0>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     95a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <twi_rxBufferIndex>
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	8e 0f       	add	r24, r30
     962:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <twi_rxBufferIndex>
     966:	83 b1       	in	r24, 0x03	; 3
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	e6 51       	subi	r30, 0x16	; 22
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	80 83       	st	Z, r24
     970:	39 c0       	rjmp	.+114    	; 0x9e4 <__vector_17+0x16e>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     972:	80 3b       	cpi	r24, 0xB0	; 176
     974:	39 f0       	breq	.+14     	; 0x984 <__vector_17+0x10e>
     976:	d0 f4       	brcc	.+52     	; 0x9ac <__vector_17+0x136>
     978:	80 3a       	cpi	r24, 0xA0	; 160
     97a:	09 f4       	brne	.+2      	; 0x97e <__vector_17+0x108>
     97c:	6b c0       	rjmp	.+214    	; 0xa54 <__vector_17+0x1de>
     97e:	88 3a       	cpi	r24, 0xA8	; 168
     980:	09 f0       	breq	.+2      	; 0x984 <__vector_17+0x10e>
     982:	9e cf       	rjmp	.-196    	; 0x8c0 <__vector_17+0x4a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     984:	84 e0       	ldi	r24, 0x04	; 4
     986:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <twi_state>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     98a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <twi_txBufferIndex>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     98e:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <twi_txBufferLength>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	e0 e0       	ldi	r30, 0x00	; 0
     996:	09 95       	icall
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     998:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <twi_txBufferLength>
     99c:	81 11       	cpse	r24, r1
     99e:	0f c0       	rjmp	.+30     	; 0x9be <__vector_17+0x148>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <twi_txBufferLength>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
     9a6:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <twi_txBuffer>
     9aa:	09 c0       	rjmp	.+18     	; 0x9be <__vector_17+0x148>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     9ac:	80 3c       	cpi	r24, 0xC0	; 192
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <__vector_17+0x13c>
     9b0:	aa cf       	rjmp	.-172    	; 0x906 <__vector_17+0x90>
     9b2:	88 3c       	cpi	r24, 0xC8	; 200
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <__vector_17+0x142>
     9b6:	a7 cf       	rjmp	.-178    	; 0x906 <__vector_17+0x90>
     9b8:	88 3b       	cpi	r24, 0xB8	; 184
     9ba:	09 f0       	breq	.+2      	; 0x9be <__vector_17+0x148>
     9bc:	81 cf       	rjmp	.-254    	; 0x8c0 <__vector_17+0x4a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     9be:	e0 91 e9 00 	lds	r30, 0x00E9	; 0x8000e9 <twi_txBufferIndex>
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	8e 0f       	add	r24, r30
     9c6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <twi_txBufferIndex>
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	e8 53       	subi	r30, 0x38	; 56
     9ce:	ff 4f       	sbci	r31, 0xFF	; 255
     9d0:	80 81       	ld	r24, Z
     9d2:	83 b9       	out	0x03, r24	; 3
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     9d4:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <twi_txBufferIndex>
     9d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <twi_txBufferLength>
     9dc:	22 c0       	rjmp	.+68     	; 0xa22 <__vector_17+0x1ac>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     9de:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <twi_slarw>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     9e2:	83 b9       	out	0x03, r24	; 3
twi_reply():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     9e4:	85 ec       	ldi	r24, 0xC5	; 197
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     9e6:	86 bf       	out	0x36, r24	; 54
     9e8:	6b cf       	rjmp	.-298    	; 0x8c0 <__vector_17+0x4a>
__vector_17():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
     9ea:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <twi_masterBufferIndex>
     9ee:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <twi_masterBufferLength>
     9f2:	98 17       	cp	r25, r24
     9f4:	18 f5       	brcc	.+70     	; 0xa3c <__vector_17+0x1c6>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     9f6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <twi_masterBufferIndex>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	8e 0f       	add	r24, r30
     9fe:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <twi_masterBufferIndex>
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	ed cf       	rjmp	.-38     	; 0x9e2 <__vector_17+0x16c>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     a08:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <twi_masterBufferIndex>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	8e 0f       	add	r24, r30
     a10:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <twi_masterBufferIndex>
     a14:	83 b1       	in	r24, 0x03	; 3
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 83       	st	Z, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     a1a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <twi_masterBufferIndex>
     a1e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <twi_masterBufferLength>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     a22:	98 17       	cp	r25, r24
     a24:	f8 f2       	brcs	.-66     	; 0x9e4 <__vector_17+0x16e>
twi_reply():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     a26:	85 e8       	ldi	r24, 0x85	; 133
     a28:	de cf       	rjmp	.-68     	; 0x9e6 <__vector_17+0x170>
__vector_17():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     a2a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <twi_masterBufferIndex>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	8e 0f       	add	r24, r30
     a32:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <twi_masterBufferIndex>
     a36:	83 b1       	in	r24, 0x03	; 3
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 83       	st	Z, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
     a3c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <twi_sendStop>
     a40:	81 11       	cpse	r24, r1
     a42:	6b cf       	rjmp	.-298    	; 0x91a <__vector_17+0xa4>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <twi_inRepStart>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     a4a:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     a4c:	86 bf       	out	0x36, r24	; 54
__vector_17():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     a4e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <twi_state>
     a52:	36 cf       	rjmp	.-404    	; 0x8c0 <__vector_17+0x4a>
twi_releaseBus():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     a54:	85 ec       	ldi	r24, 0xC5	; 197
     a56:	86 bf       	out	0x36, r24	; 54
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
     a58:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <twi_state>
__vector_17():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:637
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
     a5c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <twi_rxBufferIndex>
     a60:	80 32       	cpi	r24, 0x20	; 32
     a62:	30 f4       	brcc	.+12     	; 0xa70 <__vector_17+0x1fa>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     a64:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <twi_rxBufferIndex>
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	e6 51       	subi	r30, 0x16	; 22
     a6c:	ff 4f       	sbci	r31, 0xFF	; 255
     a6e:	10 82       	st	Z, r1
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     a70:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <twi_rxBufferIndex>
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	8a ee       	ldi	r24, 0xEA	; 234
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	e0 e0       	ldi	r30, 0x00	; 0
     a7e:	09 95       	icall
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     a80:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <twi_rxBufferIndex>
     a84:	1d cf       	rjmp	.-454    	; 0x8c0 <__vector_17+0x4a>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     a86:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <twi_error>
     a8a:	47 cf       	rjmp	.-370    	; 0x91a <__vector_17+0xa4>

00000a8c <__vector_6>:
__vector_6():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:81

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
     a96:	2f 93       	push	r18
     a98:	3f 93       	push	r19
     a9a:	4f 93       	push	r20
     a9c:	5f 93       	push	r21
     a9e:	6f 93       	push	r22
     aa0:	7f 93       	push	r23
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
     aa6:	af 93       	push	r26
     aa8:	bf 93       	push	r27
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
handle_interrupts():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:54

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
     ab2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <Channel>
     ab6:	c0 91 02 02 	lds	r28, 0x0202	; 0x800202 <ServoCount>
     aba:	d0 e0       	ldi	r29, 0x00	; 0
     abc:	87 ff       	sbrs	r24, 7
     abe:	1e c0       	rjmp	.+60     	; 0xafc <__vector_6+0x70>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:55
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
     ac0:	1d bc       	out	0x2d, r1	; 45
     ac2:	1c bc       	out	0x2c, r1	; 44
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:61
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
     ac4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <Channel>
     ac8:	8f 5f       	subi	r24, 0xFF	; 255
     aca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <Channel>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:62
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     ace:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <Channel>
     ad2:	08 2e       	mov	r0, r24
     ad4:	00 0c       	add	r0, r0
     ad6:	99 0b       	sbc	r25, r25
     ad8:	8c 17       	cp	r24, r28
     ada:	9d 07       	cpc	r25, r29
     adc:	24 f4       	brge	.+8      	; 0xae6 <__vector_6+0x5a>
     ade:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <Channel>
     ae2:	8c 30       	cpi	r24, 0x0C	; 12
     ae4:	9c f1       	brlt	.+102    	; 0xb4c <__vector_6+0xc0>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:69
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // it's an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     ae6:	8c b5       	in	r24, 0x2c	; 44
     ae8:	9d b5       	in	r25, 0x2d	; 45
     aea:	04 96       	adiw	r24, 0x04	; 4
     aec:	80 34       	cpi	r24, 0x40	; 64
     aee:	9c 49       	sbci	r25, 0x9C	; 156
     af0:	08 f4       	brcc	.+2      	; 0xaf4 <__vector_6+0x68>
     af2:	72 c0       	rjmp	.+228    	; 0xbd8 <__vector_6+0x14c>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:72
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     af4:	8c b5       	in	r24, 0x2c	; 44
     af6:	9d b5       	in	r25, 0x2d	; 45
     af8:	04 96       	adiw	r24, 0x04	; 4
     afa:	70 c0       	rjmp	.+224    	; 0xbdc <__vector_6+0x150>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:57
static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
     afc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <Channel>
     b00:	08 2e       	mov	r0, r24
     b02:	00 0c       	add	r0, r0
     b04:	99 0b       	sbc	r25, r25
     b06:	8c 17       	cp	r24, r28
     b08:	9d 07       	cpc	r25, r29
     b0a:	e4 f6       	brge	.-72     	; 0xac4 <__vector_6+0x38>
     b0c:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <Channel>
     b10:	8e 2f       	mov	r24, r30
     b12:	ee 0f       	add	r30, r30
     b14:	99 0b       	sbc	r25, r25
     b16:	fc 01       	movw	r30, r24
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	e8 0f       	add	r30, r24
     b1e:	f9 1f       	adc	r31, r25
     b20:	e2 52       	subi	r30, 0x22	; 34
     b22:	fe 4f       	sbci	r31, 0xFE	; 254
     b24:	80 81       	ld	r24, Z
     b26:	86 ff       	sbrs	r24, 6
     b28:	cd cf       	rjmp	.-102    	; 0xac4 <__vector_6+0x38>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:58
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
     b2a:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <Channel>
     b2e:	8e 2f       	mov	r24, r30
     b30:	ee 0f       	add	r30, r30
     b32:	99 0b       	sbc	r25, r25
     b34:	fc 01       	movw	r30, r24
     b36:	ee 0f       	add	r30, r30
     b38:	ff 1f       	adc	r31, r31
     b3a:	e8 0f       	add	r30, r24
     b3c:	f9 1f       	adc	r31, r25
     b3e:	e2 52       	subi	r30, 0x22	; 34
     b40:	fe 4f       	sbci	r31, 0xFE	; 254
     b42:	80 81       	ld	r24, Z
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	8f 73       	andi	r24, 0x3F	; 63
     b48:	64 db       	rcall	.-2360   	; 0x212 <digitalWrite>
     b4a:	bc cf       	rjmp	.-136    	; 0xac4 <__vector_6+0x38>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:63
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     b4c:	2c b5       	in	r18, 0x2c	; 44
     b4e:	3d b5       	in	r19, 0x2d	; 45
     b50:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <Channel>
     b54:	8e 2f       	mov	r24, r30
     b56:	ee 0f       	add	r30, r30
     b58:	99 0b       	sbc	r25, r25
     b5a:	fc 01       	movw	r30, r24
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	e8 0f       	add	r30, r24
     b62:	f9 1f       	adc	r31, r25
     b64:	e2 52       	subi	r30, 0x22	; 34
     b66:	fe 4f       	sbci	r31, 0xFE	; 254
     b68:	81 81       	ldd	r24, Z+1	; 0x01
     b6a:	92 81       	ldd	r25, Z+2	; 0x02
     b6c:	82 0f       	add	r24, r18
     b6e:	93 1f       	adc	r25, r19
     b70:	9b bd       	out	0x2b, r25	; 43
     b72:	8a bd       	out	0x2a, r24	; 42
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:64
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     b74:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <Channel>
     b78:	8e 2f       	mov	r24, r30
     b7a:	ee 0f       	add	r30, r30
     b7c:	99 0b       	sbc	r25, r25
     b7e:	fc 01       	movw	r30, r24
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	e8 0f       	add	r30, r24
     b86:	f9 1f       	adc	r31, r25
     b88:	e2 52       	subi	r30, 0x22	; 34
     b8a:	fe 4f       	sbci	r31, 0xFE	; 254
     b8c:	80 81       	ld	r24, Z
     b8e:	86 ff       	sbrs	r24, 6
     b90:	10 c0       	rjmp	.+32     	; 0xbb2 <__vector_6+0x126>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:65
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // it's an active channel so pulse it high
     b92:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <Channel>
     b96:	8e 2f       	mov	r24, r30
     b98:	ee 0f       	add	r30, r30
     b9a:	99 0b       	sbc	r25, r25
     b9c:	fc 01       	movw	r30, r24
     b9e:	ee 0f       	add	r30, r30
     ba0:	ff 1f       	adc	r31, r31
     ba2:	e8 0f       	add	r30, r24
     ba4:	f9 1f       	adc	r31, r25
     ba6:	e2 52       	subi	r30, 0x22	; 34
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	80 81       	ld	r24, Z
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	8f 73       	andi	r24, 0x3F	; 63
     bb0:	30 db       	rcall	.-2464   	; 0x212 <digitalWrite>
__vector_6():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:83
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
}
     bb2:	ff 91       	pop	r31
     bb4:	ef 91       	pop	r30
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	bf 91       	pop	r27
     bbc:	af 91       	pop	r26
     bbe:	9f 91       	pop	r25
     bc0:	8f 91       	pop	r24
     bc2:	7f 91       	pop	r23
     bc4:	6f 91       	pop	r22
     bc6:	5f 91       	pop	r21
     bc8:	4f 91       	pop	r20
     bca:	3f 91       	pop	r19
     bcc:	2f 91       	pop	r18
     bce:	0f 90       	pop	r0
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	0f 90       	pop	r0
     bd4:	1f 90       	pop	r1
     bd6:	18 95       	reti
handle_interrupts():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:70
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // it's an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
     bd8:	80 e4       	ldi	r24, 0x40	; 64
     bda:	9c e9       	ldi	r25, 0x9C	; 156
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:72
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     bdc:	9b bd       	out	0x2b, r25	; 43
     bde:	8a bd       	out	0x2a, r24	; 42
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:73
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <Channel>
     be6:	e5 cf       	rjmp	.-54     	; 0xbb2 <__vector_6+0x126>

00000be8 <String::String(char const*)>:
__base_ctor ():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:28

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
     be8:	ef 92       	push	r14
     bea:	ff 92       	push	r15
     bec:	0f 93       	push	r16
     bee:	1f 93       	push	r17
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	ec 01       	movw	r28, r24
     bf6:	7b 01       	movw	r14, r22
_ZN6String4initEv():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
     bf8:	19 82       	std	Y+1, r1	; 0x01
     bfa:	18 82       	st	Y, r1
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:135
  capacity = 0;
     bfc:	1b 82       	std	Y+3, r1	; 0x03
     bfe:	1a 82       	std	Y+2, r1	; 0x02
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:136
  len = 0;
     c00:	1d 82       	std	Y+5, r1	; 0x05
     c02:	1c 82       	std	Y+4, r1	; 0x04
__base_ctor ():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
     c04:	fb 01       	movw	r30, r22
     c06:	01 90       	ld	r0, Z+
     c08:	00 20       	and	r0, r0
     c0a:	e9 f7       	brne	.-6      	; 0xc06 <String::String(char const*)+0x1e>
     c0c:	31 97       	sbiw	r30, 0x01	; 1
     c0e:	8f 01       	movw	r16, r30
     c10:	06 1b       	sub	r16, r22
     c12:	17 0b       	sbc	r17, r23
copy():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
     c14:	b8 01       	movw	r22, r16
     c16:	67 dd       	rcall	.-1330   	; 0x6e6 <String::reserve(unsigned int)>
     c18:	28 81       	ld	r18, Y
     c1a:	39 81       	ldd	r19, Y+1	; 0x01
     c1c:	81 11       	cpse	r24, r1
     c1e:	12 c0       	rjmp	.+36     	; 0xc44 <String::String(char const*)+0x5c>
invalidate():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
     c20:	21 15       	cp	r18, r1
     c22:	31 05       	cpc	r19, r1
     c24:	11 f0       	breq	.+4      	; 0xc2a <String::String(char const*)+0x42>
     c26:	c9 01       	movw	r24, r18
     c28:	ee d4       	rcall	.+2524   	; 0x1606 <free>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
     c2a:	19 82       	std	Y+1, r1	; 0x01
     c2c:	18 82       	st	Y, r1
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
     c2e:	1d 82       	std	Y+5, r1	; 0x05
     c30:	1c 82       	std	Y+4, r1	; 0x04
     c32:	1b 82       	std	Y+3, r1	; 0x03
     c34:	1a 82       	std	Y+2, r1	; 0x02
__base_ctor ():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	08 95       	ret
copy():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     c44:	1d 83       	std	Y+5, r17	; 0x05
     c46:	0c 83       	std	Y+4, r16	; 0x04
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
     c48:	b7 01       	movw	r22, r14
     c4a:	c9 01       	movw	r24, r18
__base_ctor ():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:32

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
copy():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:178
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
     c58:	27 c6       	rjmp	.+3150   	; 0x18a8 <strcpy>

00000c5a <global constructors keyed to 65535_0_Keypad.ino.cpp.o.2623>:
_GLOBAL__I_65535_0_Keypad.ino.cpp.o.2623():
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Serial+0x3>
     c66:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <Serial+0x2>
     c6a:	88 ee       	ldi	r24, 0xE8	; 232
     c6c:	93 e0       	ldi	r25, 0x03	; 3
     c6e:	a0 e0       	ldi	r26, 0x00	; 0
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Serial+0x4>
     c76:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Serial+0x5>
     c7a:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <Serial+0x6>
     c7e:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <Serial+0x7>
     c82:	82 e7       	ldi	r24, 0x72	; 114
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Serial+0x1>
     c8a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Serial>
     c8e:	80 e4       	ldi	r24, 0x40	; 64
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <Serial+0xd>
     c96:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Serial+0xc>
     c9a:	29 e2       	ldi	r18, 0x29	; 41
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <Serial+0xf>
     ca2:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <Serial+0xe>
     ca6:	2b e2       	ldi	r18, 0x2B	; 43
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <Serial+0x11>
     cae:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <Serial+0x10>
     cb2:	2a e2       	ldi	r18, 0x2A	; 42
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <Serial+0x13>
     cba:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <Serial+0x12>
     cbe:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <Serial+0x15>
     cc2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Serial+0x14>
     cc6:	8c e2       	ldi	r24, 0x2C	; 44
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <Serial+0x17>
     cce:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <Serial+0x16>
     cd2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Serial+0x19>
     cd6:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <Serial+0x1a>
     cda:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <Serial+0x1b>
     cde:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <Serial+0x1c>
     ce2:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <pixels+0x1>
     ce6:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <pixels+0x8>
     cea:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <pixels+0xf>
     cee:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <pixels+0x10>
     cf2:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <pixels+0x11>
     cf6:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <pixels+0x12>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <pixels+0xe>
     d00:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <pixels+0xb>
     d04:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <pixels+0xc>
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <pixels+0xd>
     d0e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <pixels>
     d12:	c8 e6       	ldi	r28, 0x68	; 104
     d14:	d1 e0       	ldi	r29, 0x01	; 1
     d16:	d0 93 17 02 	sts	0x0217, r29	; 0x800217 <pixels+0x5>
     d1a:	c0 93 16 02 	sts	0x0216, r28	; 0x800216 <pixels+0x4>
     d1e:	88 e6       	ldi	r24, 0x68	; 104
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	d5 d3       	rcall	.+1962   	; 0x14ce <malloc>
     d24:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <pixels+0xa>
     d28:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <pixels+0x9>
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	09 f4       	brne	.+2      	; 0xd32 <global constructors keyed to 65535_0_Keypad.ino.cpp.o.2623+0xd8>
     d30:	9d c0       	rjmp	.+314    	; 0xe6c <global constructors keyed to 65535_0_Keypad.ino.cpp.o.2623+0x212>
     d32:	fc 01       	movw	r30, r24
     d34:	9e 01       	movw	r18, r28
     d36:	11 92       	st	Z+, r1
     d38:	21 50       	subi	r18, 0x01	; 1
     d3a:	30 40       	sbci	r19, 0x00	; 0
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <global constructors keyed to 65535_0_Keypad.ino.cpp.o.2623+0xdc>
     d3e:	88 e7       	ldi	r24, 0x78	; 120
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <pixels+0x3>
     d46:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <pixels+0x2>
     d4a:	8d e0       	ldi	r24, 0x0D	; 13
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <pixels+0x7>
     d52:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <pixels+0x6>
     d56:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <pixels+0x1>
     d5a:	88 23       	and	r24, r24
     d5c:	31 f0       	breq	.+12     	; 0xd6a <global constructors keyed to 65535_0_Keypad.ino.cpp.o.2623+0x110>
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	8d e0       	ldi	r24, 0x0D	; 13
     d62:	84 da       	rcall	.-2808   	; 0x26c <pinMode>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	8d e0       	ldi	r24, 0x0D	; 13
     d68:	54 da       	rcall	.-2904   	; 0x212 <digitalWrite>
     d6a:	cf e7       	ldi	r28, 0x7F	; 127
     d6c:	d0 e0       	ldi	r29, 0x00	; 0
     d6e:	fe 01       	movw	r30, r28
     d70:	84 91       	lpm	r24, Z
     d72:	e8 2f       	mov	r30, r24
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	e8 59       	subi	r30, 0x98	; 152
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	85 91       	lpm	r24, Z+
     d80:	94 91       	lpm	r25, Z
     d82:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <pixels+0x14>
     d86:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <pixels+0x13>
     d8a:	0e e5       	ldi	r16, 0x5E	; 94
     d8c:	10 e0       	ldi	r17, 0x00	; 0
     d8e:	f8 01       	movw	r30, r16
     d90:	84 91       	lpm	r24, Z
     d92:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <pixels+0x15>
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	8d e0       	ldi	r24, 0x0D	; 13
     d9a:	68 da       	rcall	.-2864   	; 0x26c <pinMode>
     d9c:	f8 01       	movw	r30, r16
     d9e:	04 91       	lpm	r16, Z
     da0:	00 93 d0 01 	sts	0x01D0, r16	; 0x8001d0 <oneWire>
     da4:	fe 01       	movw	r30, r28
     da6:	c4 91       	lpm	r28, Z
     da8:	ec 2f       	mov	r30, r28
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	ee 0f       	add	r30, r30
     dae:	ff 1f       	adc	r31, r31
     db0:	e9 5b       	subi	r30, 0xB9	; 185
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	85 91       	lpm	r24, Z+
     db6:	94 91       	lpm	r25, Z
     db8:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <oneWire+0x2>
     dbc:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <oneWire+0x1>
     dc0:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <oneWire+0xb>
     dc4:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <oneWire+0xd>
     dc8:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <oneWire+0xc>
     dcc:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <oneWire+0xa>
     dd0:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <oneWire+0x9>
     dd4:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <oneWire+0x8>
     dd8:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <oneWire+0x7>
     ddc:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <oneWire+0x6>
     de0:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <oneWire+0x5>
     de4:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <oneWire+0x4>
     de8:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <oneWire+0x3>
     dec:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <sensors+0x16>
     df0:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <sensors+0x15>
     df4:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <sensors+0x1>
     df8:	80 ed       	ldi	r24, 0xD0	; 208
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <sensors+0xa>
     e00:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <sensors+0x9>
     e04:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <sensors+0x7>
     e08:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <sensors+0x8>
     e0c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <sensors>
     e10:	89 e0       	ldi	r24, 0x09	; 9
     e12:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <sensors+0x3>
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <sensors+0x4>
     e1c:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <sensors+0x5>
     e20:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <sensors+0x6>
     e24:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <ServoCount>
     e28:	8c 30       	cpi	r24, 0x0C	; 12
     e2a:	48 f5       	brcc	.+82     	; 0xe7e <global constructors keyed to 65535_0_Keypad.ino.cpp.o.2623+0x224>
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	98 0f       	add	r25, r24
     e30:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <ServoCount>
     e34:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <myservo>
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	fc 01       	movw	r30, r24
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	e8 0f       	add	r30, r24
     e42:	f9 1f       	adc	r31, r25
     e44:	e2 52       	subi	r30, 0x22	; 34
     e46:	fe 4f       	sbci	r31, 0xFE	; 254
     e48:	88 eb       	ldi	r24, 0xB8	; 184
     e4a:	9b e0       	ldi	r25, 0x0B	; 11
     e4c:	92 83       	std	Z+2, r25	; 0x02
     e4e:	81 83       	std	Z+1, r24	; 0x01
     e50:	63 e8       	ldi	r22, 0x83	; 131
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	86 e0       	ldi	r24, 0x06	; 6
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	c7 de       	rcall	.-626    	; 0xbe8 <String::String(char const*)>
     e5a:	62 e8       	ldi	r22, 0x82	; 130
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	8c e0       	ldi	r24, 0x0C	; 12
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	be ce       	rjmp	.-644    	; 0xbe8 <String::String(char const*)>
     e6c:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <pixels+0x5>
     e70:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <pixels+0x4>
     e74:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <pixels+0x3>
     e78:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <pixels+0x2>
     e7c:	66 cf       	rjmp	.-308    	; 0xd4a <global constructors keyed to 65535_0_Keypad.ino.cpp.o.2623+0xf0>
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <myservo>
     e84:	e5 cf       	rjmp	.-54     	; 0xe50 <global constructors keyed to 65535_0_Keypad.ino.cpp.o.2623+0x1f6>

00000e86 <main>:
main():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <main+0x6>
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
init():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     e90:	78 94       	sei
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
     e92:	83 b7       	in	r24, 0x33	; 51
     e94:	83 60       	ori	r24, 0x03	; 3
     e96:	83 bf       	out	0x33, r24	; 51
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
     e98:	89 b7       	in	r24, 0x39	; 57
     e9a:	81 60       	ori	r24, 0x01	; 1
     e9c:	89 bf       	out	0x39, r24	; 57
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	9e bd       	out	0x2e, r25	; 46
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     ea2:	8e b5       	in	r24, 0x2e	; 46
     ea4:	81 60       	ori	r24, 0x01	; 1
     ea6:	8e bd       	out	0x2e, r24	; 46
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     ea8:	8f b5       	in	r24, 0x2f	; 47
     eaa:	81 60       	ori	r24, 0x01	; 1
     eac:	8f bd       	out	0x2f, r24	; 47
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
     eae:	85 b5       	in	r24, 0x25	; 37
     eb0:	84 60       	ori	r24, 0x04	; 4
     eb2:	85 bd       	out	0x25, r24	; 37
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
     eb4:	85 b5       	in	r24, 0x25	; 37
     eb6:	80 64       	ori	r24, 0x40	; 64
     eb8:	85 bd       	out	0x25, r24	; 37
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
     eba:	87 e8       	ldi	r24, 0x87	; 135
     ebc:	86 b9       	out	0x06, r24	; 6
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
     ebe:	1a b8       	out	0x0a, r1	; 10
begin():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     ec0:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <Serial+0x10>
     ec4:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <Serial+0x11>
     ec8:	90 83       	st	Z, r25
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     eca:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Serial+0xc>
     ece:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Serial+0xd>
     ed2:	10 82       	st	Z, r1
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     ed4:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <Serial+0xe>
     ed8:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <Serial+0xf>
     edc:	8f ec       	ldi	r24, 0xCF	; 207
     ede:	80 83       	st	Z, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     ee0:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <Serial+0x18>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     ee4:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <Serial+0x14>
     ee8:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <Serial+0x15>
     eec:	86 e8       	ldi	r24, 0x86	; 134
     eee:	80 83       	st	Z, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     ef0:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <Serial+0x12>
     ef4:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <Serial+0x13>
     ef8:	80 81       	ld	r24, Z
     efa:	88 69       	ori	r24, 0x98	; 152
     efc:	80 83       	st	Z, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     efe:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <Serial+0x12>
     f02:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <Serial+0x13>
     f06:	80 81       	ld	r24, Z
     f08:	8f 7d       	andi	r24, 0xDF	; 223
     f0a:	80 83       	st	Z, r24
     f0c:	06 e6       	ldi	r16, 0x66	; 102
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	8a e6       	ldi	r24, 0x6A	; 106
     f12:	e8 2e       	mov	r14, r24
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	f8 2e       	mov	r15, r24
init_keypad():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:109

void init_keypad() {
  for(int i=0;i<4;i++)
      {
        //Should be INPUT_PULLUP and OUTPUT
          pinMode(rowPins[i],INPUT);
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	f8 01       	movw	r30, r16
     f1c:	81 91       	ld	r24, Z+
     f1e:	8f 01       	movw	r16, r30
     f20:	a5 d9       	rcall	.-3254   	; 0x26c <pinMode>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:110
          pinMode(colPins[i],OUTPUT);
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	f7 01       	movw	r30, r14
     f26:	81 91       	ld	r24, Z+
     f28:	7f 01       	movw	r14, r30
     f2a:	a0 d9       	rcall	.-3264   	; 0x26c <pinMode>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:106
    }

}

void init_keypad() {
  for(int i=0;i<4;i++)
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	0a 36       	cpi	r16, 0x6A	; 106
     f30:	1f 07       	cpc	r17, r31
     f32:	91 f7       	brne	.-28     	; 0xf18 <main+0x92>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:114
          pinMode(rowPins[i],INPUT);
          pinMode(colPins[i],OUTPUT);
        
      }

  SetCols();
     f34:	b4 db       	rcall	.-2200   	; 0x69e <SetCols()>
attach():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:240
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
{
  if(this->servoIndex < MAX_SERVOS ) {
     f36:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <myservo>
     f3a:	8c 30       	cpi	r24, 0x0C	; 12
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <main+0xba>
     f3e:	4b c0       	rjmp	.+150    	; 0xfd6 <main+0x150>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:241
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	8a e0       	ldi	r24, 0x0A	; 10
     f44:	93 d9       	rcall	.-3290   	; 0x26c <pinMode>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:242
    servos[this->servoIndex].Pin.nbr = pin;
     f46:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <myservo>
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	f9 01       	movw	r30, r18
     f50:	ee 0f       	add	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	e2 0f       	add	r30, r18
     f56:	f3 1f       	adc	r31, r19
     f58:	e2 52       	subi	r30, 0x22	; 34
     f5a:	fe 4f       	sbci	r31, 0xFE	; 254
     f5c:	90 81       	ld	r25, Z
     f5e:	90 7c       	andi	r25, 0xC0	; 192
     f60:	9a 60       	ori	r25, 0x0A	; 10
     f62:	90 83       	st	Z, r25
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:244
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 us
     f64:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <myservo+0x1>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:245
    this->max  = (MAX_PULSE_WIDTH - max)/4;
     f68:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <myservo+0x2>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:247
    // initialize the timer if it has not already been initialized
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
     f6c:	2c e0       	ldi	r18, 0x0C	; 12
     f6e:	62 2f       	mov	r22, r18
     f70:	9c d2       	rcall	.+1336   	; 0x14aa <__udivmodqi4>
isTimerActive():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:214

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
     f72:	82 9f       	mul	r24, r18
     f74:	b0 01       	movw	r22, r0
     f76:	11 24       	eor	r1, r1
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	ab 01       	movw	r20, r22
     f7e:	42 0f       	add	r20, r18
     f80:	53 1f       	adc	r21, r19
     f82:	fa 01       	movw	r30, r20
     f84:	ee 0f       	add	r30, r30
     f86:	ff 1f       	adc	r31, r31
     f88:	e4 0f       	add	r30, r20
     f8a:	f5 1f       	adc	r31, r21
     f8c:	e2 52       	subi	r30, 0x22	; 34
     f8e:	fe 4f       	sbci	r31, 0xFE	; 254
     f90:	90 81       	ld	r25, Z
     f92:	96 fd       	sbrc	r25, 6
     f94:	12 c0       	rjmp	.+36     	; 0xfba <main+0x134>
     f96:	2f 5f       	subi	r18, 0xFF	; 255
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:213
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
     f9a:	2c 30       	cpi	r18, 0x0C	; 12
     f9c:	31 05       	cpc	r19, r1
     f9e:	71 f7       	brne	.-36     	; 0xf7c <main+0xf6>
initISR():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:127


static void initISR(timer16_Sequence_t timer)
{
#if defined (_useTimer1)
  if(timer == _timer1) {
     fa0:	81 11       	cpse	r24, r1
     fa2:	0b c0       	rjmp	.+22     	; 0xfba <main+0x134>
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:128
    TCCR1A = 0;             // normal counting mode
     fa4:	1f bc       	out	0x2f, r1	; 47
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:129
    TCCR1B = _BV(CS11);     // set prescaler of 8
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	8e bd       	out	0x2e, r24	; 46
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:130
    TCNT1 = 0;              // clear the timer count
     faa:	1d bc       	out	0x2d, r1	; 45
     fac:	1c bc       	out	0x2c, r1	; 44
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:132
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts
     fae:	88 b7       	in	r24, 0x38	; 56
     fb0:	80 61       	ori	r24, 0x10	; 16
     fb2:	88 bf       	out	0x38, r24	; 56
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:133
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt
     fb4:	89 b7       	in	r24, 0x39	; 57
     fb6:	80 61       	ori	r24, 0x10	; 16
     fb8:	89 bf       	out	0x39, r24	; 57
attach():
/Users/yousefmahmoud/Documents/Arduino/libraries/Servo/src/avr/Servo.cpp:250
    this->max  = (MAX_PULSE_WIDTH - max)/4;
    // initialize the timer if it has not already been initialized
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
     fba:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <myservo>
     fbe:	8e 2f       	mov	r24, r30
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	fc 01       	movw	r30, r24
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	e8 0f       	add	r30, r24
     fca:	f9 1f       	adc	r31, r25
     fcc:	e2 52       	subi	r30, 0x22	; 34
     fce:	fe 4f       	sbci	r31, 0xFE	; 254
     fd0:	80 81       	ld	r24, Z
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	80 83       	st	Z, r24
setup():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:36
  Serial.begin(9600);

  init_keypad();

  myservo.attach(servoPin);
  myservo.write(0);
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	7f d8       	rcall	.-3842   	; 0xda <Servo::write(int) [clone .constprop.35]>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:38

  pinMode(pirPin,INPUT);
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	8e e0       	ldi	r24, 0x0E	; 14
     fe0:	45 d9       	rcall	.-3446   	; 0x26c <pinMode>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:39
  pinMode(buzzerPin,OUTPUT);
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	8f e0       	ldi	r24, 0x0F	; 15
     fe6:	42 d9       	rcall	.-3452   	; 0x26c <pinMode>
serialEventRun():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	e8 2e       	mov	r14, r24
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	f8 2e       	mov	r15, r24
loop():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:45
  
}

void loop() {

  char MotionDetected=digitalRead(pirPin);
     ff0:	8e e0       	ldi	r24, 0x0E	; 14
     ff2:	e7 d8       	rcall	.-3634   	; 0x1c2 <digitalRead>
     ff4:	08 2f       	mov	r16, r24
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:154
  }

}

char getKey() {
    ResetCols();   // Reset all columns first
     ff6:	47 db       	rcall	.-2418   	; 0x686 <ResetCols()>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:155
    SetCols();  
     ff8:	52 db       	rcall	.-2396   	; 0x69e <SetCols()>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:158
  
    while(1){
        if (ReadRowPins(0)) {
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	1e db       	rcall	.-2500   	; 0x63a <ReadRowPins(char)>
     ffe:	88 23       	and	r24, r24
    1000:	09 f4       	brne	.+2      	; 0x1004 <main+0x17e>
    1002:	46 c1       	rjmp	.+652    	; 0x1290 <main+0x40a>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:159
            ResetCols();
    1004:	40 db       	rcall	.-2432   	; 0x686 <ResetCols()>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:160
            digitalWrite(colPins[0],HIGH);
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	84 e0       	ldi	r24, 0x04	; 4
    100a:	03 d9       	rcall	.-3578   	; 0x212 <digitalWrite>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:161
            delay(20);
    100c:	64 e1       	ldi	r22, 0x14	; 20
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	82 d9       	rcall	.-3324   	; 0x31a <delay>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:162
            if (ReadRowPins(1)) {
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	10 db       	rcall	.-2528   	; 0x63a <ReadRowPins(char)>
    101a:	88 23       	and	r24, r24
    101c:	09 f4       	brne	.+2      	; 0x1020 <main+0x19a>
    101e:	72 c0       	rjmp	.+228    	; 0x1104 <main+0x27e>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:163
                delay(20);
    1020:	64 e1       	ldi	r22, 0x14	; 20
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	78 d9       	rcall	.-3344   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:164
                return '3';
    102a:	13 e3       	ldi	r17, 0x33	; 51
loop():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:48
void loop() {

  char MotionDetected=digitalRead(pirPin);

  char key=getKey();
  delay(150);
    102c:	66 e9       	ldi	r22, 0x96	; 150
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	72 d9       	rcall	.-3356   	; 0x31a <delay>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:50

  if(key != 'Q'){
    1036:	11 35       	cpi	r17, 0x51	; 81
    1038:	81 f1       	breq	.+96     	; 0x109a <main+0x214>
concat():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:284
}

unsigned char String::concat(char c)
{
  char buf[2];
  buf[0] = c;
    103a:	19 83       	std	Y+1, r17	; 0x01
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:285
  buf[1] = 0;
    103c:	1a 82       	std	Y+2, r1	; 0x02
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:266
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
  unsigned int newlen = len + length;
    103e:	c0 90 10 02 	lds	r12, 0x0210	; 0x800210 <In_Pass+0x4>
    1042:	d0 90 11 02 	lds	r13, 0x0211	; 0x800211 <In_Pass+0x5>
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	c8 1a       	sub	r12, r24
    104a:	d8 0a       	sbc	r13, r24
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:269
  if (!cstr) return 0;
  if (length == 0) return 1;
  if (!reserve(newlen)) return 0;
    104c:	b6 01       	movw	r22, r12
    104e:	8c e0       	ldi	r24, 0x0C	; 12
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	49 db       	rcall	.-2414   	; 0x6e6 <String::reserve(unsigned int)>
    1054:	88 23       	and	r24, r24
    1056:	91 f0       	breq	.+36     	; 0x107c <main+0x1f6>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:270
  strcpy(buffer + len, cstr);
    1058:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <In_Pass>
    105c:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <In_Pass+0x1>
    1060:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <In_Pass+0x4>
    1064:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <In_Pass+0x5>
    1068:	be 01       	movw	r22, r28
    106a:	6f 5f       	subi	r22, 0xFF	; 255
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	82 0f       	add	r24, r18
    1070:	93 1f       	adc	r25, r19
    1072:	1a d4       	rcall	.+2100   	; 0x18a8 <strcpy>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:271
  len = newlen;
    1074:	d0 92 11 02 	sts	0x0211, r13	; 0x800211 <In_Pass+0x5>
    1078:	c0 92 10 02 	sts	0x0210, r12	; 0x800210 <In_Pass+0x4>
write():
    107c:	88 e8       	ldi	r24, 0x88	; 136
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	1a db       	rcall	.-2508   	; 0x6b6 <Print::write(char const*) [clone .part.2] [clone .constprop.32]>
print():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1082:	61 2f       	mov	r22, r17
    1084:	8c e1       	ldi	r24, 0x1C	; 28
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	14 da       	rcall	.-3032   	; 0x4b2 <HardwareSerial::write(unsigned char)>
write():
    108a:	80 e8       	ldi	r24, 0x80	; 128
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	13 db       	rcall	.-2522   	; 0x6b6 <Print::write(char const*) [clone .part.2] [clone .constprop.32]>
loop():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:57
    if (key){

      In_Pass+=key;
      Serial.print("Key Pressed : ");
      Serial.println(key);
      i++;
    1090:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i>
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:62

    }
  }

  if(i==4){
    109a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i>
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <main+0x21e>
    10a2:	44 c1       	rjmp	.+648    	; 0x132c <main+0x4a6>
write():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:58
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    10a4:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <In_Pass+0x4>
    10a8:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <In_Pass+0x5>
    10ac:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <In_Pass>
    10b0:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <In_Pass+0x1>
    10b4:	8c e1       	ldi	r24, 0x1C	; 28
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	60 d9       	rcall	.-3392   	; 0x37a <Print::write(unsigned char const*, unsigned int)>
    10ba:	80 e8       	ldi	r24, 0x80	; 128
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	fb da       	rcall	.-2570   	; 0x6b6 <Print::write(char const*) [clone .part.2] [clone .constprop.32]>
equals():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:447
  return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
{
  return (len == s2.len && compareTo(s2) == 0);
    10c0:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <In_Pass+0x4>
    10c4:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <In_Pass+0x5>
    10c8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Saved_Pass+0x4>
    10cc:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Saved_Pass+0x5>
    10d0:	28 17       	cp	r18, r24
    10d2:	39 07       	cpc	r19, r25
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <main+0x252>
    10d6:	e0 c0       	rjmp	.+448    	; 0x1298 <main+0x412>
compareTo():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:437
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
  if (!buffer || !s.buffer) {
    10d8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <In_Pass>
    10dc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <In_Pass+0x1>
    10e0:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <Saved_Pass>
    10e4:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <Saved_Pass+0x1>
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	09 f4       	brne	.+2      	; 0x10ee <main+0x268>
    10ec:	e6 c0       	rjmp	.+460    	; 0x12ba <main+0x434>
    10ee:	61 15       	cp	r22, r1
    10f0:	71 05       	cpc	r23, r1
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <main+0x270>
    10f4:	cf c0       	rjmp	.+414    	; 0x1294 <main+0x40e>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:439
    if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    if (buffer && len > 0) return *(unsigned char *)buffer;
    10f6:	23 2b       	or	r18, r19
    10f8:	09 f4       	brne	.+2      	; 0x10fc <main+0x276>
    10fa:	ec c0       	rjmp	.+472    	; 0x12d4 <main+0x44e>
    10fc:	fc 01       	movw	r30, r24
    10fe:	80 81       	ld	r24, Z
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	e6 c0       	rjmp	.+460    	; 0x12d0 <main+0x44a>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:165
            digitalWrite(colPins[0],HIGH);
            delay(20);
            if (ReadRowPins(1)) {
                delay(20);
                return '3';
            } else if (ReadRowPins(2)) {
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	99 da       	rcall	.-2766   	; 0x63a <ReadRowPins(char)>
    1108:	88 23       	and	r24, r24
    110a:	39 f0       	breq	.+14     	; 0x111a <main+0x294>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:166
                delay(20);
    110c:	64 e1       	ldi	r22, 0x14	; 20
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 d9       	rcall	.-3580   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:167
                return '6';
    1116:	16 e3       	ldi	r17, 0x36	; 54
    1118:	89 cf       	rjmp	.-238    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:168
            } else if (ReadRowPins(3)) {
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	8e da       	rcall	.-2788   	; 0x63a <ReadRowPins(char)>
    111e:	88 23       	and	r24, r24
    1120:	39 f0       	breq	.+14     	; 0x1130 <main+0x2aa>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:169
                delay(20);
    1122:	64 e1       	ldi	r22, 0x14	; 20
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	f7 d8       	rcall	.-3602   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:170
                return '9';
    112c:	19 e3       	ldi	r17, 0x39	; 57
    112e:	7e cf       	rjmp	.-260    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:172

            } else if (ReadRowPins(4)) {
    1130:	84 e0       	ldi	r24, 0x04	; 4
    1132:	83 da       	rcall	.-2810   	; 0x63a <ReadRowPins(char)>
    1134:	88 23       	and	r24, r24
    1136:	39 f0       	breq	.+14     	; 0x1146 <main+0x2c0>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:173
                delay(20);
    1138:	64 e1       	ldi	r22, 0x14	; 20
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	ec d8       	rcall	.-3624   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:174
                return '#';
    1142:	13 e2       	ldi	r17, 0x23	; 35
    1144:	73 cf       	rjmp	.-282    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:177
            } else {
                //Do nothing
                ResetCols();
    1146:	9f da       	rcall	.-2754   	; 0x686 <ResetCols()>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:178
                digitalWrite(colPins[1],HIGH);
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	85 e0       	ldi	r24, 0x05	; 5
    114c:	62 d8       	rcall	.-3900   	; 0x212 <digitalWrite>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:179
               delay(20);
    114e:	64 e1       	ldi	r22, 0x14	; 20
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	e1 d8       	rcall	.-3646   	; 0x31a <delay>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:180
                if (ReadRowPins(1)) {
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	6f da       	rcall	.-2850   	; 0x63a <ReadRowPins(char)>
    115c:	88 23       	and	r24, r24
    115e:	39 f0       	breq	.+14     	; 0x116e <main+0x2e8>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:181
                    delay(20);
    1160:	64 e1       	ldi	r22, 0x14	; 20
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	d8 d8       	rcall	.-3664   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:182
                    return '2';
    116a:	12 e3       	ldi	r17, 0x32	; 50
    116c:	5f cf       	rjmp	.-322    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:184

                } else if (ReadRowPins(2)) {
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	64 da       	rcall	.-2872   	; 0x63a <ReadRowPins(char)>
    1172:	88 23       	and	r24, r24
    1174:	39 f0       	breq	.+14     	; 0x1184 <main+0x2fe>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:185
                    delay(20);
    1176:	64 e1       	ldi	r22, 0x14	; 20
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	cd d8       	rcall	.-3686   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:186
                    return '5';
    1180:	15 e3       	ldi	r17, 0x35	; 53
    1182:	54 cf       	rjmp	.-344    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:188

                } else if (ReadRowPins(3)) {
    1184:	83 e0       	ldi	r24, 0x03	; 3
    1186:	59 da       	rcall	.-2894   	; 0x63a <ReadRowPins(char)>
    1188:	88 23       	and	r24, r24
    118a:	39 f0       	breq	.+14     	; 0x119a <main+0x314>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:189
                    delay(20);
    118c:	64 e1       	ldi	r22, 0x14	; 20
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	c2 d8       	rcall	.-3708   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:190
                    return '8';
    1196:	18 e3       	ldi	r17, 0x38	; 56
    1198:	49 cf       	rjmp	.-366    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:192

                } else if (ReadRowPins(4)) {
    119a:	84 e0       	ldi	r24, 0x04	; 4
    119c:	4e da       	rcall	.-2916   	; 0x63a <ReadRowPins(char)>
    119e:	88 23       	and	r24, r24
    11a0:	39 f0       	breq	.+14     	; 0x11b0 <main+0x32a>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:193
                    delay(2);
    11a2:	62 e0       	ldi	r22, 0x02	; 2
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	b7 d8       	rcall	.-3730   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:194
                    return '0';
    11ac:	10 e3       	ldi	r17, 0x30	; 48
    11ae:	3e cf       	rjmp	.-388    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:198

                } else {
                    //Do nothing
                    ResetCols();
    11b0:	6a da       	rcall	.-2860   	; 0x686 <ResetCols()>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:199
                   digitalWrite(colPins[2],HIGH);
    11b2:	61 e0       	ldi	r22, 0x01	; 1
    11b4:	86 e0       	ldi	r24, 0x06	; 6
    11b6:	2d d8       	rcall	.-4006   	; 0x212 <digitalWrite>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:200
                    delay(20);
    11b8:	64 e1       	ldi	r22, 0x14	; 20
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	ac d8       	rcall	.-3752   	; 0x31a <delay>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:201
                    if (ReadRowPins(1)) {
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	3a da       	rcall	.-2956   	; 0x63a <ReadRowPins(char)>
    11c6:	88 23       	and	r24, r24
    11c8:	39 f0       	breq	.+14     	; 0x11d8 <main+0x352>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:202
                        delay(20);
    11ca:	64 e1       	ldi	r22, 0x14	; 20
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	a3 d8       	rcall	.-3770   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:203
                        return '1';
    11d4:	11 e3       	ldi	r17, 0x31	; 49
    11d6:	2a cf       	rjmp	.-428    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:205

                    } else if (ReadRowPins(2)) {
    11d8:	82 e0       	ldi	r24, 0x02	; 2
    11da:	2f da       	rcall	.-2978   	; 0x63a <ReadRowPins(char)>
    11dc:	88 23       	and	r24, r24
    11de:	39 f0       	breq	.+14     	; 0x11ee <main+0x368>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:206
                        delay(20);
    11e0:	64 e1       	ldi	r22, 0x14	; 20
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	98 d8       	rcall	.-3792   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:207
                        return '4';
    11ea:	14 e3       	ldi	r17, 0x34	; 52
    11ec:	1f cf       	rjmp	.-450    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:209

                    } else if (ReadRowPins(3)) {
    11ee:	83 e0       	ldi	r24, 0x03	; 3
    11f0:	24 da       	rcall	.-3000   	; 0x63a <ReadRowPins(char)>
    11f2:	88 23       	and	r24, r24
    11f4:	39 f0       	breq	.+14     	; 0x1204 <main+0x37e>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:210
                        delay(20);
    11f6:	64 e1       	ldi	r22, 0x14	; 20
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	8d d8       	rcall	.-3814   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:211
                        return '7';
    1200:	17 e3       	ldi	r17, 0x37	; 55
    1202:	14 cf       	rjmp	.-472    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:213

                    } else if (ReadRowPins(4)) {
    1204:	84 e0       	ldi	r24, 0x04	; 4
    1206:	19 da       	rcall	.-3022   	; 0x63a <ReadRowPins(char)>
    1208:	88 23       	and	r24, r24
    120a:	39 f0       	breq	.+14     	; 0x121a <main+0x394>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:214
                        delay(20);
    120c:	64 e1       	ldi	r22, 0x14	; 20
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	82 d8       	rcall	.-3836   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:215
                        return '*';
    1216:	1a e2       	ldi	r17, 0x2A	; 42
    1218:	09 cf       	rjmp	.-494    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:219

                    } else {

                        ResetCols();
    121a:	35 da       	rcall	.-2966   	; 0x686 <ResetCols()>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:220
                        digitalWrite(colPins[3],HIGH);
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	87 e0       	ldi	r24, 0x07	; 7
    1220:	f8 d7       	rcall	.+4080   	; 0x2212 <__TEXT_REGION_LENGTH__+0x212>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:221
                        delay(20);
    1222:	64 e1       	ldi	r22, 0x14	; 20
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	77 d8       	rcall	.-3858   	; 0x31a <delay>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:222
                        if (ReadRowPins(1)) {
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	05 da       	rcall	.-3062   	; 0x63a <ReadRowPins(char)>
    1230:	88 23       	and	r24, r24
    1232:	39 f0       	breq	.+14     	; 0x1242 <main+0x3bc>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:223
                            delay(20);
    1234:	64 e1       	ldi	r22, 0x14	; 20
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	6e d8       	rcall	.-3876   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:224
                            return 'A';
    123e:	11 e4       	ldi	r17, 0x41	; 65
    1240:	f5 ce       	rjmp	.-534    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:226

                        } else if (ReadRowPins(2)) {
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	fa d9       	rcall	.-3084   	; 0x63a <ReadRowPins(char)>
    1246:	88 23       	and	r24, r24
    1248:	39 f0       	breq	.+14     	; 0x1258 <main+0x3d2>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:227
                            delay(20);
    124a:	64 e1       	ldi	r22, 0x14	; 20
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	63 d8       	rcall	.-3898   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:228
                            return 'B';
    1254:	12 e4       	ldi	r17, 0x42	; 66
    1256:	ea ce       	rjmp	.-556    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:230

                        } else if (ReadRowPins(3)) {
    1258:	83 e0       	ldi	r24, 0x03	; 3
    125a:	ef d9       	rcall	.-3106   	; 0x63a <ReadRowPins(char)>
    125c:	88 23       	and	r24, r24
    125e:	39 f0       	breq	.+14     	; 0x126e <main+0x3e8>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:231
                            delay(20);
    1260:	64 e1       	ldi	r22, 0x14	; 20
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	58 d8       	rcall	.-3920   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:232
                            return 'C';
    126a:	13 e4       	ldi	r17, 0x43	; 67
    126c:	df ce       	rjmp	.-578    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:234

                        } else if (ReadRowPins(4)) {
    126e:	84 e0       	ldi	r24, 0x04	; 4
    1270:	e4 d9       	rcall	.-3128   	; 0x63a <ReadRowPins(char)>
    1272:	88 23       	and	r24, r24
    1274:	39 f0       	breq	.+14     	; 0x1284 <main+0x3fe>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:235
                            delay(20);
    1276:	64 e1       	ldi	r22, 0x14	; 20
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	4d d8       	rcall	.-3942   	; 0x31a <delay>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:236
                            return 'D';
    1280:	14 e4       	ldi	r17, 0x44	; 68
    1282:	d4 ce       	rjmp	.-600    	; 0x102c <main+0x1a6>
getKey():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:246




            }
            delay(20);
    1284:	64 e1       	ldi	r22, 0x14	; 20
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	46 d8       	rcall	.-3956   	; 0x31a <delay>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:247
            SetCols();
    128e:	07 da       	rcall	.-3058   	; 0x69e <SetCols()>
main():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:251
        
        }

        return 'Q';
    1290:	11 e5       	ldi	r17, 0x51	; 81
    1292:	cc ce       	rjmp	.-616    	; 0x102c <main+0x1a6>
compareTo():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:442
    return 0;
  }
  return strcmp(buffer, s.buffer);
    1294:	00 d3       	rcall	.+1536   	; 0x1896 <strcmp>
    1296:	1c c0       	rjmp	.+56     	; 0x12d0 <main+0x44a>
loop():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:74
      myservo.write(0);

    }
    else{
      
      Serial.println("Access Denied");
    1298:	86 ea       	ldi	r24, 0xA6	; 166
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	18 da       	rcall	.-3024   	; 0x6ce <Print::println(char const*) [clone .constprop.29]>
    129e:	28 c0       	rjmp	.+80     	; 0x12f0 <main+0x46a>
copy():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    12a0:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <In_Pass+0x5>
    12a4:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <In_Pass+0x4>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    12a8:	62 e8       	ldi	r22, 0x82	; 130
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	c9 01       	movw	r24, r18
    12ae:	fc d2       	rcall	.+1528   	; 0x18a8 <strcpy>
    12b0:	3d c0       	rjmp	.+122    	; 0x132c <main+0x4a6>
loop():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:89
    Serial.println("EMSK 7RAMY");

  }
  else{

    digitalWrite(buzzerPin,LOW);
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	8f e0       	ldi	r24, 0x0F	; 15
    12b6:	ad d7       	rcall	.+3930   	; 0x2212 <__TEXT_REGION_LENGTH__+0x212>
    12b8:	41 c0       	rjmp	.+130    	; 0x133c <main+0x4b6>
compareTo():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:438
/*********************************************/

int String::compareTo(const String &s) const
{
  if (!buffer || !s.buffer) {
    if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    12ba:	61 15       	cp	r22, r1
    12bc:	71 05       	cpc	r23, r1
    12be:	51 f0       	breq	.+20     	; 0x12d4 <main+0x44e>
    12c0:	23 2b       	or	r18, r19
    12c2:	41 f0       	breq	.+16     	; 0x12d4 <main+0x44e>
    12c4:	fb 01       	movw	r30, r22
    12c6:	80 81       	ld	r24, Z
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	91 95       	neg	r25
    12cc:	81 95       	neg	r24
    12ce:	91 09       	sbc	r25, r1
equals():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:447
  return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
{
  return (len == s2.len && compareTo(s2) == 0);
    12d0:	89 2b       	or	r24, r25
    12d2:	11 f7       	brne	.-60     	; 0x1298 <main+0x412>
loop():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:66

  if(i==4){
    Serial.println(In_Pass);
    if(In_Pass==Saved_Pass){

      Serial.println("Access Granted");
    12d4:	87 e9       	ldi	r24, 0x97	; 151
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	fa d9       	rcall	.-3084   	; 0x6ce <Print::println(char const*) [clone .constprop.29]>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:67
      myservo.write(90);
    12da:	8a e5       	ldi	r24, 0x5A	; 90
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	fd d6       	rcall	.+3578   	; 0x20da <__TEXT_REGION_LENGTH__+0xda>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:68
      delay(3000);
    12e0:	68 eb       	ldi	r22, 0xB8	; 184
    12e2:	7b e0       	ldi	r23, 0x0B	; 11
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	18 d8       	rcall	.-4048   	; 0x31a <delay>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:69
      myservo.write(0);
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	f5 d6       	rcall	.+3562   	; 0x20da <__TEXT_REGION_LENGTH__+0xda>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:77
    else{
      
      Serial.println("Access Denied");

    }
    i=0;
    12f0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <i>
copy():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:173
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
  if (!reserve(length)) {
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	8c e0       	ldi	r24, 0x0C	; 12
    12fa:	92 e0       	ldi	r25, 0x02	; 2
    12fc:	f4 d9       	rcall	.-3096   	; 0x6e6 <String::reserve(unsigned int)>
    12fe:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <In_Pass>
    1302:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <In_Pass+0x1>
    1306:	81 11       	cpse	r24, r1
    1308:	cb cf       	rjmp	.-106    	; 0x12a0 <main+0x41a>
invalidate():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    130a:	21 15       	cp	r18, r1
    130c:	31 05       	cpc	r19, r1
    130e:	11 f0       	breq	.+4      	; 0x1314 <main+0x48e>
    1310:	c9 01       	movw	r24, r18
    1312:	79 d1       	rcall	.+754    	; 0x1606 <free>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    1314:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <In_Pass+0x1>
    1318:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <In_Pass>
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    131c:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <In_Pass+0x5>
    1320:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <In_Pass+0x4>
    1324:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <In_Pass+0x3>
    1328:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <In_Pass+0x2>
loop():
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:81
    In_Pass="";
  }

  if(MotionDetected){
    132c:	00 23       	and	r16, r16
    132e:	09 f2       	breq	.-126    	; 0x12b2 <main+0x42c>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:83

    digitalWrite(buzzerPin,HIGH);
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	8f e0       	ldi	r24, 0x0F	; 15
    1334:	6e d7       	rcall	.+3804   	; 0x2212 <__TEXT_REGION_LENGTH__+0x212>
/Users/yousefmahmoud/Desktop/Studying/Mind_Cloud/Training/FINAL/Keypad/Keypad.ino:84
    Serial.println("EMSK 7RAMY");
    1336:	84 eb       	ldi	r24, 0xB4	; 180
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	c9 d9       	rcall	.-3182   	; 0x6ce <Print::println(char const*) [clone .constprop.29]>
serialEventRun():
/Users/yousefmahmoud/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    133c:	e1 14       	cp	r14, r1
    133e:	f1 04       	cpc	r15, r1
    1340:	09 f4       	brne	.+2      	; 0x1344 <main+0x4be>
    1342:	56 ce       	rjmp	.-852    	; 0xff0 <main+0x16a>
    1344:	84 d8       	rcall	.-3832   	; 0x44e <Serial0_available()>
    1346:	88 23       	and	r24, r24
    1348:	09 f4       	brne	.+2      	; 0x134c <main+0x4c6>
    134a:	52 ce       	rjmp	.-860    	; 0xff0 <main+0x16a>
    134c:	59 d6       	rcall	.+3250   	; 0x2000 <__TEXT_REGION_LENGTH__>
    134e:	50 ce       	rjmp	.-864    	; 0xff0 <main+0x16a>

00001350 <global destructors keyed to 65535_1_Keypad.ino.cpp.o.2625>:
_GLOBAL__D_65535_1_Keypad.ino.cpp.o.2625():
    1350:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <In_Pass>
    1354:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <In_Pass+0x1>
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	09 f0       	breq	.+2      	; 0x135e <global destructors keyed to 65535_1_Keypad.ino.cpp.o.2625+0xe>
    135c:	54 d1       	rcall	.+680    	; 0x1606 <free>
    135e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Saved_Pass>
    1362:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Saved_Pass+0x1>
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	09 f0       	breq	.+2      	; 0x136c <global destructors keyed to 65535_1_Keypad.ino.cpp.o.2625+0x1c>
    136a:	4d d1       	rcall	.+666    	; 0x1606 <free>
    136c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <pixels+0x9>
    1370:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <pixels+0xa>
    1374:	48 d1       	rcall	.+656    	; 0x1606 <free>
    1376:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <pixels+0x6>
    137a:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <pixels+0x7>
    137e:	97 fd       	sbrc	r25, 7
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <global destructors keyed to 65535_1_Keypad.ino.cpp.o.2625+0x36>
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	73 c7       	rjmp	.+3814   	; 0x226c <__TEXT_REGION_LENGTH__+0x26c>
    1386:	08 95       	ret

00001388 <__divmodsi4>:
__divmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    1388:	05 2e       	mov	r0, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    138a:	97 fb       	bst	r25, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    138c:	16 f4       	brtc	.+4      	; 0x1392 <__divmodsi4+0xa>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    138e:	00 94       	com	r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    1390:	0f d0       	rcall	.+30     	; 0x13b0 <__negsi2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    1392:	57 fd       	sbrc	r21, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    1394:	05 d0       	rcall	.+10     	; 0x13a0 <__divmodsi4_neg2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    1396:	5b d0       	rcall	.+182    	; 0x144e <__udivmodsi4>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    1398:	07 fc       	sbrc	r0, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    139a:	02 d0       	rcall	.+4      	; 0x13a0 <__divmodsi4_neg2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    139c:	46 f4       	brtc	.+16     	; 0x13ae <__divmodsi4_exit>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    139e:	08 c0       	rjmp	.+16     	; 0x13b0 <__negsi2>

000013a0 <__divmodsi4_neg2>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    13a0:	50 95       	com	r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    13a2:	40 95       	com	r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    13a4:	30 95       	com	r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    13a6:	21 95       	neg	r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    13aa:	4f 4f       	sbci	r20, 0xFF	; 255
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255

000013ae <__divmodsi4_exit>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    13ae:	08 95       	ret

000013b0 <__negsi2>:
__negsi2():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    13b0:	90 95       	com	r25
    13b2:	80 95       	com	r24
    13b4:	70 95       	com	r23
    13b6:	61 95       	neg	r22
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	8f 4f       	sbci	r24, 0xFF	; 255
    13bc:	9f 4f       	sbci	r25, 0xFF	; 255
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    13be:	08 95       	ret

000013c0 <__muluhisi3>:
__muluhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    13c0:	68 d0       	rcall	.+208    	; 0x1492 <__umulhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    13c2:	a5 9f       	mul	r26, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    13c4:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    13c6:	b4 9f       	mul	r27, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    13c8:	90 0d       	add	r25, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    13ca:	a4 9f       	mul	r26, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    13cc:	80 0d       	add	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    13ce:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    13d0:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    13d2:	08 95       	ret

000013d4 <__mulshisi3>:
__mulshisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    13d4:	b7 ff       	sbrs	r27, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    13d6:	f4 cf       	rjmp	.-24     	; 0x13c0 <__muluhisi3>

000013d8 <__mulohisi3>:
__mulohisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    13d8:	f3 df       	rcall	.-26     	; 0x13c0 <__muluhisi3>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    13da:	82 1b       	sub	r24, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    13dc:	93 0b       	sbc	r25, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    13de:	08 95       	ret

000013e0 <__prologue_saves__>:
__prologue_saves__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    13e0:	2f 92       	push	r2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    13e2:	3f 92       	push	r3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    13e4:	4f 92       	push	r4
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    13e6:	5f 92       	push	r5
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    13e8:	6f 92       	push	r6
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    13ea:	7f 92       	push	r7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    13ec:	8f 92       	push	r8
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    13ee:	9f 92       	push	r9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    13f0:	af 92       	push	r10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    13f2:	bf 92       	push	r11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    13f4:	cf 92       	push	r12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    13f6:	df 92       	push	r13
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    13f8:	ef 92       	push	r14
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    13fa:	ff 92       	push	r15
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    13fc:	0f 93       	push	r16
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    13fe:	1f 93       	push	r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1400:	cf 93       	push	r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1402:	df 93       	push	r29
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    1404:	cd b7       	in	r28, 0x3d	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    1406:	de b7       	in	r29, 0x3e	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    1408:	ca 1b       	sub	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    140a:	db 0b       	sbc	r29, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    140c:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    140e:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    1410:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    1412:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    1414:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    1416:	09 94       	ijmp

00001418 <__epilogue_restores__>:
__epilogue_restores__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1418:	2a 88       	ldd	r2, Y+18	; 0x12
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    141a:	39 88       	ldd	r3, Y+17	; 0x11
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    141c:	48 88       	ldd	r4, Y+16	; 0x10
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    141e:	5f 84       	ldd	r5, Y+15	; 0x0f
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1420:	6e 84       	ldd	r6, Y+14	; 0x0e
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1422:	7d 84       	ldd	r7, Y+13	; 0x0d
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    1424:	8c 84       	ldd	r8, Y+12	; 0x0c
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    1426:	9b 84       	ldd	r9, Y+11	; 0x0b
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    1428:	aa 84       	ldd	r10, Y+10	; 0x0a
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    142a:	b9 84       	ldd	r11, Y+9	; 0x09
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    142c:	c8 84       	ldd	r12, Y+8	; 0x08
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    142e:	df 80       	ldd	r13, Y+7	; 0x07
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1430:	ee 80       	ldd	r14, Y+6	; 0x06
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1432:	fd 80       	ldd	r15, Y+5	; 0x05
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    1434:	0c 81       	ldd	r16, Y+4	; 0x04
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    1436:	1b 81       	ldd	r17, Y+3	; 0x03
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    1438:	aa 81       	ldd	r26, Y+2	; 0x02
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    143a:	b9 81       	ldd	r27, Y+1	; 0x01
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    143c:	ce 0f       	add	r28, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    143e:	d1 1d       	adc	r29, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    1440:	0f b6       	in	r0, 0x3f	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    1442:	f8 94       	cli
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    1444:	de bf       	out	0x3e, r29	; 62
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    1446:	0f be       	out	0x3f, r0	; 63
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    1448:	cd bf       	out	0x3d, r28	; 61
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    144a:	ed 01       	movw	r28, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    144c:	08 95       	ret

0000144e <__udivmodsi4>:
__udivmodsi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    144e:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1450:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1452:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1454:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1456:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1458:	0d c0       	rjmp	.+26     	; 0x1474 <__udivmodsi4_ep>

0000145a <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    145a:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    145c:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    145e:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1460:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1462:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1464:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1466:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1468:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    146a:	20 f0       	brcs	.+8      	; 0x1474 <__udivmodsi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    146c:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    146e:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1470:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1472:	f5 0b       	sbc	r31, r21

00001474 <__udivmodsi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1474:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1476:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1478:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    147a:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    147c:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    147e:	69 f7       	brne	.-38     	; 0x145a <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1480:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1482:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1484:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1486:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1488:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    148a:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    148c:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    148e:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1490:	08 95       	ret

00001492 <__umulhisi3>:
__umulhisi3():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1492:	a2 9f       	mul	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1494:	b0 01       	movw	r22, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1496:	b3 9f       	mul	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1498:	c0 01       	movw	r24, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    149a:	a3 9f       	mul	r26, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:578
    149c:	01 d0       	rcall	.+2      	; 0x14a0 <__umulhisi3+0xe>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    149e:	b2 9f       	mul	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    14a0:	70 0d       	add	r23, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    14a2:	81 1d       	adc	r24, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    14a4:	11 24       	eor	r1, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    14a6:	91 1d       	adc	r25, r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    14a8:	08 95       	ret

000014aa <__udivmodqi4>:
__udivmodqi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    14aa:	99 1b       	sub	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    14ac:	79 e0       	ldi	r23, 0x09	; 9
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <__udivmodqi4_ep>

000014b0 <__udivmodqi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    14b0:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    14b2:	96 17       	cp	r25, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    14b4:	08 f0       	brcs	.+2      	; 0x14b8 <__udivmodqi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    14b6:	96 1b       	sub	r25, r22

000014b8 <__udivmodqi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    14b8:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    14ba:	7a 95       	dec	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    14bc:	c9 f7       	brne	.-14     	; 0x14b0 <__udivmodqi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    14be:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    14c0:	08 95       	ret

000014c2 <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    14c2:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    14c4:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    14c6:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    14c8:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    14ca:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    14cc:	09 94       	ijmp

000014ce <malloc>:
malloc():
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	82 30       	cpi	r24, 0x02	; 2
    14d8:	91 05       	cpc	r25, r1
    14da:	10 f4       	brcc	.+4      	; 0x14e0 <malloc+0x12>
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <__flp>
    14e4:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <__flp+0x1>
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	a0 e0       	ldi	r26, 0x00	; 0
    14f0:	30 97       	sbiw	r30, 0x00	; 0
    14f2:	99 f4       	brne	.+38     	; 0x151a <malloc+0x4c>
    14f4:	21 15       	cp	r18, r1
    14f6:	31 05       	cpc	r19, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <malloc+0x2e>
    14fa:	4a c0       	rjmp	.+148    	; 0x1590 <malloc+0xc2>
    14fc:	28 1b       	sub	r18, r24
    14fe:	39 0b       	sbc	r19, r25
    1500:	24 30       	cpi	r18, 0x04	; 4
    1502:	31 05       	cpc	r19, r1
    1504:	d8 f5       	brcc	.+118    	; 0x157c <malloc+0xae>
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	9b 81       	ldd	r25, Y+3	; 0x03
    150a:	61 15       	cp	r22, r1
    150c:	71 05       	cpc	r23, r1
    150e:	89 f1       	breq	.+98     	; 0x1572 <malloc+0xa4>
    1510:	fb 01       	movw	r30, r22
    1512:	93 83       	std	Z+3, r25	; 0x03
    1514:	82 83       	std	Z+2, r24	; 0x02
    1516:	fe 01       	movw	r30, r28
    1518:	11 c0       	rjmp	.+34     	; 0x153c <malloc+0x6e>
    151a:	40 81       	ld	r20, Z
    151c:	51 81       	ldd	r21, Z+1	; 0x01
    151e:	02 81       	ldd	r16, Z+2	; 0x02
    1520:	13 81       	ldd	r17, Z+3	; 0x03
    1522:	48 17       	cp	r20, r24
    1524:	59 07       	cpc	r21, r25
    1526:	e0 f0       	brcs	.+56     	; 0x1560 <malloc+0x92>
    1528:	48 17       	cp	r20, r24
    152a:	59 07       	cpc	r21, r25
    152c:	99 f4       	brne	.+38     	; 0x1554 <malloc+0x86>
    152e:	10 97       	sbiw	r26, 0x00	; 0
    1530:	61 f0       	breq	.+24     	; 0x154a <malloc+0x7c>
    1532:	12 96       	adiw	r26, 0x02	; 2
    1534:	0c 93       	st	X, r16
    1536:	12 97       	sbiw	r26, 0x02	; 2
    1538:	13 96       	adiw	r26, 0x03	; 3
    153a:	1c 93       	st	X, r17
    153c:	32 96       	adiw	r30, 0x02	; 2
    153e:	cf 01       	movw	r24, r30
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	08 95       	ret
    154a:	00 93 2a 02 	sts	0x022A, r16	; 0x80022a <__flp>
    154e:	10 93 2b 02 	sts	0x022B, r17	; 0x80022b <__flp+0x1>
    1552:	f4 cf       	rjmp	.-24     	; 0x153c <malloc+0x6e>
    1554:	21 15       	cp	r18, r1
    1556:	31 05       	cpc	r19, r1
    1558:	51 f0       	breq	.+20     	; 0x156e <malloc+0xa0>
    155a:	42 17       	cp	r20, r18
    155c:	53 07       	cpc	r21, r19
    155e:	38 f0       	brcs	.+14     	; 0x156e <malloc+0xa0>
    1560:	a9 01       	movw	r20, r18
    1562:	db 01       	movw	r26, r22
    1564:	9a 01       	movw	r18, r20
    1566:	bd 01       	movw	r22, r26
    1568:	df 01       	movw	r26, r30
    156a:	f8 01       	movw	r30, r16
    156c:	c1 cf       	rjmp	.-126    	; 0x14f0 <malloc+0x22>
    156e:	ef 01       	movw	r28, r30
    1570:	f9 cf       	rjmp	.-14     	; 0x1564 <malloc+0x96>
    1572:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <__flp+0x1>
    1576:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <__flp>
    157a:	cd cf       	rjmp	.-102    	; 0x1516 <malloc+0x48>
    157c:	fe 01       	movw	r30, r28
    157e:	e2 0f       	add	r30, r18
    1580:	f3 1f       	adc	r31, r19
    1582:	81 93       	st	Z+, r24
    1584:	91 93       	st	Z+, r25
    1586:	22 50       	subi	r18, 0x02	; 2
    1588:	31 09       	sbc	r19, r1
    158a:	39 83       	std	Y+1, r19	; 0x01
    158c:	28 83       	st	Y, r18
    158e:	d7 cf       	rjmp	.-82     	; 0x153e <malloc+0x70>
    1590:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <__brkval>
    1594:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <__brkval+0x1>
    1598:	23 2b       	or	r18, r19
    159a:	41 f4       	brne	.+16     	; 0x15ac <malloc+0xde>
    159c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    15a0:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    15a4:	30 93 29 02 	sts	0x0229, r19	; 0x800229 <__brkval+0x1>
    15a8:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <__brkval>
    15ac:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    15b0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    15b4:	21 15       	cp	r18, r1
    15b6:	31 05       	cpc	r19, r1
    15b8:	41 f4       	brne	.+16     	; 0x15ca <malloc+0xfc>
    15ba:	2d b7       	in	r18, 0x3d	; 61
    15bc:	3e b7       	in	r19, 0x3e	; 62
    15be:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    15c2:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    15c6:	24 1b       	sub	r18, r20
    15c8:	35 0b       	sbc	r19, r21
    15ca:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <__brkval>
    15ce:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <__brkval+0x1>
    15d2:	e2 17       	cp	r30, r18
    15d4:	f3 07       	cpc	r31, r19
    15d6:	a0 f4       	brcc	.+40     	; 0x1600 <malloc+0x132>
    15d8:	2e 1b       	sub	r18, r30
    15da:	3f 0b       	sbc	r19, r31
    15dc:	28 17       	cp	r18, r24
    15de:	39 07       	cpc	r19, r25
    15e0:	78 f0       	brcs	.+30     	; 0x1600 <malloc+0x132>
    15e2:	ac 01       	movw	r20, r24
    15e4:	4e 5f       	subi	r20, 0xFE	; 254
    15e6:	5f 4f       	sbci	r21, 0xFF	; 255
    15e8:	24 17       	cp	r18, r20
    15ea:	35 07       	cpc	r19, r21
    15ec:	48 f0       	brcs	.+18     	; 0x1600 <malloc+0x132>
    15ee:	4e 0f       	add	r20, r30
    15f0:	5f 1f       	adc	r21, r31
    15f2:	50 93 29 02 	sts	0x0229, r21	; 0x800229 <__brkval+0x1>
    15f6:	40 93 28 02 	sts	0x0228, r20	; 0x800228 <__brkval>
    15fa:	81 93       	st	Z+, r24
    15fc:	91 93       	st	Z+, r25
    15fe:	9f cf       	rjmp	.-194    	; 0x153e <malloc+0x70>
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	e0 e0       	ldi	r30, 0x00	; 0
    1604:	9c cf       	rjmp	.-200    	; 0x153e <malloc+0x70>

00001606 <free>:
free():
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	e9 f0       	breq	.+58     	; 0x1648 <free+0x42>
    160e:	fc 01       	movw	r30, r24
    1610:	32 97       	sbiw	r30, 0x02	; 2
    1612:	13 82       	std	Z+3, r1	; 0x03
    1614:	12 82       	std	Z+2, r1	; 0x02
    1616:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <__flp>
    161a:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <__flp+0x1>
    161e:	ed 01       	movw	r28, r26
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	10 97       	sbiw	r26, 0x00	; 0
    1626:	a1 f4       	brne	.+40     	; 0x1650 <free+0x4a>
    1628:	20 81       	ld	r18, Z
    162a:	31 81       	ldd	r19, Z+1	; 0x01
    162c:	82 0f       	add	r24, r18
    162e:	93 1f       	adc	r25, r19
    1630:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <__brkval>
    1634:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <__brkval+0x1>
    1638:	28 17       	cp	r18, r24
    163a:	39 07       	cpc	r19, r25
    163c:	09 f0       	breq	.+2      	; 0x1640 <free+0x3a>
    163e:	61 c0       	rjmp	.+194    	; 0x1702 <free+0xfc>
    1640:	f0 93 29 02 	sts	0x0229, r31	; 0x800229 <__brkval+0x1>
    1644:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <__brkval>
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	08 95       	ret
    164e:	ea 01       	movw	r28, r20
    1650:	ce 17       	cp	r28, r30
    1652:	df 07       	cpc	r29, r31
    1654:	e8 f5       	brcc	.+122    	; 0x16d0 <free+0xca>
    1656:	4a 81       	ldd	r20, Y+2	; 0x02
    1658:	5b 81       	ldd	r21, Y+3	; 0x03
    165a:	9e 01       	movw	r18, r28
    165c:	41 15       	cp	r20, r1
    165e:	51 05       	cpc	r21, r1
    1660:	b1 f7       	brne	.-20     	; 0x164e <free+0x48>
    1662:	e9 01       	movw	r28, r18
    1664:	fb 83       	std	Y+3, r31	; 0x03
    1666:	ea 83       	std	Y+2, r30	; 0x02
    1668:	49 91       	ld	r20, Y+
    166a:	59 91       	ld	r21, Y+
    166c:	c4 0f       	add	r28, r20
    166e:	d5 1f       	adc	r29, r21
    1670:	ec 17       	cp	r30, r28
    1672:	fd 07       	cpc	r31, r29
    1674:	61 f4       	brne	.+24     	; 0x168e <free+0x88>
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	02 96       	adiw	r24, 0x02	; 2
    167c:	84 0f       	add	r24, r20
    167e:	95 1f       	adc	r25, r21
    1680:	e9 01       	movw	r28, r18
    1682:	99 83       	std	Y+1, r25	; 0x01
    1684:	88 83       	st	Y, r24
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	9b 83       	std	Y+3, r25	; 0x03
    168c:	8a 83       	std	Y+2, r24	; 0x02
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	e0 e0       	ldi	r30, 0x00	; 0
    1692:	12 96       	adiw	r26, 0x02	; 2
    1694:	8d 91       	ld	r24, X+
    1696:	9c 91       	ld	r25, X
    1698:	13 97       	sbiw	r26, 0x03	; 3
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	b9 f5       	brne	.+110    	; 0x170c <free+0x106>
    169e:	2d 91       	ld	r18, X+
    16a0:	3c 91       	ld	r19, X
    16a2:	11 97       	sbiw	r26, 0x01	; 1
    16a4:	cd 01       	movw	r24, r26
    16a6:	02 96       	adiw	r24, 0x02	; 2
    16a8:	82 0f       	add	r24, r18
    16aa:	93 1f       	adc	r25, r19
    16ac:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <__brkval>
    16b0:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <__brkval+0x1>
    16b4:	28 17       	cp	r18, r24
    16b6:	39 07       	cpc	r19, r25
    16b8:	39 f6       	brne	.-114    	; 0x1648 <free+0x42>
    16ba:	30 97       	sbiw	r30, 0x00	; 0
    16bc:	51 f5       	brne	.+84     	; 0x1712 <free+0x10c>
    16be:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <__flp+0x1>
    16c2:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__flp>
    16c6:	b0 93 29 02 	sts	0x0229, r27	; 0x800229 <__brkval+0x1>
    16ca:	a0 93 28 02 	sts	0x0228, r26	; 0x800228 <__brkval>
    16ce:	bc cf       	rjmp	.-136    	; 0x1648 <free+0x42>
    16d0:	d3 83       	std	Z+3, r29	; 0x03
    16d2:	c2 83       	std	Z+2, r28	; 0x02
    16d4:	40 81       	ld	r20, Z
    16d6:	51 81       	ldd	r21, Z+1	; 0x01
    16d8:	84 0f       	add	r24, r20
    16da:	95 1f       	adc	r25, r21
    16dc:	c8 17       	cp	r28, r24
    16de:	d9 07       	cpc	r29, r25
    16e0:	61 f4       	brne	.+24     	; 0x16fa <free+0xf4>
    16e2:	4e 5f       	subi	r20, 0xFE	; 254
    16e4:	5f 4f       	sbci	r21, 0xFF	; 255
    16e6:	88 81       	ld	r24, Y
    16e8:	99 81       	ldd	r25, Y+1	; 0x01
    16ea:	48 0f       	add	r20, r24
    16ec:	59 1f       	adc	r21, r25
    16ee:	51 83       	std	Z+1, r21	; 0x01
    16f0:	40 83       	st	Z, r20
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	9b 81       	ldd	r25, Y+3	; 0x03
    16f6:	93 83       	std	Z+3, r25	; 0x03
    16f8:	82 83       	std	Z+2, r24	; 0x02
    16fa:	21 15       	cp	r18, r1
    16fc:	31 05       	cpc	r19, r1
    16fe:	09 f0       	breq	.+2      	; 0x1702 <free+0xfc>
    1700:	b0 cf       	rjmp	.-160    	; 0x1662 <free+0x5c>
    1702:	f0 93 2b 02 	sts	0x022B, r31	; 0x80022b <__flp+0x1>
    1706:	e0 93 2a 02 	sts	0x022A, r30	; 0x80022a <__flp>
    170a:	9e cf       	rjmp	.-196    	; 0x1648 <free+0x42>
    170c:	fd 01       	movw	r30, r26
    170e:	dc 01       	movw	r26, r24
    1710:	c0 cf       	rjmp	.-128    	; 0x1692 <free+0x8c>
    1712:	13 82       	std	Z+3, r1	; 0x03
    1714:	12 82       	std	Z+2, r1	; 0x02
    1716:	d7 cf       	rjmp	.-82     	; 0x16c6 <free+0xc0>

00001718 <realloc>:
realloc():
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	a0 e0       	ldi	r26, 0x00	; 0
    171c:	e1 e9       	ldi	r30, 0x91	; 145
    171e:	fb e0       	ldi	r31, 0x0B	; 11
    1720:	61 ce       	rjmp	.-830    	; 0x13e4 <__prologue_saves__+0x4>
    1722:	8c 01       	movw	r16, r24
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	41 f4       	brne	.+16     	; 0x1738 <realloc+0x20>
    1728:	cb 01       	movw	r24, r22
    172a:	d1 de       	rcall	.-606    	; 0x14ce <malloc>
    172c:	8c 01       	movw	r16, r24
    172e:	c8 01       	movw	r24, r16
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	e0 e1       	ldi	r30, 0x10	; 16
    1736:	72 ce       	rjmp	.-796    	; 0x141c <__epilogue_restores__+0x4>
    1738:	fc 01       	movw	r30, r24
    173a:	e6 0f       	add	r30, r22
    173c:	f7 1f       	adc	r31, r23
    173e:	9c 01       	movw	r18, r24
    1740:	22 50       	subi	r18, 0x02	; 2
    1742:	31 09       	sbc	r19, r1
    1744:	e2 17       	cp	r30, r18
    1746:	f3 07       	cpc	r31, r19
    1748:	08 f4       	brcc	.+2      	; 0x174c <realloc+0x34>
    174a:	99 c0       	rjmp	.+306    	; 0x187e <realloc+0x166>
    174c:	d9 01       	movw	r26, r18
    174e:	cd 91       	ld	r28, X+
    1750:	dc 91       	ld	r29, X
    1752:	11 97       	sbiw	r26, 0x01	; 1
    1754:	c6 17       	cp	r28, r22
    1756:	d7 07       	cpc	r29, r23
    1758:	90 f0       	brcs	.+36     	; 0x177e <realloc+0x66>
    175a:	c5 30       	cpi	r28, 0x05	; 5
    175c:	d1 05       	cpc	r29, r1
    175e:	38 f3       	brcs	.-50     	; 0x172e <realloc+0x16>
    1760:	ce 01       	movw	r24, r28
    1762:	04 97       	sbiw	r24, 0x04	; 4
    1764:	86 17       	cp	r24, r22
    1766:	97 07       	cpc	r25, r23
    1768:	10 f3       	brcs	.-60     	; 0x172e <realloc+0x16>
    176a:	c6 1b       	sub	r28, r22
    176c:	d7 0b       	sbc	r29, r23
    176e:	22 97       	sbiw	r28, 0x02	; 2
    1770:	c1 93       	st	Z+, r28
    1772:	d1 93       	st	Z+, r29
    1774:	6d 93       	st	X+, r22
    1776:	7c 93       	st	X, r23
    1778:	cf 01       	movw	r24, r30
    177a:	45 df       	rcall	.-374    	; 0x1606 <free>
    177c:	d8 cf       	rjmp	.-80     	; 0x172e <realloc+0x16>
    177e:	5b 01       	movw	r10, r22
    1780:	ac 1a       	sub	r10, r28
    1782:	bd 0a       	sbc	r11, r29
    1784:	4c 01       	movw	r8, r24
    1786:	8c 0e       	add	r8, r28
    1788:	9d 1e       	adc	r9, r29
    178a:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <__flp>
    178e:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <__flp+0x1>
    1792:	51 2c       	mov	r5, r1
    1794:	41 2c       	mov	r4, r1
    1796:	f1 2c       	mov	r15, r1
    1798:	e1 2c       	mov	r14, r1
    179a:	10 97       	sbiw	r26, 0x00	; 0
    179c:	31 f5       	brne	.+76     	; 0x17ea <realloc+0xd2>
    179e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__brkval>
    17a2:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <__brkval+0x1>
    17a6:	88 15       	cp	r24, r8
    17a8:	99 05       	cpc	r25, r9
    17aa:	09 f0       	breq	.+2      	; 0x17ae <realloc+0x96>
    17ac:	5c c0       	rjmp	.+184    	; 0x1866 <realloc+0x14e>
    17ae:	46 16       	cp	r4, r22
    17b0:	57 06       	cpc	r5, r23
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <realloc+0x9e>
    17b4:	58 c0       	rjmp	.+176    	; 0x1866 <realloc+0x14e>
    17b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    17ba:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	41 f4       	brne	.+16     	; 0x17d2 <realloc+0xba>
    17c2:	8d b7       	in	r24, 0x3d	; 61
    17c4:	9e b7       	in	r25, 0x3e	; 62
    17c6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    17ca:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    17ce:	84 1b       	sub	r24, r20
    17d0:	95 0b       	sbc	r25, r21
    17d2:	e8 17       	cp	r30, r24
    17d4:	f9 07       	cpc	r31, r25
    17d6:	08 f0       	brcs	.+2      	; 0x17da <realloc+0xc2>
    17d8:	52 c0       	rjmp	.+164    	; 0x187e <realloc+0x166>
    17da:	f0 93 29 02 	sts	0x0229, r31	; 0x800229 <__brkval+0x1>
    17de:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <__brkval>
    17e2:	f9 01       	movw	r30, r18
    17e4:	71 83       	std	Z+1, r23	; 0x01
    17e6:	60 83       	st	Z, r22
    17e8:	a2 cf       	rjmp	.-188    	; 0x172e <realloc+0x16>
    17ea:	8d 91       	ld	r24, X+
    17ec:	9c 91       	ld	r25, X
    17ee:	11 97       	sbiw	r26, 0x01	; 1
    17f0:	12 96       	adiw	r26, 0x02	; 2
    17f2:	6c 90       	ld	r6, X
    17f4:	12 97       	sbiw	r26, 0x02	; 2
    17f6:	13 96       	adiw	r26, 0x03	; 3
    17f8:	7c 90       	ld	r7, X
    17fa:	13 97       	sbiw	r26, 0x03	; 3
    17fc:	a8 15       	cp	r26, r8
    17fe:	b9 05       	cpc	r27, r9
    1800:	59 f5       	brne	.+86     	; 0x1858 <realloc+0x140>
    1802:	6c 01       	movw	r12, r24
    1804:	42 e0       	ldi	r20, 0x02	; 2
    1806:	c4 0e       	add	r12, r20
    1808:	d1 1c       	adc	r13, r1
    180a:	ca 14       	cp	r12, r10
    180c:	db 04       	cpc	r13, r11
    180e:	20 f1       	brcs	.+72     	; 0x1858 <realloc+0x140>
    1810:	ac 01       	movw	r20, r24
    1812:	4a 19       	sub	r20, r10
    1814:	5b 09       	sbc	r21, r11
    1816:	da 01       	movw	r26, r20
    1818:	12 96       	adiw	r26, 0x02	; 2
    181a:	15 97       	sbiw	r26, 0x05	; 5
    181c:	80 f0       	brcs	.+32     	; 0x183e <realloc+0x126>
    181e:	62 82       	std	Z+2, r6	; 0x02
    1820:	73 82       	std	Z+3, r7	; 0x03
    1822:	51 83       	std	Z+1, r21	; 0x01
    1824:	40 83       	st	Z, r20
    1826:	d9 01       	movw	r26, r18
    1828:	6d 93       	st	X+, r22
    182a:	7c 93       	st	X, r23
    182c:	e1 14       	cp	r14, r1
    182e:	f1 04       	cpc	r15, r1
    1830:	71 f0       	breq	.+28     	; 0x184e <realloc+0x136>
    1832:	d7 01       	movw	r26, r14
    1834:	13 96       	adiw	r26, 0x03	; 3
    1836:	fc 93       	st	X, r31
    1838:	ee 93       	st	-X, r30
    183a:	12 97       	sbiw	r26, 0x02	; 2
    183c:	78 cf       	rjmp	.-272    	; 0x172e <realloc+0x16>
    183e:	22 96       	adiw	r28, 0x02	; 2
    1840:	8c 0f       	add	r24, r28
    1842:	9d 1f       	adc	r25, r29
    1844:	f9 01       	movw	r30, r18
    1846:	91 83       	std	Z+1, r25	; 0x01
    1848:	80 83       	st	Z, r24
    184a:	f3 01       	movw	r30, r6
    184c:	ef cf       	rjmp	.-34     	; 0x182c <realloc+0x114>
    184e:	f0 93 2b 02 	sts	0x022B, r31	; 0x80022b <__flp+0x1>
    1852:	e0 93 2a 02 	sts	0x022A, r30	; 0x80022a <__flp>
    1856:	6b cf       	rjmp	.-298    	; 0x172e <realloc+0x16>
    1858:	48 16       	cp	r4, r24
    185a:	59 06       	cpc	r5, r25
    185c:	08 f4       	brcc	.+2      	; 0x1860 <realloc+0x148>
    185e:	2c 01       	movw	r4, r24
    1860:	7d 01       	movw	r14, r26
    1862:	d3 01       	movw	r26, r6
    1864:	9a cf       	rjmp	.-204    	; 0x179a <realloc+0x82>
    1866:	cb 01       	movw	r24, r22
    1868:	32 de       	rcall	.-924    	; 0x14ce <malloc>
    186a:	7c 01       	movw	r14, r24
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	39 f0       	breq	.+14     	; 0x187e <realloc+0x166>
    1870:	ae 01       	movw	r20, r28
    1872:	b8 01       	movw	r22, r16
    1874:	07 d0       	rcall	.+14     	; 0x1884 <memcpy>
    1876:	c8 01       	movw	r24, r16
    1878:	c6 de       	rcall	.-628    	; 0x1606 <free>
    187a:	87 01       	movw	r16, r14
    187c:	58 cf       	rjmp	.-336    	; 0x172e <realloc+0x16>
    187e:	10 e0       	ldi	r17, 0x00	; 0
    1880:	00 e0       	ldi	r16, 0x00	; 0
    1882:	55 cf       	rjmp	.-342    	; 0x172e <realloc+0x16>

00001884 <memcpy>:
memcpy():
    1884:	fb 01       	movw	r30, r22
    1886:	dc 01       	movw	r26, r24
    1888:	02 c0       	rjmp	.+4      	; 0x188e <memcpy+0xa>
    188a:	01 90       	ld	r0, Z+
    188c:	0d 92       	st	X+, r0
    188e:	41 50       	subi	r20, 0x01	; 1
    1890:	50 40       	sbci	r21, 0x00	; 0
    1892:	d8 f7       	brcc	.-10     	; 0x188a <memcpy+0x6>
    1894:	08 95       	ret

00001896 <strcmp>:
strcmp():
    1896:	fb 01       	movw	r30, r22
    1898:	dc 01       	movw	r26, r24
    189a:	8d 91       	ld	r24, X+
    189c:	01 90       	ld	r0, Z+
    189e:	80 19       	sub	r24, r0
    18a0:	01 10       	cpse	r0, r1
    18a2:	d9 f3       	breq	.-10     	; 0x189a <strcmp+0x4>
    18a4:	99 0b       	sbc	r25, r25
    18a6:	08 95       	ret

000018a8 <strcpy>:
strcpy():
    18a8:	fb 01       	movw	r30, r22
    18aa:	dc 01       	movw	r26, r24
    18ac:	01 90       	ld	r0, Z+
    18ae:	0d 92       	st	X+, r0
    18b0:	00 20       	and	r0, r0
    18b2:	e1 f7       	brne	.-8      	; 0x18ac <strcpy+0x4>
    18b4:	08 95       	ret

000018b6 <__do_global_dtors>:
__do_global_dtors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    18b6:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    18b8:	c6 e4       	ldi	r28, 0x46	; 70
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    18ba:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    18bc:	03 c0       	rjmp	.+6      	; 0x18c4 <__do_global_dtors+0xe>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    18be:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    18c0:	00 de       	rcall	.-1024   	; 0x14c2 <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    18c2:	21 96       	adiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    18c4:	c7 34       	cpi	r28, 0x47	; 71
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    18c6:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    18c8:	d1 f7       	brne	.-12     	; 0x18be <__do_global_dtors+0x8>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    18ca:	f8 94       	cli

000018cc <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    18cc:	ff cf       	rjmp	.-2      	; 0x18cc <__stop_program>
