
C:\Users\Lenovo\AppData\Local\Temp\arduino\sketches\4D3E4274E03FBF7B5CD045AEE4EDBFE7/sketch_sep8a.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	73 c0       	rjmp	.+230    	; 0xe8 <__dtors_end>
       2:	97 c0       	rjmp	.+302    	; 0x132 <__bad_interrupt>
       4:	96 c0       	rjmp	.+300    	; 0x132 <__bad_interrupt>
       6:	95 c0       	rjmp	.+298    	; 0x132 <__bad_interrupt>
       8:	94 c0       	rjmp	.+296    	; 0x132 <__bad_interrupt>
       a:	93 c0       	rjmp	.+294    	; 0x132 <__bad_interrupt>
       c:	92 c0       	rjmp	.+292    	; 0x132 <__bad_interrupt>
       e:	91 c0       	rjmp	.+290    	; 0x132 <__bad_interrupt>
      10:	90 c0       	rjmp	.+288    	; 0x132 <__bad_interrupt>
      12:	cb c2       	rjmp	.+1430   	; 0x5aa <__vector_9>
      14:	8e c0       	rjmp	.+284    	; 0x132 <__bad_interrupt>
      16:	38 c3       	rjmp	.+1648   	; 0x688 <__vector_11>
      18:	12 c3       	rjmp	.+1572   	; 0x63e <__vector_12>
      1a:	8b c0       	rjmp	.+278    	; 0x132 <__bad_interrupt>
      1c:	8a c0       	rjmp	.+276    	; 0x132 <__bad_interrupt>
      1e:	89 c0       	rjmp	.+274    	; 0x132 <__bad_interrupt>
      20:	88 c0       	rjmp	.+272    	; 0x132 <__bad_interrupt>
      22:	64 c3       	rjmp	.+1736   	; 0x6ec <__vector_17>
      24:	86 c0       	rjmp	.+268    	; 0x132 <__bad_interrupt>
      26:	08 00       	.word	0x0008	; ????
      28:	00 00       	nop
      2a:	be 92       	st	-X, r11
      2c:	24 49       	sbci	r18, 0x94	; 148
      2e:	12 3e       	cpi	r17, 0xE2	; 226
      30:	ab aa       	std	Y+51, r10	; 0x33
      32:	aa 2a       	or	r10, r26
      34:	be cd       	rjmp	.-1156   	; 0xfffffbb2 <__eeprom_end+0xff7efbb2>
      36:	cc cc       	rjmp	.-1640   	; 0xfffff9d0 <__eeprom_end+0xff7ef9d0>
      38:	4c 3e       	cpi	r20, 0xEC	; 236
      3a:	00 00       	nop
      3c:	00 80       	ld	r0, Z
      3e:	be ab       	std	Y+54, r27	; 0x36
      40:	aa aa       	std	Y+50, r10	; 0x32
      42:	aa 3e       	cpi	r26, 0xEA	; 234
      44:	00 00       	nop
      46:	00 00       	nop
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	00 00       	nop
      50:	00 00       	nop
      52:	00 08       	sbc	r0, r0
      54:	41 78       	andi	r20, 0x81	; 129
      56:	d3 bb       	out	0x13, r29	; 19
      58:	43 87       	std	Z+11, r20	; 0x0b
      5a:	d1 13       	cpse	r29, r17
      5c:	3d 19       	sub	r19, r13
      5e:	0e 3c       	cpi	r16, 0xCE	; 206
      60:	c3 bd       	out	0x23, r28	; 35
      62:	42 82       	std	Z+2, r4	; 0x02
      64:	ad 2b       	or	r26, r29
      66:	3e 68       	ori	r19, 0x8E	; 142
      68:	ec 82       	std	Y+4, r14	; 0x04
      6a:	76 be       	out	0x36, r7	; 54
      6c:	d9 8f       	std	Y+25, r29	; 0x19
      6e:	e1 a9       	ldd	r30, Z+49	; 0x31
      70:	3e 4c       	sbci	r19, 0xCE	; 206
      72:	80 ef       	ldi	r24, 0xF0	; 240
      74:	ff be       	out	0x3f, r15	; 63
      76:	01 c4       	rjmp	.+2050   	; 0x87a <__vector_17+0x18e>
      78:	ff 7f       	andi	r31, 0xFF	; 255
      7a:	3f 00       	.word	0x003f	; ????
      7c:	00 00       	nop
	...

00000080 <__trampolines_end>:
__trampolines_start():
      80:	00 00       	nop
      82:	00 00       	nop
      84:	37 00       	.word	0x0037	; ????
      86:	34 00       	.word	0x0034	; ????
      88:	31 00       	.word	0x0031	; ????

0000008a <digital_pin_to_timer_PGM>:
	...
      92:	00 04 05 07 00 00 00 00 00 00 00 00 00 00 00        ...............

000000a1 <port_to_input_PGM>:
      a1:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

000000ab <digital_pin_to_bit_mask_PGM>:
      ab:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      bb:	04 08 10 20 40 80 40                                ... @.@

000000c2 <port_to_output_PGM>:
      c2:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

000000cc <digital_pin_to_port_PGM>:
      cc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      dc:	03 03 03 03 02 02 03 00                             ........

000000e4 <__ctors_start>:
__ctors_start():
      e4:	81 04       	cpc	r8, r1

000000e6 <__ctors_end>:
__dtors_start():
      e6:	64 07       	cpc	r22, r20

000000e8 <__dtors_end>:
__dtors_end():
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf e5       	ldi	r28, 0x5F	; 95
      ee:	d4 e0       	ldi	r29, 0x04	; 4
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      f4:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      f6:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      f8:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      fa:	e8 e2       	ldi	r30, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      fc:	f7 e1       	ldi	r31, 0x17	; 23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     100:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     102:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     104:	a8 38       	cpi	r26, 0x88	; 136
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     106:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>

0000010a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     10a:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     10c:	a8 e8       	ldi	r26, 0x88	; 136
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     10e:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     114:	ae 3b       	cpi	r26, 0xBE	; 190
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     116:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>

0000011a <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     11a:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     11c:	c3 e7       	ldi	r28, 0x73	; 115
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     11e:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     120:	03 c0       	rjmp	.+6      	; 0x128 <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     122:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     124:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     126:	c9 d9       	rcall	.-3182   	; 0xfffff4ba <__eeprom_end+0xff7ef4ba>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     128:	c2 37       	cpi	r28, 0x72	; 114
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     12a:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     12c:	d1 f7       	brne	.-12     	; 0x122 <__do_global_ctors+0x8>
     12e:	dc d4       	rcall	.+2488   	; 0xae8 <main>
     130:	ef ca       	rjmp	.-2594   	; 0xfffff710 <__eeprom_end+0xff7ef710>

00000132 <__bad_interrupt>:
__vector_1():
     132:	66 cf       	rjmp	.-308    	; 0x0 <__vectors>

00000134 <digitalWrite>:
digitalWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	e6 57       	subi	r30, 0x76	; 118
     13a:	ff 4f       	sbci	r31, 0xFF	; 255
     13c:	34 91       	lpm	r19, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     13e:	fc 01       	movw	r30, r24
     140:	e5 55       	subi	r30, 0x55	; 85
     142:	ff 4f       	sbci	r31, 0xFF	; 255
     144:	24 91       	lpm	r18, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     146:	fc 01       	movw	r30, r24
     148:	e4 53       	subi	r30, 0x34	; 52
     14a:	ff 4f       	sbci	r31, 0xFF	; 255
     14c:	e4 91       	lpm	r30, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     14e:	ee 23       	and	r30, r30
     150:	e1 f0       	breq	.+56     	; 0x18a <digitalWrite+0x56>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     152:	33 23       	and	r19, r19
     154:	49 f0       	breq	.+18     	; 0x168 <digitalWrite+0x34>
turnOffPWM():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     156:	35 30       	cpi	r19, 0x05	; 5
     158:	c9 f0       	breq	.+50     	; 0x18c <digitalWrite+0x58>
     15a:	37 30       	cpi	r19, 0x07	; 7
     15c:	d1 f0       	breq	.+52     	; 0x192 <digitalWrite+0x5e>
     15e:	34 30       	cpi	r19, 0x04	; 4
     160:	19 f4       	brne	.+6      	; 0x168 <digitalWrite+0x34>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     162:	8f b5       	in	r24, 0x2f	; 47
     164:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     166:	8f bd       	out	0x2f, r24	; 47
digitalWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	ee 0f       	add	r30, r30
     16c:	ff 1f       	adc	r31, r31
     16e:	ee 53       	subi	r30, 0x3E	; 62
     170:	ff 4f       	sbci	r31, 0xFF	; 255
     172:	a5 91       	lpm	r26, Z+
     174:	b4 91       	lpm	r27, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     176:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     178:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:205

  if (val == LOW) {
     17a:	61 11       	cpse	r22, r1
     17c:	0e c0       	rjmp	.+28     	; 0x19a <digitalWrite+0x66>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     17e:	9c 91       	ld	r25, X
     180:	e2 2f       	mov	r30, r18
     182:	e0 95       	com	r30
     184:	e9 23       	and	r30, r25
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     186:	ec 93       	st	X, r30
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     188:	8f bf       	out	0x3f, r24	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:212
}
     18a:	08 95       	ret
turnOffPWM():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     18c:	8f b5       	in	r24, 0x2f	; 47
     18e:	8f 7d       	andi	r24, 0xDF	; 223
     190:	ea cf       	rjmp	.-44     	; 0x166 <digitalWrite+0x32>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     192:	85 b5       	in	r24, 0x25	; 37
     194:	8f 7d       	andi	r24, 0xDF	; 223
     196:	85 bd       	out	0x25, r24	; 37
     198:	e7 cf       	rjmp	.-50     	; 0x168 <digitalWrite+0x34>
digitalWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     19a:	ec 91       	ld	r30, X
     19c:	e2 2b       	or	r30, r18
     19e:	f3 cf       	rjmp	.-26     	; 0x186 <digitalWrite+0x52>

000001a0 <pinMode>:
pinMode():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	fc 01       	movw	r30, r24
     1a8:	e5 55       	subi	r30, 0x55	; 85
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	24 91       	lpm	r18, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     1ae:	84 53       	subi	r24, 0x34	; 52
     1b0:	9f 4f       	sbci	r25, 0xFF	; 255
     1b2:	fc 01       	movw	r30, r24
     1b4:	84 91       	lpm	r24, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     1b6:	88 23       	and	r24, r24
     1b8:	d1 f0       	breq	.+52     	; 0x1ee <pinMode+0x4e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	fc 01       	movw	r30, r24
     1c2:	e0 58       	subi	r30, 0x80	; 128
     1c4:	ff 4f       	sbci	r31, 0xFF	; 255
     1c6:	a5 91       	lpm	r26, Z+
     1c8:	b4 91       	lpm	r27, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     1ca:	fc 01       	movw	r30, r24
     1cc:	ee 53       	subi	r30, 0x3E	; 62
     1ce:	ff 4f       	sbci	r31, 0xFF	; 255
     1d0:	c5 91       	lpm	r28, Z+
     1d2:	d4 91       	lpm	r29, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     1d4:	61 11       	cpse	r22, r1
     1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <pinMode+0x54>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     1d8:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     1da:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     1dc:	8c 91       	ld	r24, X
     1de:	e2 2f       	mov	r30, r18
     1e0:	e0 95       	com	r30
     1e2:	8e 23       	and	r24, r30
     1e4:	8c 93       	st	X, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     1e6:	28 81       	ld	r18, Y
     1e8:	e2 23       	and	r30, r18
     1ea:	e8 83       	st	Y, r30
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     1ec:	9f bf       	out	0x3f, r25	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     1f4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     1f6:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     1f8:	ec 91       	ld	r30, X
     1fa:	e2 2b       	or	r30, r18
     1fc:	ec 93       	st	X, r30
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     1fe:	8f bf       	out	0x3f, r24	; 63
     200:	f6 cf       	rjmp	.-20     	; 0x1ee <pinMode+0x4e>

00000202 <micros>:
micros():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     202:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     204:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     206:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <timer0_overflow_count>
     20a:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <timer0_overflow_count+0x1>
     20e:	a0 91 e0 00 	lds	r26, 0x00E0	; 0x8000e0 <timer0_overflow_count+0x2>
     212:	b0 91 e1 00 	lds	r27, 0x00E1	; 0x8000e1 <timer0_overflow_count+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     216:	22 b7       	in	r18, 0x32	; 50
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     218:	08 b6       	in	r0, 0x38	; 56
     21a:	00 fe       	sbrs	r0, 0
     21c:	05 c0       	rjmp	.+10     	; 0x228 <micros+0x26>
     21e:	2f 3f       	cpi	r18, 0xFF	; 255
     220:	19 f0       	breq	.+6      	; 0x228 <micros+0x26>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	a1 1d       	adc	r26, r1
     226:	b1 1d       	adc	r27, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     228:	3f bf       	out	0x3f, r19	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     22a:	ba 2f       	mov	r27, r26
     22c:	a9 2f       	mov	r26, r25
     22e:	98 2f       	mov	r25, r24
     230:	88 27       	eor	r24, r24
     232:	bc 01       	movw	r22, r24
     234:	cd 01       	movw	r24, r26
     236:	62 0f       	add	r22, r18
     238:	71 1d       	adc	r23, r1
     23a:	81 1d       	adc	r24, r1
     23c:	91 1d       	adc	r25, r1
     23e:	42 e0       	ldi	r20, 0x02	; 2
     240:	66 0f       	add	r22, r22
     242:	77 1f       	adc	r23, r23
     244:	88 1f       	adc	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	4a 95       	dec	r20
     24a:	d1 f7       	brne	.-12     	; 0x240 <micros+0x3e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     24c:	08 95       	ret

0000024e <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     24e:	af 92       	push	r10
     250:	bf 92       	push	r11
     252:	cf 92       	push	r12
     254:	df 92       	push	r13
     256:	ef 92       	push	r14
     258:	ff 92       	push	r15
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	6c 01       	movw	r12, r24
     264:	7b 01       	movw	r14, r22
     266:	8b 01       	movw	r16, r22
     268:	04 0f       	add	r16, r20
     26a:	15 1f       	adc	r17, r21
     26c:	eb 01       	movw	r28, r22
     26e:	5e 01       	movw	r10, r28
     270:	ae 18       	sub	r10, r14
     272:	bf 08       	sbc	r11, r15
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     274:	c0 17       	cp	r28, r16
     276:	d1 07       	cpc	r29, r17
     278:	59 f0       	breq	.+22     	; 0x290 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     27a:	69 91       	ld	r22, Y+
     27c:	d6 01       	movw	r26, r12
     27e:	ed 91       	ld	r30, X+
     280:	fc 91       	ld	r31, X
     282:	01 90       	ld	r0, Z+
     284:	f0 81       	ld	r31, Z
     286:	e0 2d       	mov	r30, r0
     288:	c6 01       	movw	r24, r12
     28a:	09 95       	icall
     28c:	89 2b       	or	r24, r25
     28e:	79 f7       	brne	.-34     	; 0x26e <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     290:	c5 01       	movw	r24, r10
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	ff 90       	pop	r15
     29c:	ef 90       	pop	r14
     29e:	df 90       	pop	r13
     2a0:	cf 90       	pop	r12
     2a2:	bf 90       	pop	r11
     2a4:	af 90       	pop	r10
     2a6:	08 95       	ret

000002a8 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     2a8:	fc 01       	movw	r30, r24
     2aa:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     2ac:	44 8d       	ldd	r20, Z+28	; 0x1c
     2ae:	25 2f       	mov	r18, r21
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	84 2f       	mov	r24, r20
     2b4:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     2b6:	82 1b       	sub	r24, r18
     2b8:	93 0b       	sbc	r25, r19
     2ba:	54 17       	cp	r21, r20
     2bc:	10 f0       	brcs	.+4      	; 0x2c2 <HardwareSerial::availableForWrite()+0x1a>
     2be:	cf 96       	adiw	r24, 0x3f	; 63
     2c0:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     2c2:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     2c4:	08 95       	ret

000002c6 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     2c6:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     2c8:	91 8d       	ldd	r25, Z+25	; 0x19
     2ca:	82 8d       	ldd	r24, Z+26	; 0x1a
     2cc:	98 17       	cp	r25, r24
     2ce:	61 f0       	breq	.+24     	; 0x2e8 <HardwareSerial::read()+0x22>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     2d0:	a2 8d       	ldd	r26, Z+26	; 0x1a
     2d2:	ae 0f       	add	r26, r30
     2d4:	bf 2f       	mov	r27, r31
     2d6:	b1 1d       	adc	r27, r1
     2d8:	5d 96       	adiw	r26, 0x1d	; 29
     2da:	8c 91       	ld	r24, X
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     2dc:	92 8d       	ldd	r25, Z+26	; 0x1a
     2de:	9f 5f       	subi	r25, 0xFF	; 255
     2e0:	9f 73       	andi	r25, 0x3F	; 63
     2e2:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     2e8:	8f ef       	ldi	r24, 0xFF	; 255
     2ea:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     2ec:	08 95       	ret

000002ee <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     2ee:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     2f0:	91 8d       	ldd	r25, Z+25	; 0x19
     2f2:	82 8d       	ldd	r24, Z+26	; 0x1a
     2f4:	98 17       	cp	r25, r24
     2f6:	31 f0       	breq	.+12     	; 0x304 <HardwareSerial::peek()+0x16>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     2f8:	82 8d       	ldd	r24, Z+26	; 0x1a
     2fa:	e8 0f       	add	r30, r24
     2fc:	f1 1d       	adc	r31, r1
     2fe:	85 8d       	ldd	r24, Z+29	; 0x1d
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     304:	8f ef       	ldi	r24, 0xFF	; 255
     306:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     308:	08 95       	ret

0000030a <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     30a:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     30c:	91 8d       	ldd	r25, Z+25	; 0x19
     30e:	22 8d       	ldd	r18, Z+26	; 0x1a
     310:	89 2f       	mov	r24, r25
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	80 5c       	subi	r24, 0xC0	; 192
     316:	9f 4f       	sbci	r25, 0xFF	; 255
     318:	82 1b       	sub	r24, r18
     31a:	91 09       	sbc	r25, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     31c:	8f 73       	andi	r24, 0x3F	; 63
     31e:	99 27       	eor	r25, r25
     320:	08 95       	ret

00000322 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     322:	82 ee       	ldi	r24, 0xE2	; 226
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	f1 df       	rcall	.-30     	; 0x30a <HardwareSerial::available()>
     328:	21 e0       	ldi	r18, 0x01	; 1
     32a:	89 2b       	or	r24, r25
     32c:	09 f4       	brne	.+2      	; 0x330 <Serial0_available()+0xe>
     32e:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     330:	82 2f       	mov	r24, r18
     332:	08 95       	ret

00000334 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	89 2b       	or	r24, r25
     33a:	19 f0       	breq	.+6      	; 0x342 <serialEventRun()+0xe>
     33c:	f2 df       	rcall	.-28     	; 0x322 <Serial0_available()>
     33e:	81 11       	cpse	r24, r1
     340:	5f ce       	rjmp	.-834    	; 0x0 <__vectors>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     342:	08 95       	ret

00000344 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     344:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     346:	a4 8d       	ldd	r26, Z+28	; 0x1c
     348:	a8 0f       	add	r26, r24
     34a:	b9 2f       	mov	r27, r25
     34c:	b1 1d       	adc	r27, r1
     34e:	a3 5a       	subi	r26, 0xA3	; 163
     350:	bf 4f       	sbci	r27, 0xFF	; 255
     352:	2c 91       	ld	r18, X
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     354:	84 8d       	ldd	r24, Z+28	; 0x1c
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	01 96       	adiw	r24, 0x01	; 1
     35a:	8f 73       	andi	r24, 0x3F	; 63
     35c:	99 27       	eor	r25, r25
     35e:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     360:	a6 89       	ldd	r26, Z+22	; 0x16
     362:	b7 89       	ldd	r27, Z+23	; 0x17
     364:	2c 93       	st	X, r18
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:106
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     366:	a0 89       	ldd	r26, Z+16	; 0x10
     368:	b1 89       	ldd	r27, Z+17	; 0x11
     36a:	8c 91       	ld	r24, X
     36c:	82 74       	andi	r24, 0x42	; 66
     36e:	8c 93       	st	X, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     370:	93 8d       	ldd	r25, Z+27	; 0x1b
     372:	84 8d       	ldd	r24, Z+28	; 0x1c
     374:	98 13       	cpse	r25, r24
     376:	06 c0       	rjmp	.+12     	; 0x384 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     378:	02 88       	ldd	r0, Z+18	; 0x12
     37a:	f3 89       	ldd	r31, Z+19	; 0x13
     37c:	e0 2d       	mov	r30, r0
     37e:	80 81       	ld	r24, Z
     380:	8f 7d       	andi	r24, 0xDF	; 223
     382:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     384:	08 95       	ret

00000386 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	ec 01       	movw	r28, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     398:	9b 8d       	ldd	r25, Y+27	; 0x1b
     39a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     39c:	98 13       	cpse	r25, r24
     39e:	19 c0       	rjmp	.+50     	; 0x3d2 <HardwareSerial::write(unsigned char)+0x4c>
     3a0:	e8 89       	ldd	r30, Y+16	; 0x10
     3a2:	f9 89       	ldd	r31, Y+17	; 0x11
     3a4:	80 81       	ld	r24, Z
     3a6:	85 ff       	sbrs	r24, 5
     3a8:	14 c0       	rjmp	.+40     	; 0x3d2 <HardwareSerial::write(unsigned char)+0x4c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     3aa:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\lenovo\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ac:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     3ae:	ee 89       	ldd	r30, Y+22	; 0x16
     3b0:	ff 89       	ldd	r31, Y+23	; 0x17
     3b2:	60 83       	st	Z, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:243
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
      #else
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     3b4:	e8 89       	ldd	r30, Y+16	; 0x10
     3b6:	f9 89       	ldd	r31, Y+17	; 0x11
     3b8:	80 81       	ld	r24, Z
     3ba:	82 74       	andi	r24, 0x42	; 66
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     3bc:	80 83       	st	Z, r24
__iRestore():
c:\users\lenovo\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3be:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	08 95       	ret
     3d2:	f6 2e       	mov	r15, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     3d4:	0b 8d       	ldd	r16, Y+27	; 0x1b
     3d6:	10 e0       	ldi	r17, 0x00	; 0
     3d8:	0f 5f       	subi	r16, 0xFF	; 255
     3da:	1f 4f       	sbci	r17, 0xFF	; 255
     3dc:	0f 73       	andi	r16, 0x3F	; 63
     3de:	11 27       	eor	r17, r17
     3e0:	e0 2e       	mov	r14, r16
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     3e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3e4:	8e 11       	cpse	r24, r14
     3e6:	0b c0       	rjmp	.+22     	; 0x3fe <HardwareSerial::write(unsigned char)+0x78>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	07 fc       	sbrc	r0, 7
     3ec:	fa cf       	rjmp	.-12     	; 0x3e2 <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     3ee:	e8 89       	ldd	r30, Y+16	; 0x10
     3f0:	f9 89       	ldd	r31, Y+17	; 0x11
     3f2:	80 81       	ld	r24, Z
     3f4:	85 ff       	sbrs	r24, 5
     3f6:	f5 cf       	rjmp	.-22     	; 0x3e2 <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     3f8:	ce 01       	movw	r24, r28
     3fa:	a4 df       	rcall	.-184    	; 0x344 <HardwareSerial::_tx_udr_empty_irq()>
     3fc:	f2 cf       	rjmp	.-28     	; 0x3e2 <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     3fe:	eb 8d       	ldd	r30, Y+27	; 0x1b
     400:	ec 0f       	add	r30, r28
     402:	fd 2f       	mov	r31, r29
     404:	f1 1d       	adc	r31, r1
     406:	e3 5a       	subi	r30, 0xA3	; 163
     408:	ff 4f       	sbci	r31, 0xFF	; 255
     40a:	f0 82       	st	Z, r15
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     40c:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\lenovo\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     40e:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     410:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     412:	ea 89       	ldd	r30, Y+18	; 0x12
     414:	fb 89       	ldd	r31, Y+19	; 0x13
     416:	80 81       	ld	r24, Z
     418:	80 62       	ori	r24, 0x20	; 32
     41a:	d0 cf       	rjmp	.-96     	; 0x3bc <HardwareSerial::write(unsigned char)+0x36>

0000041c <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	ec 01       	movw	r28, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     422:	88 8d       	ldd	r24, Y+24	; 0x18
     424:	88 23       	and	r24, r24
     426:	b1 f0       	breq	.+44     	; 0x454 <HardwareSerial::flush()+0x38>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     428:	aa 89       	ldd	r26, Y+18	; 0x12
     42a:	bb 89       	ldd	r27, Y+19	; 0x13
     42c:	e8 89       	ldd	r30, Y+16	; 0x10
     42e:	f9 89       	ldd	r31, Y+17	; 0x11
     430:	8c 91       	ld	r24, X
     432:	85 fd       	sbrc	r24, 5
     434:	03 c0       	rjmp	.+6      	; 0x43c <HardwareSerial::flush()+0x20>
     436:	80 81       	ld	r24, Z
     438:	86 fd       	sbrc	r24, 6
     43a:	0c c0       	rjmp	.+24     	; 0x454 <HardwareSerial::flush()+0x38>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	07 fc       	sbrc	r0, 7
     440:	f7 cf       	rjmp	.-18     	; 0x430 <HardwareSerial::flush()+0x14>
     442:	8c 91       	ld	r24, X
     444:	85 ff       	sbrs	r24, 5
     446:	f2 cf       	rjmp	.-28     	; 0x42c <HardwareSerial::flush()+0x10>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     448:	80 81       	ld	r24, Z
     44a:	85 ff       	sbrs	r24, 5
     44c:	ed cf       	rjmp	.-38     	; 0x428 <HardwareSerial::flush()+0xc>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     44e:	ce 01       	movw	r24, r28
     450:	79 df       	rcall	.-270    	; 0x344 <HardwareSerial::_tx_udr_empty_irq()>
     452:	ea cf       	rjmp	.-44     	; 0x428 <HardwareSerial::flush()+0xc>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <twi_stop>:
twi_stop():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     45a:	85 ed       	ldi	r24, 0xD5	; 213
     45c:	86 bf       	out	0x36, r24	; 54
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     45e:	06 b6       	in	r0, 0x36	; 54
     460:	04 fc       	sbrc	r0, 4
     462:	fd cf       	rjmp	.-6      	; 0x45e <twi_stop+0x4>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     464:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <twi_state>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:463
}
     468:	08 95       	ret

0000046a <twi_transmit>:
twi_transmit():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     46a:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <twi_txBufferLength>
     46e:	26 0f       	add	r18, r22
     470:	33 27       	eor	r19, r19
     472:	33 1f       	adc	r19, r19
     474:	21 32       	cpi	r18, 0x21	; 33
     476:	31 05       	cpc	r19, r1
     478:	ec f4       	brge	.+58     	; 0x4b4 <twi_transmit+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     47a:	20 91 d3 00 	lds	r18, 0x00D3	; 0x8000d3 <twi_state>
     47e:	fc 01       	movw	r30, r24
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	24 30       	cpi	r18, 0x04	; 4
     486:	69 f0       	breq	.+26     	; 0x4a2 <twi_transmit+0x38>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:377
    return 2;
     488:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     48a:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     48c:	a0 91 af 00 	lds	r26, 0x00AF	; 0x8000af <twi_txBufferLength>
     490:	21 91       	ld	r18, Z+
     492:	ac 01       	movw	r20, r24
     494:	41 57       	subi	r20, 0x71	; 113
     496:	5f 4f       	sbci	r21, 0xFF	; 255
     498:	a4 0f       	add	r26, r20
     49a:	b5 2f       	mov	r27, r21
     49c:	b1 1d       	adc	r27, r1
     49e:	2c 93       	st	X, r18
     4a0:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     4a2:	86 17       	cp	r24, r22
     4a4:	98 f3       	brcs	.-26     	; 0x48c <twi_transmit+0x22>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     4a6:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <twi_txBufferLength>
     4aa:	68 0f       	add	r22, r24
     4ac:	60 93 af 00 	sts	0x00AF, r22	; 0x8000af <twi_txBufferLength>
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	08 95       	ret

000004b8 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:326
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     4b8:	08 95       	ret

000004ba <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:321
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	9f ef       	ldi	r25, 0xFF	; 255
     4be:	08 95       	ret

000004c0 <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:307
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	9f ef       	ldi	r25, 0xFF	; 255
     4c4:	08 95       	ret

000004c6 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     4c6:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <TwoWire::rxBufferIndex>
     4ca:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:291
}
     4cc:	91 95       	neg	r25
     4ce:	81 95       	neg	r24
     4d0:	91 09       	sbc	r25, r1
     4d2:	08 95       	ret

000004d4 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:271

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	cb 01       	movw	r24, r22
     4da:	ea 01       	movw	r28, r20
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:280
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     4dc:	64 2f       	mov	r22, r20
     4de:	c5 df       	rcall	.-118    	; 0x46a <twi_transmit>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:283
  }
  return quantity;
}
     4e0:	ce 01       	movw	r24, r28
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:246

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	1f 92       	push	r1
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	69 83       	std	Y+1, r22	; 0x01
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:262
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	ce 01       	movw	r24, r28
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	b7 df       	rcall	.-146    	; 0x46a <twi_transmit>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:265
  }
  return 1;
}
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0f 90       	pop	r0
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	08 95       	ret

0000050e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>:
_ZN5Print5writeEPKc.part.2.constprop.28():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     50e:	fc 01       	movw	r30, r24
     510:	01 90       	ld	r0, Z+
     512:	00 20       	and	r0, r0
     514:	e9 f7       	brne	.-6      	; 0x510 <Print::write(char const*) [clone .part.2] [clone .constprop.28]+0x2>
     516:	31 97       	sbiw	r30, 0x01	; 1
     518:	af 01       	movw	r20, r30
     51a:	48 1b       	sub	r20, r24
     51c:	59 0b       	sbc	r21, r25
     51e:	bc 01       	movw	r22, r24
     520:	82 ee       	ldi	r24, 0xE2	; 226
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	94 ce       	rjmp	.-728    	; 0x24e <Print::write(unsigned char const*, unsigned int)>

00000526 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]>:
_ZN5Print11printNumberEmh.constprop.24():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     526:	8f 92       	push	r8
     528:	9f 92       	push	r9
     52a:	af 92       	push	r10
     52c:	bf 92       	push	r11
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	a1 97       	sbiw	r28, 0x21	; 33
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     546:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     548:	42 30       	cpi	r20, 0x02	; 2
     54a:	08 f4       	brcc	.+2      	; 0x54e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x28>
     54c:	4a e0       	ldi	r20, 0x0A	; 10
     54e:	8e 01       	movw	r16, r28
     550:	0f 5d       	subi	r16, 0xDF	; 223
     552:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
     554:	84 2e       	mov	r8, r20
     556:	91 2c       	mov	r9, r1
     558:	b1 2c       	mov	r11, r1
     55a:	a1 2c       	mov	r10, r1
     55c:	a5 01       	movw	r20, r10
     55e:	94 01       	movw	r18, r8
     560:	00 d6       	rcall	.+3072   	; 0x1162 <__udivmodsi4>
     562:	e6 2f       	mov	r30, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
     564:	b9 01       	movw	r22, r18
     566:	ca 01       	movw	r24, r20
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     568:	ea 30       	cpi	r30, 0x0A	; 10
     56a:	ec f4       	brge	.+58     	; 0x5a6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x80>
     56c:	e0 5d       	subi	r30, 0xD0	; 208
     56e:	d8 01       	movw	r26, r16
     570:	ee 93       	st	-X, r30
     572:	8d 01       	movw	r16, r26
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
     574:	23 2b       	or	r18, r19
     576:	24 2b       	or	r18, r20
     578:	25 2b       	or	r18, r21
     57a:	81 f7       	brne	.-32     	; 0x55c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x36>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	80 e0       	ldi	r24, 0x00	; 0
write():
     580:	10 97       	sbiw	r26, 0x00	; 0
     582:	11 f0       	breq	.+4      	; 0x588 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x62>
     584:	cd 01       	movw	r24, r26
     586:	c3 df       	rcall	.-122    	; 0x50e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
_ZN5Print11printNumberEmh.constprop.24():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
     588:	a1 96       	adiw	r28, 0x21	; 33
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	de bf       	out	0x3e, r29	; 62
     590:	0f be       	out	0x3f, r0	; 63
     592:	cd bf       	out	0x3d, r28	; 61
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	bf 90       	pop	r11
     59e:	af 90       	pop	r10
     5a0:	9f 90       	pop	r9
     5a2:	8f 90       	pop	r8
     5a4:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     5a6:	e9 5c       	subi	r30, 0xC9	; 201
     5a8:	e2 cf       	rjmp	.-60     	; 0x56e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x48>

000005aa <__vector_9>:
__vector_9():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     5aa:	1f 92       	push	r1
     5ac:	0f 92       	push	r0
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	0f 92       	push	r0
     5b2:	11 24       	eor	r1, r1
     5b4:	2f 93       	push	r18
     5b6:	3f 93       	push	r19
     5b8:	8f 93       	push	r24
     5ba:	9f 93       	push	r25
     5bc:	af 93       	push	r26
     5be:	bf 93       	push	r27
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     5c0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <timer0_millis>
     5c4:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <timer0_millis+0x1>
     5c8:	a0 91 dc 00 	lds	r26, 0x00DC	; 0x8000dc <timer0_millis+0x2>
     5cc:	b0 91 dd 00 	lds	r27, 0x00DD	; 0x8000dd <timer0_millis+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     5d0:	30 91 d9 00 	lds	r19, 0x00D9	; 0x8000d9 <timer0_fract>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     5d4:	23 e0       	ldi	r18, 0x03	; 3
     5d6:	23 0f       	add	r18, r19
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     5d8:	2d 37       	cpi	r18, 0x7D	; 125
     5da:	68 f1       	brcs	.+90     	; 0x636 <__vector_9+0x8c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     5dc:	26 e8       	ldi	r18, 0x86	; 134
     5de:	23 0f       	add	r18, r19
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     5e0:	02 96       	adiw	r24, 0x02	; 2
     5e2:	a1 1d       	adc	r26, r1
     5e4:	b1 1d       	adc	r27, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     5e6:	20 93 d9 00 	sts	0x00D9, r18	; 0x8000d9 <timer0_fract>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     5ea:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <timer0_millis>
     5ee:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <timer0_millis+0x1>
     5f2:	a0 93 dc 00 	sts	0x00DC, r26	; 0x8000dc <timer0_millis+0x2>
     5f6:	b0 93 dd 00 	sts	0x00DD, r27	; 0x8000dd <timer0_millis+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     5fa:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <timer0_overflow_count>
     5fe:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <timer0_overflow_count+0x1>
     602:	a0 91 e0 00 	lds	r26, 0x00E0	; 0x8000e0 <timer0_overflow_count+0x2>
     606:	b0 91 e1 00 	lds	r27, 0x00E1	; 0x8000e1 <timer0_overflow_count+0x3>
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	a1 1d       	adc	r26, r1
     60e:	b1 1d       	adc	r27, r1
     610:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <timer0_overflow_count>
     614:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <timer0_overflow_count+0x1>
     618:	a0 93 e0 00 	sts	0x00E0, r26	; 0x8000e0 <timer0_overflow_count+0x2>
     61c:	b0 93 e1 00 	sts	0x00E1, r27	; 0x8000e1 <timer0_overflow_count+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     620:	bf 91       	pop	r27
     622:	af 91       	pop	r26
     624:	9f 91       	pop	r25
     626:	8f 91       	pop	r24
     628:	3f 91       	pop	r19
     62a:	2f 91       	pop	r18
     62c:	0f 90       	pop	r0
     62e:	0f be       	out	0x3f, r0	; 63
     630:	0f 90       	pop	r0
     632:	1f 90       	pop	r1
     634:	18 95       	reti
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	a1 1d       	adc	r26, r1
     63a:	b1 1d       	adc	r27, r1
     63c:	d4 cf       	rjmp	.-88     	; 0x5e6 <__vector_9+0x3c>

0000063e <__vector_12>:
__vector_12():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     63e:	1f 92       	push	r1
     640:	0f 92       	push	r0
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	0f 92       	push	r0
     646:	11 24       	eor	r1, r1
     648:	2f 93       	push	r18
     64a:	3f 93       	push	r19
     64c:	4f 93       	push	r20
     64e:	5f 93       	push	r21
     650:	6f 93       	push	r22
     652:	7f 93       	push	r23
     654:	8f 93       	push	r24
     656:	9f 93       	push	r25
     658:	af 93       	push	r26
     65a:	bf 93       	push	r27
     65c:	ef 93       	push	r30
     65e:	ff 93       	push	r31
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     660:	82 ee       	ldi	r24, 0xE2	; 226
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	6f de       	rcall	.-802    	; 0x344 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     666:	ff 91       	pop	r31
     668:	ef 91       	pop	r30
     66a:	bf 91       	pop	r27
     66c:	af 91       	pop	r26
     66e:	9f 91       	pop	r25
     670:	8f 91       	pop	r24
     672:	7f 91       	pop	r23
     674:	6f 91       	pop	r22
     676:	5f 91       	pop	r21
     678:	4f 91       	pop	r20
     67a:	3f 91       	pop	r19
     67c:	2f 91       	pop	r18
     67e:	0f 90       	pop	r0
     680:	0f be       	out	0x3f, r0	; 63
     682:	0f 90       	pop	r0
     684:	1f 90       	pop	r1
     686:	18 95       	reti

00000688 <__vector_11>:
__vector_11():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     688:	1f 92       	push	r1
     68a:	0f 92       	push	r0
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	0f 92       	push	r0
     690:	11 24       	eor	r1, r1
     692:	2f 93       	push	r18
     694:	8f 93       	push	r24
     696:	9f 93       	push	r25
     698:	ef 93       	push	r30
     69a:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     69c:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <Serial+0x10>
     6a0:	f0 91 f3 00 	lds	r31, 0x00F3	; 0x8000f3 <Serial+0x11>
     6a4:	80 81       	ld	r24, Z
     6a6:	e0 91 f8 00 	lds	r30, 0x00F8	; 0x8000f8 <Serial+0x16>
     6aa:	f0 91 f9 00 	lds	r31, 0x00F9	; 0x8000f9 <Serial+0x17>
     6ae:	82 fd       	sbrc	r24, 2
     6b0:	1b c0       	rjmp	.+54     	; 0x6e8 <__vector_11+0x60>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     6b2:	90 81       	ld	r25, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     6b4:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <Serial+0x19>
     6b8:	8f 5f       	subi	r24, 0xFF	; 255
     6ba:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     6bc:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <Serial+0x1a>
     6c0:	82 17       	cp	r24, r18
     6c2:	41 f0       	breq	.+16     	; 0x6d4 <__vector_11+0x4c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     6c4:	e0 91 fb 00 	lds	r30, 0x00FB	; 0x8000fb <Serial+0x19>
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	ee 51       	subi	r30, 0x1E	; 30
     6cc:	ff 4f       	sbci	r31, 0xFF	; 255
     6ce:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     6d0:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <Serial+0x19>
__vector_11():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	2f 91       	pop	r18
     6de:	0f 90       	pop	r0
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	0f 90       	pop	r0
     6e4:	1f 90       	pop	r1
     6e6:	18 95       	reti
_rx_complete_irq():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     6e8:	80 81       	ld	r24, Z
     6ea:	f4 cf       	rjmp	.-24     	; 0x6d4 <__vector_11+0x4c>

000006ec <__vector_17>:
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	2f 93       	push	r18
     6f8:	3f 93       	push	r19
     6fa:	4f 93       	push	r20
     6fc:	5f 93       	push	r21
     6fe:	6f 93       	push	r22
     700:	7f 93       	push	r23
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
     70a:	ef 93       	push	r30
     70c:	ff 93       	push	r31
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  switch(TW_STATUS){
     70e:	81 b1       	in	r24, 0x01	; 1
     710:	88 7f       	andi	r24, 0xF8	; 248
     712:	80 36       	cpi	r24, 0x60	; 96
     714:	09 f4       	brne	.+2      	; 0x718 <__vector_17+0x2c>
     716:	49 c0       	rjmp	.+146    	; 0x7aa <__vector_17+0xbe>
     718:	e8 f5       	brcc	.+122    	; 0x794 <__vector_17+0xa8>
     71a:	88 32       	cpi	r24, 0x28	; 40
     71c:	09 f4       	brne	.+2      	; 0x720 <__vector_17+0x34>
     71e:	a0 c0       	rjmp	.+320    	; 0x860 <__vector_17+0x174>
     720:	18 f5       	brcc	.+70     	; 0x768 <__vector_17+0x7c>
     722:	80 31       	cpi	r24, 0x10	; 16
     724:	09 f4       	brne	.+2      	; 0x728 <__vector_17+0x3c>
     726:	96 c0       	rjmp	.+300    	; 0x854 <__vector_17+0x168>
     728:	b8 f4       	brcc	.+46     	; 0x758 <__vector_17+0x6c>
     72a:	88 23       	and	r24, r24
     72c:	09 f4       	brne	.+2      	; 0x730 <__vector_17+0x44>
     72e:	e6 c0       	rjmp	.+460    	; 0x8fc <__vector_17+0x210>
     730:	88 30       	cpi	r24, 0x08	; 8
     732:	09 f4       	brne	.+2      	; 0x736 <__vector_17+0x4a>
     734:	8f c0       	rjmp	.+286    	; 0x854 <__vector_17+0x168>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     736:	ff 91       	pop	r31
     738:	ef 91       	pop	r30
     73a:	bf 91       	pop	r27
     73c:	af 91       	pop	r26
     73e:	9f 91       	pop	r25
     740:	8f 91       	pop	r24
     742:	7f 91       	pop	r23
     744:	6f 91       	pop	r22
     746:	5f 91       	pop	r21
     748:	4f 91       	pop	r20
     74a:	3f 91       	pop	r19
     74c:	2f 91       	pop	r18
     74e:	0f 90       	pop	r0
     750:	0f be       	out	0x3f, r0	; 63
     752:	0f 90       	pop	r0
     754:	1f 90       	pop	r1
     756:	18 95       	reti
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     758:	88 31       	cpi	r24, 0x18	; 24
     75a:	09 f4       	brne	.+2      	; 0x75e <__vector_17+0x72>
     75c:	81 c0       	rjmp	.+258    	; 0x860 <__vector_17+0x174>
     75e:	80 32       	cpi	r24, 0x20	; 32
     760:	51 f7       	brne	.-44     	; 0x736 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     762:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <twi_error>
     766:	14 c0       	rjmp	.+40     	; 0x790 <__vector_17+0xa4>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     768:	80 34       	cpi	r24, 0x40	; 64
     76a:	09 f4       	brne	.+2      	; 0x76e <__vector_17+0x82>
     76c:	91 c0       	rjmp	.+290    	; 0x890 <__vector_17+0x1a4>
     76e:	40 f4       	brcc	.+16     	; 0x780 <__vector_17+0x94>
     770:	80 33       	cpi	r24, 0x30	; 48
     772:	b9 f3       	breq	.-18     	; 0x762 <__vector_17+0x76>
     774:	88 33       	cpi	r24, 0x38	; 56
     776:	f9 f6       	brne	.-66     	; 0x736 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     778:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <twi_error>
twi_reply():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     77c:	85 ec       	ldi	r24, 0xC5	; 197
     77e:	a1 c0       	rjmp	.+322    	; 0x8c2 <__vector_17+0x1d6>
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     780:	80 35       	cpi	r24, 0x50	; 80
     782:	09 f4       	brne	.+2      	; 0x786 <__vector_17+0x9a>
     784:	7c c0       	rjmp	.+248    	; 0x87e <__vector_17+0x192>
     786:	88 35       	cpi	r24, 0x58	; 88
     788:	09 f4       	brne	.+2      	; 0x78c <__vector_17+0xa0>
     78a:	8a c0       	rjmp	.+276    	; 0x8a0 <__vector_17+0x1b4>
     78c:	88 34       	cpi	r24, 0x48	; 72
     78e:	99 f6       	brne	.-90     	; 0x736 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
     790:	64 de       	rcall	.-824    	; 0x45a <twi_stop>
     792:	d1 cf       	rjmp	.-94     	; 0x736 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     794:	88 39       	cpi	r24, 0x98	; 152
     796:	09 f4       	brne	.+2      	; 0x79a <__vector_17+0xae>
     798:	81 c0       	rjmp	.+258    	; 0x89c <__vector_17+0x1b0>
     79a:	30 f5       	brcc	.+76     	; 0x7e8 <__vector_17+0xfc>
     79c:	88 37       	cpi	r24, 0x78	; 120
     79e:	29 f0       	breq	.+10     	; 0x7aa <__vector_17+0xbe>
     7a0:	50 f4       	brcc	.+20     	; 0x7b6 <__vector_17+0xca>
     7a2:	88 36       	cpi	r24, 0x68	; 104
     7a4:	11 f0       	breq	.+4      	; 0x7aa <__vector_17+0xbe>
     7a6:	80 37       	cpi	r24, 0x70	; 112
     7a8:	31 f6       	brne	.-116    	; 0x736 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <twi_state>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     7b0:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <twi_rxBufferIndex>
     7b4:	52 c0       	rjmp	.+164    	; 0x85a <__vector_17+0x16e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     7b6:	88 38       	cpi	r24, 0x88	; 136
     7b8:	09 f4       	brne	.+2      	; 0x7bc <__vector_17+0xd0>
     7ba:	70 c0       	rjmp	.+224    	; 0x89c <__vector_17+0x1b0>
     7bc:	80 39       	cpi	r24, 0x90	; 144
     7be:	19 f0       	breq	.+6      	; 0x7c6 <__vector_17+0xda>
     7c0:	80 38       	cpi	r24, 0x80	; 128
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <__vector_17+0xda>
     7c4:	b8 cf       	rjmp	.-144    	; 0x736 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
     7c6:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <twi_rxBufferIndex>
     7ca:	80 32       	cpi	r24, 0x20	; 32
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <__vector_17+0xe4>
     7ce:	66 c0       	rjmp	.+204    	; 0x89c <__vector_17+0x1b0>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     7d0:	e0 91 d1 00 	lds	r30, 0x00D1	; 0x8000d1 <twi_rxBufferIndex>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	8e 0f       	add	r24, r30
     7d8:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <twi_rxBufferIndex>
     7dc:	83 b1       	in	r24, 0x03	; 3
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	ef 54       	subi	r30, 0x4F	; 79
     7e2:	ff 4f       	sbci	r31, 0xFF	; 255
     7e4:	80 83       	st	Z, r24
     7e6:	39 c0       	rjmp	.+114    	; 0x85a <__vector_17+0x16e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     7e8:	80 3b       	cpi	r24, 0xB0	; 176
     7ea:	39 f0       	breq	.+14     	; 0x7fa <__vector_17+0x10e>
     7ec:	d0 f4       	brcc	.+52     	; 0x822 <__vector_17+0x136>
     7ee:	80 3a       	cpi	r24, 0xA0	; 160
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <__vector_17+0x108>
     7f2:	6b c0       	rjmp	.+214    	; 0x8ca <__vector_17+0x1de>
     7f4:	88 3a       	cpi	r24, 0xA8	; 168
     7f6:	09 f0       	breq	.+2      	; 0x7fa <__vector_17+0x10e>
     7f8:	9e cf       	rjmp	.-196    	; 0x736 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     7fa:	84 e0       	ldi	r24, 0x04	; 4
     7fc:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <twi_state>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     800:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <twi_txBufferIndex>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     804:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <twi_txBufferLength>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	e0 e0       	ldi	r30, 0x00	; 0
     80c:	09 95       	icall
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     80e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <twi_txBufferLength>
     812:	81 11       	cpse	r24, r1
     814:	0f c0       	rjmp	.+30     	; 0x834 <__vector_17+0x148>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:665
        twi_txBufferLength = 1;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <twi_txBufferLength>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:666
        twi_txBuffer[0] = 0x00;
     81c:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <twi_txBuffer>
     820:	09 c0       	rjmp	.+18     	; 0x834 <__vector_17+0x148>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     822:	80 3c       	cpi	r24, 0xC0	; 192
     824:	09 f4       	brne	.+2      	; 0x828 <__vector_17+0x13c>
     826:	aa cf       	rjmp	.-172    	; 0x77c <__vector_17+0x90>
     828:	88 3c       	cpi	r24, 0xC8	; 200
     82a:	09 f4       	brne	.+2      	; 0x82e <__vector_17+0x142>
     82c:	a7 cf       	rjmp	.-178    	; 0x77c <__vector_17+0x90>
     82e:	88 3b       	cpi	r24, 0xB8	; 184
     830:	09 f0       	breq	.+2      	; 0x834 <__vector_17+0x148>
     832:	81 cf       	rjmp	.-254    	; 0x736 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     834:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <twi_txBufferIndex>
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	8e 0f       	add	r24, r30
     83c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <twi_txBufferIndex>
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	e1 57       	subi	r30, 0x71	; 113
     844:	ff 4f       	sbci	r31, 0xFF	; 255
     846:	80 81       	ld	r24, Z
     848:	83 b9       	out	0x03, r24	; 3
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     84a:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <twi_txBufferIndex>
     84e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <twi_txBufferLength>
     852:	22 c0       	rjmp	.+68     	; 0x898 <__vector_17+0x1ac>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     854:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <twi_slarw>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     858:	83 b9       	out	0x03, r24	; 3
twi_reply():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     85a:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     85c:	86 bf       	out	0x36, r24	; 54
     85e:	6b cf       	rjmp	.-298    	; 0x736 <__vector_17+0x4a>
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
     860:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <twi_masterBufferIndex>
     864:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <twi_masterBufferLength>
     868:	98 17       	cp	r25, r24
     86a:	18 f5       	brcc	.+70     	; 0x8b2 <__vector_17+0x1c6>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     86c:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <twi_masterBufferIndex>
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	8e 0f       	add	r24, r30
     874:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <twi_masterBufferIndex>
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	ed cf       	rjmp	.-38     	; 0x858 <__vector_17+0x16c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     87e:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <twi_masterBufferIndex>
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	8e 0f       	add	r24, r30
     886:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <twi_masterBufferIndex>
     88a:	83 b1       	in	r24, 0x03	; 3
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     890:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <twi_masterBufferIndex>
     894:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <twi_masterBufferLength>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     898:	98 17       	cp	r25, r24
     89a:	f8 f2       	brcs	.-66     	; 0x85a <__vector_17+0x16e>
twi_reply():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     89c:	85 e8       	ldi	r24, 0x85	; 133
     89e:	de cf       	rjmp	.-68     	; 0x85c <__vector_17+0x170>
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     8a0:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <twi_masterBufferIndex>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	8e 0f       	add	r24, r30
     8a8:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <twi_masterBufferIndex>
     8ac:	83 b1       	in	r24, 0x03	; 3
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:594
  if (twi_sendStop)
     8b2:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <twi_sendStop>
     8b6:	81 11       	cpse	r24, r1
     8b8:	6b cf       	rjmp	.-298    	; 0x790 <__vector_17+0xa4>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <twi_inRepStart>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     8c0:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     8c2:	86 bf       	out	0x36, r24	; 54
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     8c4:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <twi_state>
     8c8:	36 cf       	rjmp	.-404    	; 0x736 <__vector_17+0x4a>
twi_releaseBus():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     8ca:	85 ec       	ldi	r24, 0xC5	; 197
     8cc:	86 bf       	out	0x36, r24	; 54
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
     8ce:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <twi_state>
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:637
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
     8d2:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <twi_rxBufferIndex>
     8d6:	80 32       	cpi	r24, 0x20	; 32
     8d8:	30 f4       	brcc	.+12     	; 0x8e6 <__vector_17+0x1fa>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     8da:	e0 91 d1 00 	lds	r30, 0x00D1	; 0x8000d1 <twi_rxBufferIndex>
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	ef 54       	subi	r30, 0x4F	; 79
     8e2:	ff 4f       	sbci	r31, 0xFF	; 255
     8e4:	10 82       	st	Z, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     8e6:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <twi_rxBufferIndex>
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	81 eb       	ldi	r24, 0xB1	; 177
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	e0 e0       	ldi	r30, 0x00	; 0
     8f4:	09 95       	icall
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     8f6:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <twi_rxBufferIndex>
     8fa:	1d cf       	rjmp	.-454    	; 0x736 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     8fc:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <twi_error>
     900:	47 cf       	rjmp	.-370    	; 0x790 <__vector_17+0xa4>

00000902 <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2520>:
_GLOBAL__I_65535_0_sketch_sep8a.ino.cpp.o.2520():
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <Serial+0x3>
     90e:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <Serial+0x2>
     912:	88 ee       	ldi	r24, 0xE8	; 232
     914:	93 e0       	ldi	r25, 0x03	; 3
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <Serial+0x4>
     91e:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <Serial+0x5>
     922:	a0 93 e8 00 	sts	0x00E8, r26	; 0x8000e8 <Serial+0x6>
     926:	b0 93 e9 00 	sts	0x00E9, r27	; 0x8000e9 <Serial+0x7>
     92a:	8a e6       	ldi	r24, 0x6A	; 106
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <Serial+0x1>
     932:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <Serial>
     936:	80 e4       	ldi	r24, 0x40	; 64
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <Serial+0xd>
     93e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <Serial+0xc>
     942:	29 e2       	ldi	r18, 0x29	; 41
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <Serial+0xf>
     94a:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <Serial+0xe>
     94e:	2b e2       	ldi	r18, 0x2B	; 43
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	30 93 f3 00 	sts	0x00F3, r19	; 0x8000f3 <Serial+0x11>
     956:	20 93 f2 00 	sts	0x00F2, r18	; 0x8000f2 <Serial+0x10>
     95a:	2a e2       	ldi	r18, 0x2A	; 42
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	30 93 f5 00 	sts	0x00F5, r19	; 0x8000f5 <Serial+0x13>
     962:	20 93 f4 00 	sts	0x00F4, r18	; 0x8000f4 <Serial+0x12>
     966:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <Serial+0x15>
     96a:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <Serial+0x14>
     96e:	8c e2       	ldi	r24, 0x2C	; 44
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <Serial+0x17>
     976:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <Serial+0x16>
     97a:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <Serial+0x19>
     97e:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <Serial+0x1a>
     982:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <Serial+0x1b>
     986:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <Serial+0x1c>
     98a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <pixels+0x1>
     98e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <pixels+0x8>
     992:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <pixels+0xf>
     996:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <pixels+0x10>
     99a:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <pixels+0x11>
     99e:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <pixels+0x12>
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <pixels+0xe>
     9a8:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <pixels+0xb>
     9ac:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <pixels+0xc>
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <pixels+0xd>
     9b6:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <pixels>
     9ba:	c8 e6       	ldi	r28, 0x68	; 104
     9bc:	d1 e0       	ldi	r29, 0x01	; 1
     9be:	d0 93 a9 01 	sts	0x01A9, r29	; 0x8001a9 <pixels+0x5>
     9c2:	c0 93 a8 01 	sts	0x01A8, r28	; 0x8001a8 <pixels+0x4>
     9c6:	88 e6       	ldi	r24, 0x68	; 104
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	7d d5       	rcall	.+2810   	; 0x14c6 <malloc>
     9cc:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <pixels+0xa>
     9d0:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <pixels+0x9>
     9d4:	00 97       	sbiw	r24, 0x00	; 0
     9d6:	09 f4       	brne	.+2      	; 0x9da <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2520+0xd8>
     9d8:	7e c0       	rjmp	.+252    	; 0xad6 <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2520+0x1d4>
     9da:	fc 01       	movw	r30, r24
     9dc:	9e 01       	movw	r18, r28
     9de:	11 92       	st	Z+, r1
     9e0:	21 50       	subi	r18, 0x01	; 1
     9e2:	30 40       	sbci	r19, 0x00	; 0
     9e4:	e1 f7       	brne	.-8      	; 0x9de <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2520+0xdc>
     9e6:	88 e7       	ldi	r24, 0x78	; 120
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <pixels+0x3>
     9ee:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <pixels+0x2>
     9f2:	8d e0       	ldi	r24, 0x0D	; 13
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <pixels+0x7>
     9fa:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <pixels+0x6>
     9fe:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <pixels+0x1>
     a02:	88 23       	and	r24, r24
     a04:	31 f0       	breq	.+12     	; 0xa12 <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2520+0x110>
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	8d e0       	ldi	r24, 0x0D	; 13
     a0a:	ca db       	rcall	.-2156   	; 0x1a0 <pinMode>
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	8d e0       	ldi	r24, 0x0D	; 13
     a10:	91 db       	rcall	.-2270   	; 0x134 <digitalWrite>
     a12:	c9 ed       	ldi	r28, 0xD9	; 217
     a14:	d0 e0       	ldi	r29, 0x00	; 0
     a16:	fe 01       	movw	r30, r28
     a18:	84 91       	lpm	r24, Z
     a1a:	e8 2f       	mov	r30, r24
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	ee 0f       	add	r30, r30
     a20:	ff 1f       	adc	r31, r31
     a22:	ee 53       	subi	r30, 0x3E	; 62
     a24:	ff 4f       	sbci	r31, 0xFF	; 255
     a26:	85 91       	lpm	r24, Z+
     a28:	94 91       	lpm	r25, Z
     a2a:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <pixels+0x14>
     a2e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <pixels+0x13>
     a32:	08 eb       	ldi	r16, 0xB8	; 184
     a34:	10 e0       	ldi	r17, 0x00	; 0
     a36:	f8 01       	movw	r30, r16
     a38:	84 91       	lpm	r24, Z
     a3a:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <pixels+0x15>
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	8d e0       	ldi	r24, 0x0D	; 13
     a42:	ae db       	rcall	.-2212   	; 0x1a0 <pinMode>
     a44:	f8 01       	movw	r30, r16
     a46:	04 91       	lpm	r16, Z
     a48:	00 93 96 01 	sts	0x0196, r16	; 0x800196 <oneWire>
     a4c:	fe 01       	movw	r30, r28
     a4e:	c4 91       	lpm	r28, Z
     a50:	ec 2f       	mov	r30, r28
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	ef 55       	subi	r30, 0x5F	; 95
     a5a:	ff 4f       	sbci	r31, 0xFF	; 255
     a5c:	85 91       	lpm	r24, Z+
     a5e:	94 91       	lpm	r25, Z
     a60:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <oneWire+0x2>
     a64:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <oneWire+0x1>
     a68:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <oneWire+0xb>
     a6c:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <oneWire+0xd>
     a70:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <oneWire+0xc>
     a74:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <oneWire+0xa>
     a78:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <oneWire+0x9>
     a7c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <oneWire+0x8>
     a80:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <oneWire+0x7>
     a84:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <oneWire+0x6>
     a88:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <oneWire+0x5>
     a8c:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <oneWire+0x4>
     a90:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <oneWire+0x3>
     a94:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <sensors+0x16>
     a98:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <sensors+0x15>
     a9c:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <sensors+0x1>
     aa0:	86 e9       	ldi	r24, 0x96	; 150
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sensors+0xa>
     aa8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sensors+0x9>
     aac:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <sensors+0x7>
     ab0:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <sensors+0x8>
     ab4:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <sensors>
     ab8:	89 e0       	ldi	r24, 0x09	; 9
     aba:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <sensors+0x3>
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <sensors+0x4>
     ac4:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <sensors+0x5>
     ac8:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <sensors+0x6>
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	08 95       	ret
     ad6:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <pixels+0x5>
     ada:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <pixels+0x4>
     ade:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <pixels+0x3>
     ae2:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <pixels+0x2>
     ae6:	85 cf       	rjmp	.-246    	; 0x9f2 <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2520+0xf0>

00000ae8 <main>:
main():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     ae8:	78 94       	sei
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
     aea:	83 b7       	in	r24, 0x33	; 51
     aec:	83 60       	ori	r24, 0x03	; 3
     aee:	83 bf       	out	0x33, r24	; 51
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
     af0:	89 b7       	in	r24, 0x39	; 57
     af2:	81 60       	ori	r24, 0x01	; 1
     af4:	89 bf       	out	0x39, r24	; 57
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     af6:	c2 e0       	ldi	r28, 0x02	; 2
     af8:	ce bd       	out	0x2e, r28	; 46
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     afa:	8e b5       	in	r24, 0x2e	; 46
     afc:	81 60       	ori	r24, 0x01	; 1
     afe:	8e bd       	out	0x2e, r24	; 46
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     b00:	8f b5       	in	r24, 0x2f	; 47
     b02:	81 60       	ori	r24, 0x01	; 1
     b04:	8f bd       	out	0x2f, r24	; 47
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
     b06:	85 b5       	in	r24, 0x25	; 37
     b08:	84 60       	ori	r24, 0x04	; 4
     b0a:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
     b0c:	85 b5       	in	r24, 0x25	; 37
     b0e:	80 64       	ori	r24, 0x40	; 64
     b10:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
     b12:	87 e8       	ldi	r24, 0x87	; 135
     b14:	86 b9       	out	0x06, r24	; 6
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
     b16:	1a b8       	out	0x0a, r1	; 10
init_temperature_sys():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:219
void loop() {
  temperature_sys_activate();
}

void init_temperature_sys() {
  pinMode(ntc_pin, INPUT);
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	8e e0       	ldi	r24, 0x0E	; 14
     b1c:	41 db       	rcall	.-2430   	; 0x1a0 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:221

  pinMode(redPin, OUTPUT);
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	85 e0       	ldi	r24, 0x05	; 5
     b22:	3e db       	rcall	.-2436   	; 0x1a0 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:222
  pinMode(greenPin, OUTPUT);
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	86 e0       	ldi	r24, 0x06	; 6
     b28:	3b db       	rcall	.-2442   	; 0x1a0 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:223
  pinMode(bluePin, OUTPUT);
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	87 e0       	ldi	r24, 0x07	; 7
     b2e:	38 db       	rcall	.-2448   	; 0x1a0 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:225

  pinMode(FAN, OUTPUT);
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	88 e0       	ldi	r24, 0x08	; 8
     b34:	35 db       	rcall	.-2454   	; 0x1a0 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:226
  pinMode(enable, OUTPUT);
     b36:	61 e0       	ldi	r22, 0x01	; 1
     b38:	89 e0       	ldi	r24, 0x09	; 9
     b3a:	32 db       	rcall	.-2460   	; 0x1a0 <pinMode>
begin():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     b3c:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <Serial+0x10>
     b40:	f0 91 f3 00 	lds	r31, 0x00F3	; 0x8000f3 <Serial+0x11>
     b44:	c0 83       	st	Z, r28
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b46:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <Serial+0xc>
     b4a:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <Serial+0xd>
     b4e:	10 82       	st	Z, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     b50:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <Serial+0xe>
     b54:	f0 91 f1 00 	lds	r31, 0x00F1	; 0x8000f1 <Serial+0xf>
     b58:	8f ec       	ldi	r24, 0xCF	; 207
     b5a:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     b5c:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <Serial+0x18>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b60:	e0 91 f6 00 	lds	r30, 0x00F6	; 0x8000f6 <Serial+0x14>
     b64:	f0 91 f7 00 	lds	r31, 0x00F7	; 0x8000f7 <Serial+0x15>
     b68:	86 e8       	ldi	r24, 0x86	; 134
     b6a:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     b6c:	e0 91 f4 00 	lds	r30, 0x00F4	; 0x8000f4 <Serial+0x12>
     b70:	f0 91 f5 00 	lds	r31, 0x00F5	; 0x8000f5 <Serial+0x13>
     b74:	80 81       	ld	r24, Z
     b76:	88 69       	ori	r24, 0x98	; 152
     b78:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     b7a:	e0 91 f4 00 	lds	r30, 0x00F4	; 0x8000f4 <Serial+0x12>
     b7e:	f0 91 f5 00 	lds	r31, 0x00F5	; 0x8000f5 <Serial+0x13>
     b82:	80 81       	ld	r24, Z
     b84:	8f 7d       	andi	r24, 0xDF	; 223
     b86:	80 83       	st	Z, r24
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:112
  {
    digitalWrite(pin, HIGH);
  }
  else
  {
    switch(digitalPinToTimer(pin))
     b88:	93 e9       	ldi	r25, 0x93	; 147
     b8a:	29 2e       	mov	r2, r25
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	39 2e       	mov	r3, r25
serialEventRun():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     b90:	00 e0       	ldi	r16, 0x00	; 0
     b92:	10 e0       	ldi	r17, 0x00	; 0
main():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
     b94:	c5 e0       	ldi	r28, 0x05	; 5
     b96:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:231
}

void temperature_sys_activate() {
  int i;
  float average = 0;
     b98:	c1 2c       	mov	r12, r1
     b9a:	d1 2c       	mov	r13, r1
     b9c:	76 01       	movw	r14, r12
analogRead():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     b9e:	20 e4       	ldi	r18, 0x40	; 64
     ba0:	27 b9       	out	0x07, r18	; 7
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     ba2:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
     ba4:	36 99       	sbic	0x06, 6	; 6
     ba6:	fe cf       	rjmp	.-4      	; 0xba4 <main+0xbc>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
     ba8:	64 b1       	in	r22, 0x04	; 4
     baa:	75 b1       	in	r23, 0x05	; 5
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:234

  for (i = 0; i < samplingrate; i++) {
    average += analogRead(ntc_pin);
     bac:	07 2e       	mov	r0, r23
     bae:	00 0c       	add	r0, r0
     bb0:	88 0b       	sbc	r24, r24
     bb2:	99 0b       	sbc	r25, r25
     bb4:	9d d1       	rcall	.+826    	; 0xef0 <__floatsisf>
     bb6:	9b 01       	movw	r18, r22
     bb8:	ac 01       	movw	r20, r24
     bba:	c7 01       	movw	r24, r14
     bbc:	b6 01       	movw	r22, r12
     bbe:	00 d3       	rcall	.+1536   	; 0x11c0 <__addsf3>
     bc0:	6b 01       	movw	r12, r22
     bc2:	7c 01       	movw	r14, r24
delay():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:397
#endif // 0
}

void delay(unsigned long ms)
{
  unsigned long start = micros();
     bc4:	1e db       	rcall	.-2500   	; 0x202 <micros>
     bc6:	2b 01       	movw	r4, r22
     bc8:	3c 01       	movw	r6, r24
     bca:	8a e0       	ldi	r24, 0x0A	; 10
     bcc:	88 2e       	mov	r8, r24
     bce:	91 2c       	mov	r9, r1
     bd0:	a1 2c       	mov	r10, r1
     bd2:	b1 2c       	mov	r11, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     bd4:	16 db       	rcall	.-2516   	; 0x202 <micros>
     bd6:	64 19       	sub	r22, r4
     bd8:	75 09       	sbc	r23, r5
     bda:	86 09       	sbc	r24, r6
     bdc:	97 09       	sbc	r25, r7
     bde:	68 3e       	cpi	r22, 0xE8	; 232
     be0:	73 40       	sbci	r23, 0x03	; 3
     be2:	81 05       	cpc	r24, r1
     be4:	91 05       	cpc	r25, r1
     be6:	b0 f3       	brcs	.-20     	; 0xbd4 <main+0xec>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	88 1a       	sub	r8, r24
     bec:	91 08       	sbc	r9, r1
     bee:	a1 08       	sbc	r10, r1
     bf0:	b1 08       	sbc	r11, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     bf2:	e8 ee       	ldi	r30, 0xE8	; 232
     bf4:	4e 0e       	add	r4, r30
     bf6:	e3 e0       	ldi	r30, 0x03	; 3
     bf8:	5e 1e       	adc	r5, r30
     bfa:	61 1c       	adc	r6, r1
     bfc:	71 1c       	adc	r7, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     bfe:	81 14       	cp	r8, r1
     c00:	91 04       	cpc	r9, r1
     c02:	a1 04       	cpc	r10, r1
     c04:	b1 04       	cpc	r11, r1
     c06:	31 f7       	brne	.-52     	; 0xbd4 <main+0xec>
     c08:	21 97       	sbiw	r28, 0x01	; 1
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:233

void temperature_sys_activate() {
  int i;
  float average = 0;

  for (i = 0; i < samplingrate; i++) {
     c0a:	49 f6       	brne	.-110    	; 0xb9e <main+0xb6>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:238
    average += analogRead(ntc_pin);
    delay(10);
  }

  average /= samplingrate;
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 ea       	ldi	r20, 0xA0	; 160
     c12:	50 e4       	ldi	r21, 0x40	; 64
     c14:	c7 01       	movw	r24, r14
     c16:	b6 01       	movw	r22, r12
     c18:	37 d3       	rcall	.+1646   	; 0x1288 <__divsf3>
     c1a:	9b 01       	movw	r18, r22
     c1c:	ac 01       	movw	r20, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:239
  average = (1023 / average - 1.0);
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 ec       	ldi	r23, 0xC0	; 192
     c22:	8f e7       	ldi	r24, 0x7F	; 127
     c24:	94 e4       	ldi	r25, 0x44	; 68
     c26:	30 d3       	rcall	.+1632   	; 0x1288 <__divsf3>
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e8       	ldi	r20, 0x80	; 128
     c2e:	5f e3       	ldi	r21, 0x3F	; 63
     c30:	c6 d2       	rcall	.+1420   	; 0x11be <__subsf3>
     c32:	9b 01       	movw	r18, r22
     c34:	ac 01       	movw	r20, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:240
  average = Rref / average;
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e4       	ldi	r23, 0x40	; 64
     c3a:	8c e1       	ldi	r24, 0x1C	; 28
     c3c:	96 e4       	ldi	r25, 0x46	; 70
     c3e:	24 d3       	rcall	.+1608   	; 0x1288 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:242

  float temperature = average / nominal_resistance;
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e4       	ldi	r19, 0x40	; 64
     c44:	4c e1       	ldi	r20, 0x1C	; 28
     c46:	56 e4       	ldi	r21, 0x46	; 70
     c48:	1f d3       	rcall	.+1598   	; 0x1288 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:243
  temperature = log(temperature);
     c4a:	c0 d3       	rcall	.+1920   	; 0x13cc <log>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:244
  temperature /= beta;
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e4       	ldi	r19, 0x40	; 64
     c50:	43 e5       	ldi	r20, 0x53	; 83
     c52:	55 e4       	ldi	r21, 0x45	; 69
     c54:	19 d3       	rcall	.+1586   	; 0x1288 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:245
  temperature += 1.0 / (nominal_temperature + 273.15);
     c56:	2f e0       	ldi	r18, 0x0F	; 15
     c58:	3f ec       	ldi	r19, 0xCF	; 207
     c5a:	4b e5       	ldi	r20, 0x5B	; 91
     c5c:	5b e3       	ldi	r21, 0x3B	; 59
     c5e:	b0 d2       	rcall	.+1376   	; 0x11c0 <__addsf3>
     c60:	9b 01       	movw	r18, r22
     c62:	ac 01       	movw	r20, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:246
  temperature = 1.0 / temperature;
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	80 e8       	ldi	r24, 0x80	; 128
     c6a:	9f e3       	ldi	r25, 0x3F	; 63
     c6c:	0d d3       	rcall	.+1562   	; 0x1288 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:247
  temperature -= 273.15;
     c6e:	23 e3       	ldi	r18, 0x33	; 51
     c70:	33 e9       	ldi	r19, 0x93	; 147
     c72:	48 e8       	ldi	r20, 0x88	; 136
     c74:	53 e4       	ldi	r21, 0x43	; 67
     c76:	a3 d2       	rcall	.+1350   	; 0x11be <__subsf3>
     c78:	6b 01       	movw	r12, r22
     c7a:	7c 01       	movw	r14, r24
printFloat():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:256

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     c7c:	ac 01       	movw	r20, r24
     c7e:	9b 01       	movw	r18, r22
     c80:	e5 d3       	rcall	.+1994   	; 0x144c <__unordsf2>
     c82:	88 23       	and	r24, r24
     c84:	01 f1       	breq	.+64     	; 0xcc6 <main+0x1de>
write():
     c86:	88 e7       	ldi	r24, 0x78	; 120
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	41 dc       	rcall	.-1918   	; 0x50e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
     c8c:	84 e8       	ldi	r24, 0x84	; 132
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	3e dc       	rcall	.-1924   	; 0x50e <Print::write(char const*) [clone .part.2] [clone .constprop.28]>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:251

  Serial.println(temperature);

  if (temperature < 20) {
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 ea       	ldi	r20, 0xA0	; 160
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	c7 01       	movw	r24, r14
     c9c:	b6 01       	movw	r22, r12
     c9e:	22 d1       	rcall	.+580    	; 0xee4 <__cmpsf2>
     ca0:	87 ff       	sbrs	r24, 7
     ca2:	8f c0       	rjmp	.+286    	; 0xdc2 <main+0x2da>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:253

    digitalWrite(FAN, LOW);
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	88 e0       	ldi	r24, 0x08	; 8
     ca8:	45 da       	rcall	.-2934   	; 0x134 <digitalWrite>
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	89 e0       	ldi	r24, 0x09	; 9
     cae:	78 da       	rcall	.-2832   	; 0x1a0 <pinMode>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:104
  if (val == 0)
  {
    digitalWrite(pin, LOW);
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	89 e0       	ldi	r24, 0x09	; 9
     cb4:	3f da       	rcall	.-2946   	; 0x134 <digitalWrite>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:256
    analogWrite(enable, 0);

    digitalWrite(redPin, LOW);
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	85 e0       	ldi	r24, 0x05	; 5
     cba:	3c da       	rcall	.-2952   	; 0x134 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:257
    digitalWrite(bluePin, HIGH);
     cbc:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:276

    digitalWrite(FAN, HIGH);
    analogWrite(enable, 255);

    digitalWrite(redPin, HIGH);
    digitalWrite(bluePin, LOW);
     cbe:	87 e0       	ldi	r24, 0x07	; 7
     cc0:	39 da       	rcall	.-2958   	; 0x134 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:277
    digitalWrite(greenPin, LOW);
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	b8 c0       	rjmp	.+368    	; 0xe36 <main+0x34e>
printFloat():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
     cc6:	46 01       	movw	r8, r12
     cc8:	57 01       	movw	r10, r14
     cca:	e8 94       	clt
     ccc:	b7 f8       	bld	r11, 7
     cce:	2f ef       	ldi	r18, 0xFF	; 255
     cd0:	3f ef       	ldi	r19, 0xFF	; 255
     cd2:	4f e7       	ldi	r20, 0x7F	; 127
     cd4:	5f e7       	ldi	r21, 0x7F	; 127
     cd6:	c5 01       	movw	r24, r10
     cd8:	b4 01       	movw	r22, r8
     cda:	b8 d3       	rcall	.+1904   	; 0x144c <__unordsf2>
     cdc:	81 11       	cpse	r24, r1
     cde:	0c c0       	rjmp	.+24     	; 0xcf8 <main+0x210>
     ce0:	2f ef       	ldi	r18, 0xFF	; 255
     ce2:	3f ef       	ldi	r19, 0xFF	; 255
     ce4:	4f e7       	ldi	r20, 0x7F	; 127
     ce6:	5f e7       	ldi	r21, 0x7F	; 127
     ce8:	c5 01       	movw	r24, r10
     cea:	b4 01       	movw	r22, r8
     cec:	fb d0       	rcall	.+502    	; 0xee4 <__cmpsf2>
     cee:	18 16       	cp	r1, r24
     cf0:	1c f4       	brge	.+6      	; 0xcf8 <main+0x210>
write():
     cf2:	8c e7       	ldi	r24, 0x7C	; 124
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	c9 cf       	rjmp	.-110    	; 0xc8a <main+0x1a2>
printFloat():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     cf8:	2f ef       	ldi	r18, 0xFF	; 255
     cfa:	3f ef       	ldi	r19, 0xFF	; 255
     cfc:	4f e7       	ldi	r20, 0x7F	; 127
     cfe:	5f e4       	ldi	r21, 0x4F	; 79
     d00:	c7 01       	movw	r24, r14
     d02:	b6 01       	movw	r22, r12
     d04:	5a d3       	rcall	.+1716   	; 0x13ba <__gesf2>
     d06:	18 16       	cp	r1, r24
     d08:	1c f4       	brge	.+6      	; 0xd10 <main+0x228>
write():
     d0a:	80 e8       	ldi	r24, 0x80	; 128
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	bd cf       	rjmp	.-134    	; 0xc8a <main+0x1a2>
printFloat():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:259
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     d10:	2f ef       	ldi	r18, 0xFF	; 255
     d12:	3f ef       	ldi	r19, 0xFF	; 255
     d14:	4f e7       	ldi	r20, 0x7F	; 127
     d16:	5f ec       	ldi	r21, 0xCF	; 207
     d18:	c7 01       	movw	r24, r14
     d1a:	b6 01       	movw	r22, r12
     d1c:	e3 d0       	rcall	.+454    	; 0xee4 <__cmpsf2>
     d1e:	87 fd       	sbrc	r24, 7
     d20:	f4 cf       	rjmp	.-24     	; 0xd0a <main+0x222>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	a9 01       	movw	r20, r18
     d28:	c7 01       	movw	r24, r14
     d2a:	b6 01       	movw	r22, r12
     d2c:	db d0       	rcall	.+438    	; 0xee4 <__cmpsf2>
     d2e:	87 ff       	sbrs	r24, 7
     d30:	45 c0       	rjmp	.+138    	; 0xdbc <main+0x2d4>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     d32:	6d e2       	ldi	r22, 0x2D	; 45
     d34:	82 ee       	ldi	r24, 0xE2	; 226
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	26 db       	rcall	.-2484   	; 0x386 <HardwareSerial::write(unsigned char)>
printFloat():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:265
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
     d3a:	c7 01       	movw	r24, r14
     d3c:	b6 01       	movw	r22, r12
     d3e:	90 58       	subi	r25, 0x80	; 128
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:273
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  
  number += rounding;
     d40:	2a e0       	ldi	r18, 0x0A	; 10
     d42:	37 ed       	ldi	r19, 0xD7	; 215
     d44:	43 ea       	ldi	r20, 0xA3	; 163
     d46:	5b e3       	ldi	r21, 0x3B	; 59
     d48:	3b d2       	rcall	.+1142   	; 0x11c0 <__addsf3>
     d4a:	2b 01       	movw	r4, r22
     d4c:	3c 01       	movw	r6, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     d4e:	09 d3       	rcall	.+1554   	; 0x1362 <__fixunssfsi>
     d50:	4b 01       	movw	r8, r22
     d52:	5c 01       	movw	r10, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:277
  double remainder = number - (double)int_part;
     d54:	cb d0       	rcall	.+406    	; 0xeec <__floatunsisf>
     d56:	9b 01       	movw	r18, r22
     d58:	ac 01       	movw	r20, r24
     d5a:	c3 01       	movw	r24, r6
     d5c:	b2 01       	movw	r22, r4
     d5e:	2f d2       	rcall	.+1118   	; 0x11be <__subsf3>
     d60:	2b 01       	movw	r4, r22
     d62:	3c 01       	movw	r6, r24
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     d64:	4a e0       	ldi	r20, 0x0A	; 10
     d66:	c5 01       	movw	r24, r10
     d68:	b4 01       	movw	r22, r8
     d6a:	dd db       	rcall	.-2118   	; 0x526 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     d6c:	6e e2       	ldi	r22, 0x2E	; 46
     d6e:	82 ee       	ldi	r24, 0xE2	; 226
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	09 db       	rcall	.-2542   	; 0x386 <HardwareSerial::write(unsigned char)>
printFloat():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:288
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e2       	ldi	r20, 0x20	; 32
     d7a:	51 e4       	ldi	r21, 0x41	; 65
     d7c:	c3 01       	movw	r24, r6
     d7e:	b2 01       	movw	r22, r4
     d80:	16 d1       	rcall	.+556    	; 0xfae <__mulsf3>
     d82:	2b 01       	movw	r4, r22
     d84:	3c 01       	movw	r6, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
     d86:	ed d2       	rcall	.+1498   	; 0x1362 <__fixunssfsi>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
     d88:	4b 01       	movw	r8, r22
     d8a:	b1 2c       	mov	r11, r1
     d8c:	a1 2c       	mov	r10, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     d8e:	4a e0       	ldi	r20, 0x0A	; 10
     d90:	c5 01       	movw	r24, r10
     d92:	b4 01       	movw	r22, r8
     d94:	c8 db       	rcall	.-2160   	; 0x526 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]>
printFloat():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:291
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
     d96:	c5 01       	movw	r24, r10
     d98:	b4 01       	movw	r22, r8
     d9a:	a8 d0       	rcall	.+336    	; 0xeec <__floatunsisf>
     d9c:	9b 01       	movw	r18, r22
     d9e:	ac 01       	movw	r20, r24
     da0:	c3 01       	movw	r24, r6
     da2:	b2 01       	movw	r22, r4
     da4:	0c d2       	rcall	.+1048   	; 0x11be <__subsf3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:288
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e2       	ldi	r20, 0x20	; 32
     dac:	51 e4       	ldi	r21, 0x41	; 65
     dae:	ff d0       	rcall	.+510    	; 0xfae <__mulsf3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
     db0:	d8 d2       	rcall	.+1456   	; 0x1362 <__fixunssfsi>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     db6:	4a e0       	ldi	r20, 0x0A	; 10
     db8:	b6 db       	rcall	.-2196   	; 0x526 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]>
     dba:	68 cf       	rjmp	.-304    	; 0xc8c <main+0x1a4>
printFloat():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
     dbc:	c7 01       	movw	r24, r14
     dbe:	b6 01       	movw	r22, r12
     dc0:	bf cf       	rjmp	.-130    	; 0xd40 <main+0x258>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:260

    digitalWrite(redPin, LOW);
    digitalWrite(bluePin, HIGH);
    digitalWrite(greenPin, LOW);

  } else if (temperature >= 20 && temperature <= 30) {
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 ea       	ldi	r20, 0xA0	; 160
     dc8:	51 e4       	ldi	r21, 0x41	; 65
     dca:	c7 01       	movw	r24, r14
     dcc:	b6 01       	movw	r22, r12
     dce:	f5 d2       	rcall	.+1514   	; 0x13ba <__gesf2>
     dd0:	87 fd       	sbrc	r24, 7
     dd2:	63 c0       	rjmp	.+198    	; 0xe9a <main+0x3b2>
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 ef       	ldi	r20, 0xF0	; 240
     dda:	51 e4       	ldi	r21, 0x41	; 65
     ddc:	c7 01       	movw	r24, r14
     dde:	b6 01       	movw	r22, r12
     de0:	81 d0       	rcall	.+258    	; 0xee4 <__cmpsf2>
     de2:	18 16       	cp	r1, r24
     de4:	0c f4       	brge	.+2      	; 0xde8 <main+0x300>
     de6:	59 c0       	rjmp	.+178    	; 0xe9a <main+0x3b2>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:262

    speed = map(temperature, 20, 30, 0, 255);
     de8:	c7 01       	movw	r24, r14
     dea:	b6 01       	movw	r22, r12
     dec:	b5 d2       	rcall	.+1386   	; 0x1358 <__fixsfsi>
map():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WMath.cpp:54
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     dee:	9b 01       	movw	r18, r22
     df0:	ac 01       	movw	r20, r24
     df2:	24 51       	subi	r18, 0x14	; 20
     df4:	31 09       	sbc	r19, r1
     df6:	41 09       	sbc	r20, r1
     df8:	51 09       	sbc	r21, r1
     dfa:	af ef       	ldi	r26, 0xFF	; 255
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	a7 d1       	rcall	.+846    	; 0x114e <__muluhisi3>
     e00:	2a e0       	ldi	r18, 0x0A	; 10
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	86 d1       	rcall	.+780    	; 0x1116 <__divmodsi4>
     e0a:	f2 2e       	mov	r15, r18
     e0c:	e3 2e       	mov	r14, r19
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:262
     e0e:	c2 2f       	mov	r28, r18
     e10:	d3 2f       	mov	r29, r19
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	89 e0       	ldi	r24, 0x09	; 9
     e16:	c4 d9       	rcall	.-3192   	; 0x1a0 <pinMode>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:102
  if (val == 0)
     e18:	20 97       	sbiw	r28, 0x00	; 0
     e1a:	c9 f4       	brne	.+50     	; 0xe4e <main+0x366>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:104
  {
    digitalWrite(pin, LOW);
     e1c:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:108
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
     e1e:	89 e0       	ldi	r24, 0x09	; 9
     e20:	89 d9       	rcall	.-3310   	; 0x134 <digitalWrite>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:264
    analogWrite(enable, speed);
    digitalWrite(FAN, HIGH);
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	88 e0       	ldi	r24, 0x08	; 8
     e26:	86 d9       	rcall	.-3316   	; 0x134 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:266

    digitalWrite(redPin, LOW);
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	83 d9       	rcall	.-3322   	; 0x134 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:267
    digitalWrite(bluePin, LOW);
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	87 e0       	ldi	r24, 0x07	; 7
     e32:	80 d9       	rcall	.-3328   	; 0x134 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:268
    digitalWrite(greenPin, HIGH);
     e34:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:277
    digitalWrite(FAN, HIGH);
    analogWrite(enable, 255);

    digitalWrite(redPin, HIGH);
    digitalWrite(bluePin, LOW);
    digitalWrite(greenPin, LOW);
     e36:	86 e0       	ldi	r24, 0x06	; 6
     e38:	7d d9       	rcall	.-3334   	; 0x134 <digitalWrite>
serialEventRun():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
     e3a:	01 15       	cp	r16, r1
     e3c:	11 05       	cpc	r17, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <main+0x35a>
     e40:	a9 ce       	rjmp	.-686    	; 0xb94 <main+0xac>
     e42:	6f da       	rcall	.-2850   	; 0x322 <Serial0_available()>
     e44:	88 23       	and	r24, r24
     e46:	09 f4       	brne	.+2      	; 0xe4a <main+0x362>
     e48:	a5 ce       	rjmp	.-694    	; 0xb94 <main+0xac>
     e4a:	da d8       	rcall	.-3660   	; 0x0 <__vectors>
     e4c:	a3 ce       	rjmp	.-698    	; 0xb94 <main+0xac>
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:106
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
     e4e:	cf 3f       	cpi	r28, 0xFF	; 255
     e50:	d1 05       	cpc	r29, r1
     e52:	11 f4       	brne	.+4      	; 0xe58 <main+0x370>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, HIGH);
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	e3 cf       	rjmp	.-58     	; 0xe1e <main+0x336>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:112
  }
  else
  {
    switch(digitalPinToTimer(pin))
     e58:	f1 01       	movw	r30, r2
     e5a:	84 91       	lpm	r24, Z
     e5c:	85 30       	cpi	r24, 0x05	; 5
     e5e:	61 f0       	breq	.+24     	; 0xe78 <main+0x390>
     e60:	87 30       	cpi	r24, 0x07	; 7
     e62:	91 f0       	breq	.+36     	; 0xe88 <main+0x3a0>
     e64:	84 30       	cpi	r24, 0x04	; 4
     e66:	a9 f4       	brne	.+42     	; 0xe92 <main+0x3aa>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:148
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
     e68:	8f b5       	in	r24, 0x2f	; 47
     e6a:	80 68       	ori	r24, 0x80	; 128
     e6c:	8f bd       	out	0x2f, r24	; 47
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:149
        OCR1A = val; // set pwm duty
     e6e:	8f 2d       	mov	r24, r15
     e70:	9e 2d       	mov	r25, r14
     e72:	9b bd       	out	0x2b, r25	; 43
     e74:	8a bd       	out	0x2a, r24	; 42
     e76:	d5 cf       	rjmp	.-86     	; 0xe22 <main+0x33a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:156
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
     e78:	8f b5       	in	r24, 0x2f	; 47
     e7a:	80 62       	ori	r24, 0x20	; 32
     e7c:	8f bd       	out	0x2f, r24	; 47
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:157
        OCR1B = val; // set pwm duty
     e7e:	8f 2d       	mov	r24, r15
     e80:	9e 2d       	mov	r25, r14
     e82:	99 bd       	out	0x29, r25	; 41
     e84:	88 bd       	out	0x28, r24	; 40
     e86:	cd cf       	rjmp	.-102    	; 0xe22 <main+0x33a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:172
      #endif

      #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        // connect pwm to pin on timer 2
        TCCR2 |= _BV(COM21);
     e88:	85 b5       	in	r24, 0x25	; 37
     e8a:	80 62       	ori	r24, 0x20	; 32
     e8c:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:173
        OCR2 = val; // set pwm duty
     e8e:	f3 bc       	out	0x23, r15	; 35
     e90:	c8 cf       	rjmp	.-112    	; 0xe22 <main+0x33a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:292
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
     e92:	c0 38       	cpi	r28, 0x80	; 128
     e94:	d1 05       	cpc	r29, r1
     e96:	f4 f6       	brge	.-68     	; 0xe54 <main+0x36c>
     e98:	c1 cf       	rjmp	.-126    	; 0xe1c <main+0x334>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:270

    digitalWrite(redPin, LOW);
    digitalWrite(bluePin, LOW);
    digitalWrite(greenPin, HIGH);

  } else if (temperature > 30) {
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 ef       	ldi	r20, 0xF0	; 240
     ea0:	51 e4       	ldi	r21, 0x41	; 65
     ea2:	c7 01       	movw	r24, r14
     ea4:	b6 01       	movw	r22, r12
     ea6:	89 d2       	rcall	.+1298   	; 0x13ba <__gesf2>
     ea8:	18 16       	cp	r1, r24
     eaa:	3c f6       	brge	.-114    	; 0xe3a <main+0x352>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:272

    digitalWrite(FAN, HIGH);
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	88 e0       	ldi	r24, 0x08	; 8
     eb0:	41 d9       	rcall	.-3454   	; 0x134 <digitalWrite>
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	89 e0       	ldi	r24, 0x09	; 9
     eb6:	74 d9       	rcall	.-3352   	; 0x1a0 <pinMode>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	89 e0       	ldi	r24, 0x09	; 9
     ebc:	3b d9       	rcall	.-3466   	; 0x134 <digitalWrite>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:275
    analogWrite(enable, 255);

    digitalWrite(redPin, HIGH);
     ebe:	61 e0       	ldi	r22, 0x01	; 1
     ec0:	85 e0       	ldi	r24, 0x05	; 5
     ec2:	38 d9       	rcall	.-3472   	; 0x134 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:276
    digitalWrite(bluePin, LOW);
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	fb ce       	rjmp	.-522    	; 0xcbe <main+0x1d6>

00000ec8 <_GLOBAL__sub_D__ZN4CingC2Ev>:
_GLOBAL__sub_D__ZN4CingC2Ev():
c:\Users\Lenovo\Documents\Arduino\libraries\Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:120

/*!
  @brief   Deallocate Adafruit_NeoPixel object, set data pin back to INPUT.
*/
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  free(pixels);
     ec8:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <pixels+0x9>
     ecc:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <pixels+0xa>
     ed0:	96 d3       	rcall	.+1836   	; 0x15fe <free>
c:\Users\Lenovo\Documents\Arduino\libraries\Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:121
  if (pin >= 0)
     ed2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <pixels+0x6>
     ed6:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <pixels+0x7>
     eda:	97 fd       	sbrc	r25, 7
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <_GLOBAL__sub_D__ZN4CingC2Ev+0x1a>
c:\Users\Lenovo\Documents\Arduino\libraries\Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:122
    pinMode(pin, INPUT);
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	5f c9       	rjmp	.-3394   	; 0x1a0 <pinMode>
c:\Users\Lenovo\Documents\Arduino\libraries\Atmega8_IO\src/Atmega8_IO.cpp:296
			}
	}
void Cing::ShowLed()
	{
		pixels.show();
	}
     ee2:	08 95       	ret

00000ee4 <__cmpsf2>:
__cmpsf2():
     ee4:	40 d0       	rcall	.+128    	; 0xf66 <__fp_cmp>
     ee6:	08 f4       	brcc	.+2      	; 0xeea <__cmpsf2+0x6>
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	08 95       	ret

00000eec <__floatunsisf>:
__floatunsisf():
     eec:	e8 94       	clt
     eee:	09 c0       	rjmp	.+18     	; 0xf02 <__floatsisf+0x12>

00000ef0 <__floatsisf>:
     ef0:	97 fb       	bst	r25, 7
     ef2:	3e f4       	brtc	.+14     	; 0xf02 <__floatsisf+0x12>
     ef4:	90 95       	com	r25
     ef6:	80 95       	com	r24
     ef8:	70 95       	com	r23
     efa:	61 95       	neg	r22
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	8f 4f       	sbci	r24, 0xFF	; 255
     f00:	9f 4f       	sbci	r25, 0xFF	; 255
     f02:	99 23       	and	r25, r25
     f04:	a9 f0       	breq	.+42     	; 0xf30 <__floatsisf+0x40>
     f06:	f9 2f       	mov	r31, r25
     f08:	96 e9       	ldi	r25, 0x96	; 150
     f0a:	bb 27       	eor	r27, r27
     f0c:	93 95       	inc	r25
     f0e:	f6 95       	lsr	r31
     f10:	87 95       	ror	r24
     f12:	77 95       	ror	r23
     f14:	67 95       	ror	r22
     f16:	b7 95       	ror	r27
     f18:	f1 11       	cpse	r31, r1
     f1a:	f8 cf       	rjmp	.-16     	; 0xf0c <__floatsisf+0x1c>
     f1c:	fa f4       	brpl	.+62     	; 0xf5c <__floatsisf+0x6c>
     f1e:	bb 0f       	add	r27, r27
     f20:	11 f4       	brne	.+4      	; 0xf26 <__floatsisf+0x36>
     f22:	60 ff       	sbrs	r22, 0
     f24:	1b c0       	rjmp	.+54     	; 0xf5c <__floatsisf+0x6c>
     f26:	6f 5f       	subi	r22, 0xFF	; 255
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	8f 4f       	sbci	r24, 0xFF	; 255
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	16 c0       	rjmp	.+44     	; 0xf5c <__floatsisf+0x6c>
     f30:	88 23       	and	r24, r24
     f32:	11 f0       	breq	.+4      	; 0xf38 <__floatsisf+0x48>
     f34:	96 e9       	ldi	r25, 0x96	; 150
     f36:	11 c0       	rjmp	.+34     	; 0xf5a <__floatsisf+0x6a>
     f38:	77 23       	and	r23, r23
     f3a:	21 f0       	breq	.+8      	; 0xf44 <__floatsisf+0x54>
     f3c:	9e e8       	ldi	r25, 0x8E	; 142
     f3e:	87 2f       	mov	r24, r23
     f40:	76 2f       	mov	r23, r22
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <__floatsisf+0x5e>
     f44:	66 23       	and	r22, r22
     f46:	71 f0       	breq	.+28     	; 0xf64 <__floatsisf+0x74>
     f48:	96 e8       	ldi	r25, 0x86	; 134
     f4a:	86 2f       	mov	r24, r22
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	2a f0       	brmi	.+10     	; 0xf5c <__floatsisf+0x6c>
     f52:	9a 95       	dec	r25
     f54:	66 0f       	add	r22, r22
     f56:	77 1f       	adc	r23, r23
     f58:	88 1f       	adc	r24, r24
     f5a:	da f7       	brpl	.-10     	; 0xf52 <__floatsisf+0x62>
     f5c:	88 0f       	add	r24, r24
     f5e:	96 95       	lsr	r25
     f60:	87 95       	ror	r24
     f62:	97 f9       	bld	r25, 7
     f64:	08 95       	ret

00000f66 <__fp_cmp>:
__fp_cmp():
     f66:	99 0f       	add	r25, r25
     f68:	00 08       	sbc	r0, r0
     f6a:	55 0f       	add	r21, r21
     f6c:	aa 0b       	sbc	r26, r26
     f6e:	e0 e8       	ldi	r30, 0x80	; 128
     f70:	fe ef       	ldi	r31, 0xFE	; 254
     f72:	16 16       	cp	r1, r22
     f74:	17 06       	cpc	r1, r23
     f76:	e8 07       	cpc	r30, r24
     f78:	f9 07       	cpc	r31, r25
     f7a:	c0 f0       	brcs	.+48     	; 0xfac <__fp_cmp+0x46>
     f7c:	12 16       	cp	r1, r18
     f7e:	13 06       	cpc	r1, r19
     f80:	e4 07       	cpc	r30, r20
     f82:	f5 07       	cpc	r31, r21
     f84:	98 f0       	brcs	.+38     	; 0xfac <__fp_cmp+0x46>
     f86:	62 1b       	sub	r22, r18
     f88:	73 0b       	sbc	r23, r19
     f8a:	84 0b       	sbc	r24, r20
     f8c:	95 0b       	sbc	r25, r21
     f8e:	39 f4       	brne	.+14     	; 0xf9e <__fp_cmp+0x38>
     f90:	0a 26       	eor	r0, r26
     f92:	61 f0       	breq	.+24     	; 0xfac <__fp_cmp+0x46>
     f94:	23 2b       	or	r18, r19
     f96:	24 2b       	or	r18, r20
     f98:	25 2b       	or	r18, r21
     f9a:	21 f4       	brne	.+8      	; 0xfa4 <__fp_cmp+0x3e>
     f9c:	08 95       	ret
     f9e:	0a 26       	eor	r0, r26
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <__fp_cmp+0x3e>
     fa2:	a1 40       	sbci	r26, 0x01	; 1
     fa4:	a6 95       	lsr	r26
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	81 1d       	adc	r24, r1
     faa:	81 1d       	adc	r24, r1
     fac:	08 95       	ret

00000fae <__mulsf3>:
__mulsf3():
     fae:	0b d0       	rcall	.+22     	; 0xfc6 <__mulsf3x>
     fb0:	78 c0       	rjmp	.+240    	; 0x10a2 <__fp_round>
     fb2:	69 d0       	rcall	.+210    	; 0x1086 <__fp_pscA>
     fb4:	28 f0       	brcs	.+10     	; 0xfc0 <__mulsf3+0x12>
     fb6:	6e d0       	rcall	.+220    	; 0x1094 <__fp_pscB>
     fb8:	18 f0       	brcs	.+6      	; 0xfc0 <__mulsf3+0x12>
     fba:	95 23       	and	r25, r21
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <__mulsf3+0x12>
     fbe:	5a c0       	rjmp	.+180    	; 0x1074 <__fp_inf>
     fc0:	5f c0       	rjmp	.+190    	; 0x1080 <__fp_nan>
     fc2:	11 24       	eor	r1, r1
     fc4:	a2 c0       	rjmp	.+324    	; 0x110a <__fp_szero>

00000fc6 <__mulsf3x>:
__mulsf3x():
     fc6:	7e d0       	rcall	.+252    	; 0x10c4 <__fp_split3>
     fc8:	a0 f3       	brcs	.-24     	; 0xfb2 <__mulsf3+0x4>

00000fca <__mulsf3_pse>:
     fca:	95 9f       	mul	r25, r21
     fcc:	d1 f3       	breq	.-12     	; 0xfc2 <__mulsf3+0x14>
     fce:	95 0f       	add	r25, r21
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	55 1f       	adc	r21, r21
     fd4:	62 9f       	mul	r22, r18
     fd6:	f0 01       	movw	r30, r0
     fd8:	72 9f       	mul	r23, r18
     fda:	bb 27       	eor	r27, r27
     fdc:	f0 0d       	add	r31, r0
     fde:	b1 1d       	adc	r27, r1
     fe0:	63 9f       	mul	r22, r19
     fe2:	aa 27       	eor	r26, r26
     fe4:	f0 0d       	add	r31, r0
     fe6:	b1 1d       	adc	r27, r1
     fe8:	aa 1f       	adc	r26, r26
     fea:	64 9f       	mul	r22, r20
     fec:	66 27       	eor	r22, r22
     fee:	b0 0d       	add	r27, r0
     ff0:	a1 1d       	adc	r26, r1
     ff2:	66 1f       	adc	r22, r22
     ff4:	82 9f       	mul	r24, r18
     ff6:	22 27       	eor	r18, r18
     ff8:	b0 0d       	add	r27, r0
     ffa:	a1 1d       	adc	r26, r1
     ffc:	62 1f       	adc	r22, r18
     ffe:	73 9f       	mul	r23, r19
    1000:	b0 0d       	add	r27, r0
    1002:	a1 1d       	adc	r26, r1
    1004:	62 1f       	adc	r22, r18
    1006:	83 9f       	mul	r24, r19
    1008:	a0 0d       	add	r26, r0
    100a:	61 1d       	adc	r22, r1
    100c:	22 1f       	adc	r18, r18
    100e:	74 9f       	mul	r23, r20
    1010:	33 27       	eor	r19, r19
    1012:	a0 0d       	add	r26, r0
    1014:	61 1d       	adc	r22, r1
    1016:	23 1f       	adc	r18, r19
    1018:	84 9f       	mul	r24, r20
    101a:	60 0d       	add	r22, r0
    101c:	21 1d       	adc	r18, r1
    101e:	82 2f       	mov	r24, r18
    1020:	76 2f       	mov	r23, r22
    1022:	6a 2f       	mov	r22, r26
    1024:	11 24       	eor	r1, r1
    1026:	9f 57       	subi	r25, 0x7F	; 127
    1028:	50 40       	sbci	r21, 0x00	; 0
    102a:	8a f0       	brmi	.+34     	; 0x104e <__mulsf3_pse+0x84>
    102c:	e1 f0       	breq	.+56     	; 0x1066 <__mulsf3_pse+0x9c>
    102e:	88 23       	and	r24, r24
    1030:	4a f0       	brmi	.+18     	; 0x1044 <__mulsf3_pse+0x7a>
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	bb 1f       	adc	r27, r27
    1038:	66 1f       	adc	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	88 1f       	adc	r24, r24
    103e:	91 50       	subi	r25, 0x01	; 1
    1040:	50 40       	sbci	r21, 0x00	; 0
    1042:	a9 f7       	brne	.-22     	; 0x102e <__mulsf3_pse+0x64>
    1044:	9e 3f       	cpi	r25, 0xFE	; 254
    1046:	51 05       	cpc	r21, r1
    1048:	70 f0       	brcs	.+28     	; 0x1066 <__mulsf3_pse+0x9c>
    104a:	14 c0       	rjmp	.+40     	; 0x1074 <__fp_inf>
    104c:	5e c0       	rjmp	.+188    	; 0x110a <__fp_szero>
    104e:	5f 3f       	cpi	r21, 0xFF	; 255
    1050:	ec f3       	brlt	.-6      	; 0x104c <__mulsf3_pse+0x82>
    1052:	98 3e       	cpi	r25, 0xE8	; 232
    1054:	dc f3       	brlt	.-10     	; 0x104c <__mulsf3_pse+0x82>
    1056:	86 95       	lsr	r24
    1058:	77 95       	ror	r23
    105a:	67 95       	ror	r22
    105c:	b7 95       	ror	r27
    105e:	f7 95       	ror	r31
    1060:	e7 95       	ror	r30
    1062:	9f 5f       	subi	r25, 0xFF	; 255
    1064:	c1 f7       	brne	.-16     	; 0x1056 <__mulsf3_pse+0x8c>
    1066:	fe 2b       	or	r31, r30
    1068:	88 0f       	add	r24, r24
    106a:	91 1d       	adc	r25, r1
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24
    1070:	97 f9       	bld	r25, 7
    1072:	08 95       	ret

00001074 <__fp_inf>:
    1074:	97 f9       	bld	r25, 7
    1076:	9f 67       	ori	r25, 0x7F	; 127
    1078:	80 e8       	ldi	r24, 0x80	; 128
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	08 95       	ret

00001080 <__fp_nan>:
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    1082:	80 ec       	ldi	r24, 0xC0	; 192
    1084:	08 95       	ret

00001086 <__fp_pscA>:
    1086:	00 24       	eor	r0, r0
__fp_pscA():
    1088:	0a 94       	dec	r0
    108a:	16 16       	cp	r1, r22
    108c:	17 06       	cpc	r1, r23
    108e:	18 06       	cpc	r1, r24
    1090:	09 06       	cpc	r0, r25
    1092:	08 95       	ret

00001094 <__fp_pscB>:
__fp_pscB():
    1094:	00 24       	eor	r0, r0
    1096:	0a 94       	dec	r0
    1098:	12 16       	cp	r1, r18
    109a:	13 06       	cpc	r1, r19
    109c:	14 06       	cpc	r1, r20
    109e:	05 06       	cpc	r0, r21
    10a0:	08 95       	ret

000010a2 <__fp_round>:
__fp_round():
    10a2:	09 2e       	mov	r0, r25
    10a4:	03 94       	inc	r0
    10a6:	00 0c       	add	r0, r0
    10a8:	11 f4       	brne	.+4      	; 0x10ae <__fp_round+0xc>
    10aa:	88 23       	and	r24, r24
    10ac:	52 f0       	brmi	.+20     	; 0x10c2 <__fp_round+0x20>
    10ae:	bb 0f       	add	r27, r27
    10b0:	40 f4       	brcc	.+16     	; 0x10c2 <__fp_round+0x20>
    10b2:	bf 2b       	or	r27, r31
    10b4:	11 f4       	brne	.+4      	; 0x10ba <__fp_round+0x18>
    10b6:	60 ff       	sbrs	r22, 0
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <__fp_round+0x20>
    10ba:	6f 5f       	subi	r22, 0xFF	; 255
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	8f 4f       	sbci	r24, 0xFF	; 255
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	08 95       	ret

000010c4 <__fp_split3>:
__fp_split3():
    10c4:	57 fd       	sbrc	r21, 7
    10c6:	90 58       	subi	r25, 0x80	; 128
    10c8:	44 0f       	add	r20, r20
    10ca:	55 1f       	adc	r21, r21
    10cc:	59 f0       	breq	.+22     	; 0x10e4 <__fp_splitA+0x10>
    10ce:	5f 3f       	cpi	r21, 0xFF	; 255
    10d0:	71 f0       	breq	.+28     	; 0x10ee <__fp_splitA+0x1a>
    10d2:	47 95       	ror	r20

000010d4 <__fp_splitA>:
    10d4:	88 0f       	add	r24, r24
    10d6:	97 fb       	bst	r25, 7
    10d8:	99 1f       	adc	r25, r25
    10da:	61 f0       	breq	.+24     	; 0x10f4 <__fp_splitA+0x20>
    10dc:	9f 3f       	cpi	r25, 0xFF	; 255
    10de:	79 f0       	breq	.+30     	; 0x10fe <__fp_splitA+0x2a>
    10e0:	87 95       	ror	r24
    10e2:	08 95       	ret
    10e4:	12 16       	cp	r1, r18
    10e6:	13 06       	cpc	r1, r19
    10e8:	14 06       	cpc	r1, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	f2 cf       	rjmp	.-28     	; 0x10d2 <__fp_split3+0xe>
    10ee:	46 95       	lsr	r20
    10f0:	f1 df       	rcall	.-30     	; 0x10d4 <__fp_splitA>
    10f2:	08 c0       	rjmp	.+16     	; 0x1104 <__fp_splitA+0x30>
    10f4:	16 16       	cp	r1, r22
    10f6:	17 06       	cpc	r1, r23
    10f8:	18 06       	cpc	r1, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	f1 cf       	rjmp	.-30     	; 0x10e0 <__fp_splitA+0xc>
    10fe:	86 95       	lsr	r24
    1100:	71 05       	cpc	r23, r1
    1102:	61 05       	cpc	r22, r1
    1104:	08 94       	sec
    1106:	08 95       	ret

00001108 <__fp_zero>:
__fp_zero():
    1108:	e8 94       	clt

0000110a <__fp_szero>:
    110a:	bb 27       	eor	r27, r27
    110c:	66 27       	eor	r22, r22
    110e:	77 27       	eor	r23, r23
    1110:	cb 01       	movw	r24, r22
    1112:	97 f9       	bld	r25, 7
    1114:	08 95       	ret

00001116 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    1116:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    1118:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    111a:	16 f4       	brtc	.+4      	; 0x1120 <__divmodsi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    111c:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    111e:	0f d0       	rcall	.+30     	; 0x113e <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    1120:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    1122:	05 d0       	rcall	.+10     	; 0x112e <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    1124:	1e d0       	rcall	.+60     	; 0x1162 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    1126:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    1128:	02 d0       	rcall	.+4      	; 0x112e <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    112a:	46 f4       	brtc	.+16     	; 0x113c <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    112c:	08 c0       	rjmp	.+16     	; 0x113e <__negsi2>

0000112e <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    112e:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    1130:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    1132:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    1134:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    1136:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    1138:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    113a:	5f 4f       	sbci	r21, 0xFF	; 255

0000113c <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    113c:	08 95       	ret

0000113e <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    113e:	90 95       	com	r25
    1140:	80 95       	com	r24
    1142:	70 95       	com	r23
    1144:	61 95       	neg	r22
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	8f 4f       	sbci	r24, 0xFF	; 255
    114a:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    114c:	08 95       	ret

0000114e <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    114e:	2b d0       	rcall	.+86     	; 0x11a6 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1150:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1152:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1154:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    1156:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    1158:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    115a:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    115c:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    115e:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1160:	08 95       	ret

00001162 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1162:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1164:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1166:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1168:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    116a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    116c:	0d c0       	rjmp	.+26     	; 0x1188 <__udivmodsi4_ep>

0000116e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    116e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1170:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1172:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1174:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1176:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1178:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    117a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    117c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    117e:	20 f0       	brcs	.+8      	; 0x1188 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1180:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1182:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1184:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1186:	f5 0b       	sbc	r31, r21

00001188 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1188:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    118a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    118c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    118e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1190:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1192:	69 f7       	brne	.-38     	; 0x116e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1194:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1196:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1198:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    119a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    119c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    119e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    11a0:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    11a2:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    11a4:	08 95       	ret

000011a6 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    11a6:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    11a8:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    11aa:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    11ac:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    11ae:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:578
    11b0:	01 d0       	rcall	.+2      	; 0x11b4 <__umulhisi3+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    11b2:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    11b4:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    11b6:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    11b8:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    11ba:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    11bc:	08 95       	ret

000011be <__subsf3>:
__subsf3():
    11be:	50 58       	subi	r21, 0x80	; 128

000011c0 <__addsf3>:
    11c0:	bb 27       	eor	r27, r27
    11c2:	aa 27       	eor	r26, r26
    11c4:	0e d0       	rcall	.+28     	; 0x11e2 <__addsf3x>
    11c6:	6d cf       	rjmp	.-294    	; 0x10a2 <__fp_round>
__addsf3():
    11c8:	5e df       	rcall	.-324    	; 0x1086 <__fp_pscA>
    11ca:	30 f0       	brcs	.+12     	; 0x11d8 <__addsf3+0x18>
    11cc:	63 df       	rcall	.-314    	; 0x1094 <__fp_pscB>
    11ce:	20 f0       	brcs	.+8      	; 0x11d8 <__addsf3+0x18>
    11d0:	31 f4       	brne	.+12     	; 0x11de <__addsf3+0x1e>
    11d2:	9f 3f       	cpi	r25, 0xFF	; 255
    11d4:	11 f4       	brne	.+4      	; 0x11da <__addsf3+0x1a>
    11d6:	1e f4       	brtc	.+6      	; 0x11de <__addsf3+0x1e>
    11d8:	53 cf       	rjmp	.-346    	; 0x1080 <__fp_nan>
    11da:	0e f4       	brtc	.+2      	; 0x11de <__addsf3+0x1e>
    11dc:	e0 95       	com	r30
    11de:	e7 fb       	bst	r30, 7
    11e0:	49 cf       	rjmp	.-366    	; 0x1074 <__fp_inf>

000011e2 <__addsf3x>:
__addsf3x():
    11e2:	e9 2f       	mov	r30, r25
    11e4:	6f df       	rcall	.-290    	; 0x10c4 <__fp_split3>
    11e6:	80 f3       	brcs	.-32     	; 0x11c8 <__addsf3+0x8>
    11e8:	ba 17       	cp	r27, r26
    11ea:	62 07       	cpc	r22, r18
    11ec:	73 07       	cpc	r23, r19
    11ee:	84 07       	cpc	r24, r20
    11f0:	95 07       	cpc	r25, r21
    11f2:	18 f0       	brcs	.+6      	; 0x11fa <__addsf3x+0x18>
    11f4:	71 f4       	brne	.+28     	; 0x1212 <__addsf3x+0x30>
    11f6:	9e f5       	brtc	.+102    	; 0x125e <__addsf3x+0x7c>
    11f8:	87 cf       	rjmp	.-242    	; 0x1108 <__fp_zero>
    11fa:	0e f4       	brtc	.+2      	; 0x11fe <__addsf3x+0x1c>
    11fc:	e0 95       	com	r30
    11fe:	0b 2e       	mov	r0, r27
    1200:	ba 2f       	mov	r27, r26
    1202:	a0 2d       	mov	r26, r0
    1204:	0b 01       	movw	r0, r22
    1206:	b9 01       	movw	r22, r18
    1208:	90 01       	movw	r18, r0
    120a:	0c 01       	movw	r0, r24
    120c:	ca 01       	movw	r24, r20
    120e:	a0 01       	movw	r20, r0
    1210:	11 24       	eor	r1, r1
    1212:	ff 27       	eor	r31, r31
    1214:	59 1b       	sub	r21, r25
    1216:	99 f0       	breq	.+38     	; 0x123e <__addsf3x+0x5c>
    1218:	59 3f       	cpi	r21, 0xF9	; 249
    121a:	50 f4       	brcc	.+20     	; 0x1230 <__addsf3x+0x4e>
    121c:	50 3e       	cpi	r21, 0xE0	; 224
    121e:	68 f1       	brcs	.+90     	; 0x127a <__addsf3x+0x98>
    1220:	1a 16       	cp	r1, r26
    1222:	f0 40       	sbci	r31, 0x00	; 0
    1224:	a2 2f       	mov	r26, r18
    1226:	23 2f       	mov	r18, r19
    1228:	34 2f       	mov	r19, r20
    122a:	44 27       	eor	r20, r20
    122c:	58 5f       	subi	r21, 0xF8	; 248
    122e:	f3 cf       	rjmp	.-26     	; 0x1216 <__addsf3x+0x34>
    1230:	46 95       	lsr	r20
    1232:	37 95       	ror	r19
    1234:	27 95       	ror	r18
    1236:	a7 95       	ror	r26
    1238:	f0 40       	sbci	r31, 0x00	; 0
    123a:	53 95       	inc	r21
    123c:	c9 f7       	brne	.-14     	; 0x1230 <__addsf3x+0x4e>
    123e:	7e f4       	brtc	.+30     	; 0x125e <__addsf3x+0x7c>
    1240:	1f 16       	cp	r1, r31
    1242:	ba 0b       	sbc	r27, r26
    1244:	62 0b       	sbc	r22, r18
    1246:	73 0b       	sbc	r23, r19
    1248:	84 0b       	sbc	r24, r20
    124a:	ba f0       	brmi	.+46     	; 0x127a <__addsf3x+0x98>
    124c:	91 50       	subi	r25, 0x01	; 1
    124e:	a1 f0       	breq	.+40     	; 0x1278 <__addsf3x+0x96>
    1250:	ff 0f       	add	r31, r31
    1252:	bb 1f       	adc	r27, r27
    1254:	66 1f       	adc	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	88 1f       	adc	r24, r24
    125a:	c2 f7       	brpl	.-16     	; 0x124c <__addsf3x+0x6a>
    125c:	0e c0       	rjmp	.+28     	; 0x127a <__addsf3x+0x98>
    125e:	ba 0f       	add	r27, r26
    1260:	62 1f       	adc	r22, r18
    1262:	73 1f       	adc	r23, r19
    1264:	84 1f       	adc	r24, r20
    1266:	48 f4       	brcc	.+18     	; 0x127a <__addsf3x+0x98>
    1268:	87 95       	ror	r24
    126a:	77 95       	ror	r23
    126c:	67 95       	ror	r22
    126e:	b7 95       	ror	r27
    1270:	f7 95       	ror	r31
    1272:	9e 3f       	cpi	r25, 0xFE	; 254
    1274:	08 f0       	brcs	.+2      	; 0x1278 <__addsf3x+0x96>
    1276:	b3 cf       	rjmp	.-154    	; 0x11de <__addsf3+0x1e>
    1278:	93 95       	inc	r25
    127a:	88 0f       	add	r24, r24
    127c:	08 f0       	brcs	.+2      	; 0x1280 <__addsf3x+0x9e>
    127e:	99 27       	eor	r25, r25
    1280:	ee 0f       	add	r30, r30
    1282:	97 95       	ror	r25
    1284:	87 95       	ror	r24
    1286:	08 95       	ret

00001288 <__divsf3>:
    1288:	0c d0       	rcall	.+24     	; 0x12a2 <__divsf3x>
    128a:	0b cf       	rjmp	.-490    	; 0x10a2 <__fp_round>
    128c:	03 df       	rcall	.-506    	; 0x1094 <__fp_pscB>
    128e:	40 f0       	brcs	.+16     	; 0x12a0 <__divsf3+0x18>
    1290:	fa de       	rcall	.-524    	; 0x1086 <__fp_pscA>
    1292:	30 f0       	brcs	.+12     	; 0x12a0 <__divsf3+0x18>
    1294:	21 f4       	brne	.+8      	; 0x129e <__divsf3+0x16>
    1296:	5f 3f       	cpi	r21, 0xFF	; 255
    1298:	19 f0       	breq	.+6      	; 0x12a0 <__divsf3+0x18>
    129a:	ec ce       	rjmp	.-552    	; 0x1074 <__fp_inf>
    129c:	51 11       	cpse	r21, r1
    129e:	35 cf       	rjmp	.-406    	; 0x110a <__fp_szero>
    12a0:	ef ce       	rjmp	.-546    	; 0x1080 <__fp_nan>

000012a2 <__divsf3x>:
__divsf3x():
    12a2:	10 df       	rcall	.-480    	; 0x10c4 <__fp_split3>
    12a4:	98 f3       	brcs	.-26     	; 0x128c <__divsf3+0x4>

000012a6 <__divsf3_pse>:
    12a6:	99 23       	and	r25, r25
    12a8:	c9 f3       	breq	.-14     	; 0x129c <__divsf3+0x14>
    12aa:	55 23       	and	r21, r21
    12ac:	b1 f3       	breq	.-20     	; 0x129a <__divsf3+0x12>
    12ae:	95 1b       	sub	r25, r21
    12b0:	55 0b       	sbc	r21, r21
    12b2:	bb 27       	eor	r27, r27
    12b4:	aa 27       	eor	r26, r26
    12b6:	62 17       	cp	r22, r18
    12b8:	73 07       	cpc	r23, r19
    12ba:	84 07       	cpc	r24, r20
    12bc:	38 f0       	brcs	.+14     	; 0x12cc <__divsf3_pse+0x26>
    12be:	9f 5f       	subi	r25, 0xFF	; 255
    12c0:	5f 4f       	sbci	r21, 0xFF	; 255
    12c2:	22 0f       	add	r18, r18
    12c4:	33 1f       	adc	r19, r19
    12c6:	44 1f       	adc	r20, r20
    12c8:	aa 1f       	adc	r26, r26
    12ca:	a9 f3       	breq	.-22     	; 0x12b6 <__divsf3_pse+0x10>
    12cc:	33 d0       	rcall	.+102    	; 0x1334 <__divsf3_pse+0x8e>
    12ce:	0e 2e       	mov	r0, r30
    12d0:	3a f0       	brmi	.+14     	; 0x12e0 <__divsf3_pse+0x3a>
    12d2:	e0 e8       	ldi	r30, 0x80	; 128
    12d4:	30 d0       	rcall	.+96     	; 0x1336 <__divsf3_pse+0x90>
    12d6:	91 50       	subi	r25, 0x01	; 1
    12d8:	50 40       	sbci	r21, 0x00	; 0
    12da:	e6 95       	lsr	r30
    12dc:	00 1c       	adc	r0, r0
    12de:	ca f7       	brpl	.-14     	; 0x12d2 <__divsf3_pse+0x2c>
    12e0:	29 d0       	rcall	.+82     	; 0x1334 <__divsf3_pse+0x8e>
    12e2:	fe 2f       	mov	r31, r30
    12e4:	27 d0       	rcall	.+78     	; 0x1334 <__divsf3_pse+0x8e>
    12e6:	66 0f       	add	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	bb 1f       	adc	r27, r27
    12ee:	26 17       	cp	r18, r22
    12f0:	37 07       	cpc	r19, r23
    12f2:	48 07       	cpc	r20, r24
    12f4:	ab 07       	cpc	r26, r27
    12f6:	b0 e8       	ldi	r27, 0x80	; 128
    12f8:	09 f0       	breq	.+2      	; 0x12fc <__divsf3_pse+0x56>
    12fa:	bb 0b       	sbc	r27, r27
    12fc:	80 2d       	mov	r24, r0
    12fe:	bf 01       	movw	r22, r30
    1300:	ff 27       	eor	r31, r31
    1302:	93 58       	subi	r25, 0x83	; 131
    1304:	5f 4f       	sbci	r21, 0xFF	; 255
    1306:	2a f0       	brmi	.+10     	; 0x1312 <__divsf3_pse+0x6c>
    1308:	9e 3f       	cpi	r25, 0xFE	; 254
    130a:	51 05       	cpc	r21, r1
    130c:	68 f0       	brcs	.+26     	; 0x1328 <__divsf3_pse+0x82>
    130e:	b2 ce       	rjmp	.-668    	; 0x1074 <__fp_inf>
    1310:	fc ce       	rjmp	.-520    	; 0x110a <__fp_szero>
    1312:	5f 3f       	cpi	r21, 0xFF	; 255
    1314:	ec f3       	brlt	.-6      	; 0x1310 <__divsf3_pse+0x6a>
    1316:	98 3e       	cpi	r25, 0xE8	; 232
    1318:	dc f3       	brlt	.-10     	; 0x1310 <__divsf3_pse+0x6a>
    131a:	86 95       	lsr	r24
    131c:	77 95       	ror	r23
    131e:	67 95       	ror	r22
    1320:	b7 95       	ror	r27
    1322:	f7 95       	ror	r31
    1324:	9f 5f       	subi	r25, 0xFF	; 255
    1326:	c9 f7       	brne	.-14     	; 0x131a <__divsf3_pse+0x74>
    1328:	88 0f       	add	r24, r24
    132a:	91 1d       	adc	r25, r1
    132c:	96 95       	lsr	r25
    132e:	87 95       	ror	r24
    1330:	97 f9       	bld	r25, 7
    1332:	08 95       	ret
    1334:	e1 e0       	ldi	r30, 0x01	; 1
    1336:	66 0f       	add	r22, r22
    1338:	77 1f       	adc	r23, r23
    133a:	88 1f       	adc	r24, r24
    133c:	bb 1f       	adc	r27, r27
    133e:	62 17       	cp	r22, r18
    1340:	73 07       	cpc	r23, r19
    1342:	84 07       	cpc	r24, r20
    1344:	ba 07       	cpc	r27, r26
    1346:	20 f0       	brcs	.+8      	; 0x1350 <__divsf3_pse+0xaa>
    1348:	62 1b       	sub	r22, r18
    134a:	73 0b       	sbc	r23, r19
    134c:	84 0b       	sbc	r24, r20
    134e:	ba 0b       	sbc	r27, r26
    1350:	ee 1f       	adc	r30, r30
    1352:	88 f7       	brcc	.-30     	; 0x1336 <__divsf3_pse+0x90>
    1354:	e0 95       	com	r30
    1356:	08 95       	ret

00001358 <__fixsfsi>:
    1358:	04 d0       	rcall	.+8      	; 0x1362 <__fixunssfsi>
    135a:	68 94       	set
    135c:	b1 11       	cpse	r27, r1
    135e:	d5 ce       	rjmp	.-598    	; 0x110a <__fp_szero>
    1360:	08 95       	ret

00001362 <__fixunssfsi>:
    1362:	b8 de       	rcall	.-656    	; 0x10d4 <__fp_splitA>
    1364:	88 f0       	brcs	.+34     	; 0x1388 <__fixunssfsi+0x26>
    1366:	9f 57       	subi	r25, 0x7F	; 127
    1368:	90 f0       	brcs	.+36     	; 0x138e <__fixunssfsi+0x2c>
    136a:	b9 2f       	mov	r27, r25
    136c:	99 27       	eor	r25, r25
__fixunssfsi():
    136e:	b7 51       	subi	r27, 0x17	; 23
    1370:	a0 f0       	brcs	.+40     	; 0x139a <__fixunssfsi+0x38>
    1372:	d1 f0       	breq	.+52     	; 0x13a8 <__fixunssfsi+0x46>
    1374:	66 0f       	add	r22, r22
    1376:	77 1f       	adc	r23, r23
    1378:	88 1f       	adc	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	1a f0       	brmi	.+6      	; 0x1384 <__fixunssfsi+0x22>
    137e:	ba 95       	dec	r27
    1380:	c9 f7       	brne	.-14     	; 0x1374 <__fixunssfsi+0x12>
    1382:	12 c0       	rjmp	.+36     	; 0x13a8 <__fixunssfsi+0x46>
    1384:	b1 30       	cpi	r27, 0x01	; 1
    1386:	81 f0       	breq	.+32     	; 0x13a8 <__fixunssfsi+0x46>
    1388:	bf de       	rcall	.-642    	; 0x1108 <__fp_zero>
    138a:	b1 e0       	ldi	r27, 0x01	; 1
    138c:	08 95       	ret
    138e:	bc ce       	rjmp	.-648    	; 0x1108 <__fp_zero>
    1390:	67 2f       	mov	r22, r23
    1392:	78 2f       	mov	r23, r24
    1394:	88 27       	eor	r24, r24
    1396:	b8 5f       	subi	r27, 0xF8	; 248
    1398:	39 f0       	breq	.+14     	; 0x13a8 <__fixunssfsi+0x46>
    139a:	b9 3f       	cpi	r27, 0xF9	; 249
    139c:	cc f3       	brlt	.-14     	; 0x1390 <__fixunssfsi+0x2e>
    139e:	86 95       	lsr	r24
    13a0:	77 95       	ror	r23
    13a2:	67 95       	ror	r22
    13a4:	b3 95       	inc	r27
    13a6:	d9 f7       	brne	.-10     	; 0x139e <__fixunssfsi+0x3c>
    13a8:	3e f4       	brtc	.+14     	; 0x13b8 <__fixunssfsi+0x56>
    13aa:	90 95       	com	r25
    13ac:	80 95       	com	r24
    13ae:	70 95       	com	r23
    13b0:	61 95       	neg	r22
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	8f 4f       	sbci	r24, 0xFF	; 255
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	08 95       	ret

000013ba <__gesf2>:
__gesf2():
    13ba:	d5 dd       	rcall	.-1110   	; 0xf66 <__fp_cmp>
    13bc:	08 f4       	brcc	.+2      	; 0x13c0 <__gesf2+0x6>
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	08 95       	ret
    13c2:	0e f0       	brts	.+2      	; 0x13c6 <__gesf2+0xc>
    13c4:	47 c0       	rjmp	.+142    	; 0x1454 <__fp_mpack>
    13c6:	5c ce       	rjmp	.-840    	; 0x1080 <__fp_nan>
    13c8:	68 94       	set
    13ca:	54 ce       	rjmp	.-856    	; 0x1074 <__fp_inf>

000013cc <log>:
log():
    13cc:	83 de       	rcall	.-762    	; 0x10d4 <__fp_splitA>
    13ce:	c8 f3       	brcs	.-14     	; 0x13c2 <__gesf2+0x8>
    13d0:	99 23       	and	r25, r25
    13d2:	d1 f3       	breq	.-12     	; 0x13c8 <__gesf2+0xe>
    13d4:	c6 f3       	brts	.-16     	; 0x13c6 <__gesf2+0xc>
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	1f 93       	push	r17
    13dc:	0f 93       	push	r16
    13de:	ff 92       	push	r15
    13e0:	c9 2f       	mov	r28, r25
    13e2:	dd 27       	eor	r29, r29
    13e4:	88 23       	and	r24, r24
    13e6:	2a f0       	brmi	.+10     	; 0x13f2 <log+0x26>
    13e8:	21 97       	sbiw	r28, 0x01	; 1
    13ea:	66 0f       	add	r22, r22
    13ec:	77 1f       	adc	r23, r23
    13ee:	88 1f       	adc	r24, r24
    13f0:	da f7       	brpl	.-10     	; 0x13e8 <log+0x1c>
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e8       	ldi	r20, 0x80	; 128
    13f8:	5f eb       	ldi	r21, 0xBF	; 191
    13fa:	9f e3       	ldi	r25, 0x3F	; 63
    13fc:	88 39       	cpi	r24, 0x98	; 152
    13fe:	20 f0       	brcs	.+8      	; 0x1408 <log+0x3c>
    1400:	80 3e       	cpi	r24, 0xE0	; 224
    1402:	30 f0       	brcs	.+12     	; 0x1410 <log+0x44>
    1404:	21 96       	adiw	r28, 0x01	; 1
    1406:	8f 77       	andi	r24, 0x7F	; 127
    1408:	db de       	rcall	.-586    	; 0x11c0 <__addsf3>
    140a:	e6 e2       	ldi	r30, 0x26	; 38
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <log+0x4a>
    1410:	d7 de       	rcall	.-594    	; 0x11c0 <__addsf3>
    1412:	e3 e5       	ldi	r30, 0x53	; 83
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	2c d0       	rcall	.+88     	; 0x1470 <__fp_powser>
    1418:	8b 01       	movw	r16, r22
    141a:	be 01       	movw	r22, r28
    141c:	ec 01       	movw	r28, r24
    141e:	fb 2e       	mov	r15, r27
    1420:	6f 57       	subi	r22, 0x7F	; 127
    1422:	71 09       	sbc	r23, r1
    1424:	75 95       	asr	r23
    1426:	77 1f       	adc	r23, r23
    1428:	88 0b       	sbc	r24, r24
    142a:	99 0b       	sbc	r25, r25
    142c:	61 dd       	rcall	.-1342   	; 0xef0 <__floatsisf>
    142e:	28 e1       	ldi	r18, 0x18	; 24
    1430:	32 e7       	ldi	r19, 0x72	; 114
    1432:	41 e3       	ldi	r20, 0x31	; 49
    1434:	5f e3       	ldi	r21, 0x3F	; 63
    1436:	c7 dd       	rcall	.-1138   	; 0xfc6 <__mulsf3x>
    1438:	af 2d       	mov	r26, r15
    143a:	98 01       	movw	r18, r16
    143c:	ae 01       	movw	r20, r28
    143e:	ff 90       	pop	r15
    1440:	0f 91       	pop	r16
    1442:	1f 91       	pop	r17
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	cc de       	rcall	.-616    	; 0x11e2 <__addsf3x>
    144a:	2b ce       	rjmp	.-938    	; 0x10a2 <__fp_round>

0000144c <__unordsf2>:
    144c:	8c dd       	rcall	.-1256   	; 0xf66 <__fp_cmp>
    144e:	88 0b       	sbc	r24, r24
    1450:	99 0b       	sbc	r25, r25
    1452:	08 95       	ret

00001454 <__fp_mpack>:
    1454:	9f 3f       	cpi	r25, 0xFF	; 255
__fp_mpack():
    1456:	31 f0       	breq	.+12     	; 0x1464 <__fp_mpack_finite+0xc>

00001458 <__fp_mpack_finite>:
    1458:	91 50       	subi	r25, 0x01	; 1
    145a:	20 f4       	brcc	.+8      	; 0x1464 <__fp_mpack_finite+0xc>
    145c:	87 95       	ror	r24
    145e:	77 95       	ror	r23
    1460:	67 95       	ror	r22
    1462:	b7 95       	ror	r27
    1464:	88 0f       	add	r24, r24
    1466:	91 1d       	adc	r25, r1
    1468:	96 95       	lsr	r25
    146a:	87 95       	ror	r24
    146c:	97 f9       	bld	r25, 7
    146e:	08 95       	ret

00001470 <__fp_powser>:
__fp_powser():
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	1f 93       	push	r17
    1476:	0f 93       	push	r16
    1478:	ff 92       	push	r15
    147a:	ef 92       	push	r14
    147c:	df 92       	push	r13
    147e:	7b 01       	movw	r14, r22
    1480:	8c 01       	movw	r16, r24
    1482:	68 94       	set
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <__fp_powser+0x20>
    1486:	da 2e       	mov	r13, r26
    1488:	ef 01       	movw	r28, r30
    148a:	9d dd       	rcall	.-1222   	; 0xfc6 <__mulsf3x>
    148c:	fe 01       	movw	r30, r28
    148e:	e8 94       	clt
    1490:	a5 91       	lpm	r26, Z+
    1492:	25 91       	lpm	r18, Z+
    1494:	35 91       	lpm	r19, Z+
    1496:	45 91       	lpm	r20, Z+
    1498:	55 91       	lpm	r21, Z+
    149a:	ae f3       	brts	.-22     	; 0x1486 <__fp_powser+0x16>
    149c:	ef 01       	movw	r28, r30
    149e:	a1 de       	rcall	.-702    	; 0x11e2 <__addsf3x>
    14a0:	fe 01       	movw	r30, r28
    14a2:	97 01       	movw	r18, r14
    14a4:	a8 01       	movw	r20, r16
    14a6:	da 94       	dec	r13
    14a8:	79 f7       	brne	.-34     	; 0x1488 <__fp_powser+0x18>
    14aa:	df 90       	pop	r13
    14ac:	ef 90       	pop	r14
    14ae:	ff 90       	pop	r15
    14b0:	0f 91       	pop	r16
    14b2:	1f 91       	pop	r17
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    14ba:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    14bc:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    14be:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    14c0:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    14c2:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    14c4:	09 94       	ijmp

000014c6 <malloc>:
malloc():
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	91 05       	cpc	r25, r1
    14d2:	10 f4       	brcc	.+4      	; 0x14d8 <malloc+0x12>
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <__flp>
    14dc:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <__flp+0x1>
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	a0 e0       	ldi	r26, 0x00	; 0
    14e8:	30 97       	sbiw	r30, 0x00	; 0
    14ea:	99 f4       	brne	.+38     	; 0x1512 <malloc+0x4c>
    14ec:	21 15       	cp	r18, r1
    14ee:	31 05       	cpc	r19, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <malloc+0x2e>
    14f2:	4a c0       	rjmp	.+148    	; 0x1588 <malloc+0xc2>
    14f4:	28 1b       	sub	r18, r24
    14f6:	39 0b       	sbc	r19, r25
    14f8:	24 30       	cpi	r18, 0x04	; 4
    14fa:	31 05       	cpc	r19, r1
    14fc:	d8 f5       	brcc	.+118    	; 0x1574 <malloc+0xae>
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	9b 81       	ldd	r25, Y+3	; 0x03
    1502:	61 15       	cp	r22, r1
    1504:	71 05       	cpc	r23, r1
    1506:	89 f1       	breq	.+98     	; 0x156a <malloc+0xa4>
    1508:	fb 01       	movw	r30, r22
    150a:	93 83       	std	Z+3, r25	; 0x03
    150c:	82 83       	std	Z+2, r24	; 0x02
    150e:	fe 01       	movw	r30, r28
    1510:	11 c0       	rjmp	.+34     	; 0x1534 <malloc+0x6e>
    1512:	40 81       	ld	r20, Z
    1514:	51 81       	ldd	r21, Z+1	; 0x01
    1516:	02 81       	ldd	r16, Z+2	; 0x02
    1518:	13 81       	ldd	r17, Z+3	; 0x03
    151a:	48 17       	cp	r20, r24
    151c:	59 07       	cpc	r21, r25
    151e:	e0 f0       	brcs	.+56     	; 0x1558 <malloc+0x92>
    1520:	48 17       	cp	r20, r24
    1522:	59 07       	cpc	r21, r25
    1524:	99 f4       	brne	.+38     	; 0x154c <malloc+0x86>
    1526:	10 97       	sbiw	r26, 0x00	; 0
    1528:	61 f0       	breq	.+24     	; 0x1542 <malloc+0x7c>
    152a:	12 96       	adiw	r26, 0x02	; 2
    152c:	0c 93       	st	X, r16
    152e:	12 97       	sbiw	r26, 0x02	; 2
    1530:	13 96       	adiw	r26, 0x03	; 3
    1532:	1c 93       	st	X, r17
    1534:	32 96       	adiw	r30, 0x02	; 2
    1536:	cf 01       	movw	r24, r30
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret
    1542:	00 93 bc 01 	sts	0x01BC, r16	; 0x8001bc <__flp>
    1546:	10 93 bd 01 	sts	0x01BD, r17	; 0x8001bd <__flp+0x1>
    154a:	f4 cf       	rjmp	.-24     	; 0x1534 <malloc+0x6e>
    154c:	21 15       	cp	r18, r1
    154e:	31 05       	cpc	r19, r1
    1550:	51 f0       	breq	.+20     	; 0x1566 <malloc+0xa0>
    1552:	42 17       	cp	r20, r18
    1554:	53 07       	cpc	r21, r19
    1556:	38 f0       	brcs	.+14     	; 0x1566 <malloc+0xa0>
    1558:	a9 01       	movw	r20, r18
    155a:	db 01       	movw	r26, r22
    155c:	9a 01       	movw	r18, r20
    155e:	bd 01       	movw	r22, r26
    1560:	df 01       	movw	r26, r30
    1562:	f8 01       	movw	r30, r16
    1564:	c1 cf       	rjmp	.-126    	; 0x14e8 <malloc+0x22>
    1566:	ef 01       	movw	r28, r30
    1568:	f9 cf       	rjmp	.-14     	; 0x155c <malloc+0x96>
    156a:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <__flp+0x1>
    156e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__flp>
    1572:	cd cf       	rjmp	.-102    	; 0x150e <malloc+0x48>
    1574:	fe 01       	movw	r30, r28
    1576:	e2 0f       	add	r30, r18
    1578:	f3 1f       	adc	r31, r19
    157a:	81 93       	st	Z+, r24
    157c:	91 93       	st	Z+, r25
    157e:	22 50       	subi	r18, 0x02	; 2
    1580:	31 09       	sbc	r19, r1
    1582:	39 83       	std	Y+1, r19	; 0x01
    1584:	28 83       	st	Y, r18
    1586:	d7 cf       	rjmp	.-82     	; 0x1536 <malloc+0x70>
    1588:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <__brkval>
    158c:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <__brkval+0x1>
    1590:	23 2b       	or	r18, r19
    1592:	41 f4       	brne	.+16     	; 0x15a4 <malloc+0xde>
    1594:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1598:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    159c:	30 93 bb 01 	sts	0x01BB, r19	; 0x8001bb <__brkval+0x1>
    15a0:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <__brkval>
    15a4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    15a8:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    15ac:	21 15       	cp	r18, r1
    15ae:	31 05       	cpc	r19, r1
    15b0:	41 f4       	brne	.+16     	; 0x15c2 <malloc+0xfc>
    15b2:	2d b7       	in	r18, 0x3d	; 61
    15b4:	3e b7       	in	r19, 0x3e	; 62
    15b6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    15ba:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    15be:	24 1b       	sub	r18, r20
    15c0:	35 0b       	sbc	r19, r21
    15c2:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <__brkval>
    15c6:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <__brkval+0x1>
    15ca:	e2 17       	cp	r30, r18
    15cc:	f3 07       	cpc	r31, r19
    15ce:	a0 f4       	brcc	.+40     	; 0x15f8 <malloc+0x132>
    15d0:	2e 1b       	sub	r18, r30
    15d2:	3f 0b       	sbc	r19, r31
    15d4:	28 17       	cp	r18, r24
    15d6:	39 07       	cpc	r19, r25
    15d8:	78 f0       	brcs	.+30     	; 0x15f8 <malloc+0x132>
    15da:	ac 01       	movw	r20, r24
    15dc:	4e 5f       	subi	r20, 0xFE	; 254
    15de:	5f 4f       	sbci	r21, 0xFF	; 255
    15e0:	24 17       	cp	r18, r20
    15e2:	35 07       	cpc	r19, r21
    15e4:	48 f0       	brcs	.+18     	; 0x15f8 <malloc+0x132>
    15e6:	4e 0f       	add	r20, r30
    15e8:	5f 1f       	adc	r21, r31
    15ea:	50 93 bb 01 	sts	0x01BB, r21	; 0x8001bb <__brkval+0x1>
    15ee:	40 93 ba 01 	sts	0x01BA, r20	; 0x8001ba <__brkval>
    15f2:	81 93       	st	Z+, r24
    15f4:	91 93       	st	Z+, r25
    15f6:	9f cf       	rjmp	.-194    	; 0x1536 <malloc+0x70>
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	e0 e0       	ldi	r30, 0x00	; 0
    15fc:	9c cf       	rjmp	.-200    	; 0x1536 <malloc+0x70>

000015fe <free>:
free():
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	e9 f0       	breq	.+58     	; 0x1640 <free+0x42>
    1606:	fc 01       	movw	r30, r24
    1608:	32 97       	sbiw	r30, 0x02	; 2
    160a:	13 82       	std	Z+3, r1	; 0x03
    160c:	12 82       	std	Z+2, r1	; 0x02
    160e:	a0 91 bc 01 	lds	r26, 0x01BC	; 0x8001bc <__flp>
    1612:	b0 91 bd 01 	lds	r27, 0x01BD	; 0x8001bd <__flp+0x1>
    1616:	ed 01       	movw	r28, r26
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	10 97       	sbiw	r26, 0x00	; 0
    161e:	a1 f4       	brne	.+40     	; 0x1648 <free+0x4a>
    1620:	20 81       	ld	r18, Z
    1622:	31 81       	ldd	r19, Z+1	; 0x01
    1624:	82 0f       	add	r24, r18
    1626:	93 1f       	adc	r25, r19
    1628:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <__brkval>
    162c:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <__brkval+0x1>
    1630:	28 17       	cp	r18, r24
    1632:	39 07       	cpc	r19, r25
    1634:	09 f0       	breq	.+2      	; 0x1638 <free+0x3a>
    1636:	61 c0       	rjmp	.+194    	; 0x16fa <free+0xfc>
    1638:	f0 93 bb 01 	sts	0x01BB, r31	; 0x8001bb <__brkval+0x1>
    163c:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <__brkval>
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	08 95       	ret
    1646:	ea 01       	movw	r28, r20
    1648:	ce 17       	cp	r28, r30
    164a:	df 07       	cpc	r29, r31
    164c:	e8 f5       	brcc	.+122    	; 0x16c8 <free+0xca>
    164e:	4a 81       	ldd	r20, Y+2	; 0x02
    1650:	5b 81       	ldd	r21, Y+3	; 0x03
    1652:	9e 01       	movw	r18, r28
    1654:	41 15       	cp	r20, r1
    1656:	51 05       	cpc	r21, r1
    1658:	b1 f7       	brne	.-20     	; 0x1646 <free+0x48>
    165a:	e9 01       	movw	r28, r18
    165c:	fb 83       	std	Y+3, r31	; 0x03
    165e:	ea 83       	std	Y+2, r30	; 0x02
    1660:	49 91       	ld	r20, Y+
    1662:	59 91       	ld	r21, Y+
    1664:	c4 0f       	add	r28, r20
    1666:	d5 1f       	adc	r29, r21
    1668:	ec 17       	cp	r30, r28
    166a:	fd 07       	cpc	r31, r29
    166c:	61 f4       	brne	.+24     	; 0x1686 <free+0x88>
    166e:	80 81       	ld	r24, Z
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	02 96       	adiw	r24, 0x02	; 2
    1674:	84 0f       	add	r24, r20
    1676:	95 1f       	adc	r25, r21
    1678:	e9 01       	movw	r28, r18
    167a:	99 83       	std	Y+1, r25	; 0x01
    167c:	88 83       	st	Y, r24
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	9b 83       	std	Y+3, r25	; 0x03
    1684:	8a 83       	std	Y+2, r24	; 0x02
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	e0 e0       	ldi	r30, 0x00	; 0
    168a:	12 96       	adiw	r26, 0x02	; 2
    168c:	8d 91       	ld	r24, X+
    168e:	9c 91       	ld	r25, X
    1690:	13 97       	sbiw	r26, 0x03	; 3
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	b9 f5       	brne	.+110    	; 0x1704 <free+0x106>
    1696:	2d 91       	ld	r18, X+
    1698:	3c 91       	ld	r19, X
    169a:	11 97       	sbiw	r26, 0x01	; 1
    169c:	cd 01       	movw	r24, r26
    169e:	02 96       	adiw	r24, 0x02	; 2
    16a0:	82 0f       	add	r24, r18
    16a2:	93 1f       	adc	r25, r19
    16a4:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <__brkval>
    16a8:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <__brkval+0x1>
    16ac:	28 17       	cp	r18, r24
    16ae:	39 07       	cpc	r19, r25
    16b0:	39 f6       	brne	.-114    	; 0x1640 <free+0x42>
    16b2:	30 97       	sbiw	r30, 0x00	; 0
    16b4:	51 f5       	brne	.+84     	; 0x170a <free+0x10c>
    16b6:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <__flp+0x1>
    16ba:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <__flp>
    16be:	b0 93 bb 01 	sts	0x01BB, r27	; 0x8001bb <__brkval+0x1>
    16c2:	a0 93 ba 01 	sts	0x01BA, r26	; 0x8001ba <__brkval>
    16c6:	bc cf       	rjmp	.-136    	; 0x1640 <free+0x42>
    16c8:	d3 83       	std	Z+3, r29	; 0x03
    16ca:	c2 83       	std	Z+2, r28	; 0x02
    16cc:	40 81       	ld	r20, Z
    16ce:	51 81       	ldd	r21, Z+1	; 0x01
    16d0:	84 0f       	add	r24, r20
    16d2:	95 1f       	adc	r25, r21
    16d4:	c8 17       	cp	r28, r24
    16d6:	d9 07       	cpc	r29, r25
    16d8:	61 f4       	brne	.+24     	; 0x16f2 <free+0xf4>
    16da:	4e 5f       	subi	r20, 0xFE	; 254
    16dc:	5f 4f       	sbci	r21, 0xFF	; 255
    16de:	88 81       	ld	r24, Y
    16e0:	99 81       	ldd	r25, Y+1	; 0x01
    16e2:	48 0f       	add	r20, r24
    16e4:	59 1f       	adc	r21, r25
    16e6:	51 83       	std	Z+1, r21	; 0x01
    16e8:	40 83       	st	Z, r20
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	9b 81       	ldd	r25, Y+3	; 0x03
    16ee:	93 83       	std	Z+3, r25	; 0x03
    16f0:	82 83       	std	Z+2, r24	; 0x02
    16f2:	21 15       	cp	r18, r1
    16f4:	31 05       	cpc	r19, r1
    16f6:	09 f0       	breq	.+2      	; 0x16fa <free+0xfc>
    16f8:	b0 cf       	rjmp	.-160    	; 0x165a <free+0x5c>
    16fa:	f0 93 bd 01 	sts	0x01BD, r31	; 0x8001bd <__flp+0x1>
    16fe:	e0 93 bc 01 	sts	0x01BC, r30	; 0x8001bc <__flp>
    1702:	9e cf       	rjmp	.-196    	; 0x1640 <free+0x42>
    1704:	fd 01       	movw	r30, r26
    1706:	dc 01       	movw	r26, r24
    1708:	c0 cf       	rjmp	.-128    	; 0x168a <free+0x8c>
    170a:	13 82       	std	Z+3, r1	; 0x03
    170c:	12 82       	std	Z+2, r1	; 0x02
    170e:	d7 cf       	rjmp	.-82     	; 0x16be <free+0xc0>

00001710 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1710:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    1712:	c3 e7       	ldi	r28, 0x73	; 115
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    1714:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    1716:	03 c0       	rjmp	.+6      	; 0x171e <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    1718:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    171a:	cf de       	rcall	.-610    	; 0x14ba <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    171c:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    171e:	c4 37       	cpi	r28, 0x74	; 116
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1720:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1722:	d1 f7       	brne	.-12     	; 0x1718 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1724:	f8 94       	cli

00001726 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1726:	ff cf       	rjmp	.-2      	; 0x1726 <__stop_program>
