
C:\Users\Lenovo\AppData\Local\Temp\arduino\sketches\4D3E4274E03FBF7B5CD045AEE4EDBFE7/sketch_sep8a.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	73 c0       	rjmp	.+230    	; 0xe8 <__dtors_end>
       2:	97 c0       	rjmp	.+302    	; 0x132 <__bad_interrupt>
       4:	96 c0       	rjmp	.+300    	; 0x132 <__bad_interrupt>
       6:	95 c0       	rjmp	.+298    	; 0x132 <__bad_interrupt>
       8:	94 c0       	rjmp	.+296    	; 0x132 <__bad_interrupt>
       a:	93 c0       	rjmp	.+294    	; 0x132 <__bad_interrupt>
       c:	92 c0       	rjmp	.+292    	; 0x132 <__bad_interrupt>
       e:	91 c0       	rjmp	.+290    	; 0x132 <__bad_interrupt>
      10:	90 c0       	rjmp	.+288    	; 0x132 <__bad_interrupt>
      12:	99 c3       	rjmp	.+1842   	; 0x746 <__vector_9>
      14:	8e c0       	rjmp	.+284    	; 0x132 <__bad_interrupt>
      16:	06 c4       	rjmp	.+2060   	; 0x824 <__vector_11>
      18:	e0 c3       	rjmp	.+1984   	; 0x7da <__vector_12>
      1a:	8b c0       	rjmp	.+278    	; 0x132 <__bad_interrupt>
      1c:	8a c0       	rjmp	.+276    	; 0x132 <__bad_interrupt>
      1e:	89 c0       	rjmp	.+274    	; 0x132 <__bad_interrupt>
      20:	88 c0       	rjmp	.+272    	; 0x132 <__bad_interrupt>
      22:	32 c4       	rjmp	.+2148   	; 0x888 <__vector_17>
      24:	86 c0       	rjmp	.+268    	; 0x132 <__bad_interrupt>
      26:	08 00       	.word	0x0008	; ????
      28:	00 00       	nop
      2a:	be 92       	st	-X, r11
      2c:	24 49       	sbci	r18, 0x94	; 148
      2e:	12 3e       	cpi	r17, 0xE2	; 226
      30:	ab aa       	std	Y+51, r10	; 0x33
      32:	aa 2a       	or	r10, r26
      34:	be cd       	rjmp	.-1156   	; 0xfffffbb2 <__eeprom_end+0xff7efbb2>
      36:	cc cc       	rjmp	.-1640   	; 0xfffff9d0 <__eeprom_end+0xff7ef9d0>
      38:	4c 3e       	cpi	r20, 0xEC	; 236
      3a:	00 00       	nop
      3c:	00 80       	ld	r0, Z
      3e:	be ab       	std	Y+54, r27	; 0x36
      40:	aa aa       	std	Y+50, r10	; 0x32
      42:	aa 3e       	cpi	r26, 0xEA	; 234
      44:	00 00       	nop
      46:	00 00       	nop
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	00 00       	nop
      50:	00 00       	nop
      52:	00 08       	sbc	r0, r0
      54:	41 78       	andi	r20, 0x81	; 129
      56:	d3 bb       	out	0x13, r29	; 19
      58:	43 87       	std	Z+11, r20	; 0x0b
      5a:	d1 13       	cpse	r29, r17
      5c:	3d 19       	sub	r19, r13
      5e:	0e 3c       	cpi	r16, 0xCE	; 206
      60:	c3 bd       	out	0x23, r28	; 35
      62:	42 82       	std	Z+2, r4	; 0x02
      64:	ad 2b       	or	r26, r29
      66:	3e 68       	ori	r19, 0x8E	; 142
      68:	ec 82       	std	Y+4, r14	; 0x04
      6a:	76 be       	out	0x36, r7	; 54
      6c:	d9 8f       	std	Y+25, r29	; 0x19
      6e:	e1 a9       	ldd	r30, Z+49	; 0x31
      70:	3e 4c       	sbci	r19, 0xCE	; 206
      72:	80 ef       	ldi	r24, 0xF0	; 240
      74:	ff be       	out	0x3f, r15	; 63
      76:	01 c4       	rjmp	.+2050   	; 0x87a <__vector_11+0x56>
      78:	ff 7f       	andi	r31, 0xFF	; 255
      7a:	3f 00       	.word	0x003f	; ????
      7c:	00 00       	nop
	...

00000080 <__trampolines_end>:
__trampolines_start():
      80:	00 00       	nop
      82:	00 00       	nop
      84:	37 00       	.word	0x0037	; ????
      86:	34 00       	.word	0x0034	; ????
      88:	31 00       	.word	0x0031	; ????

0000008a <port_to_input_PGM>:
      8a:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

00000094 <digital_pin_to_timer_PGM>:
	...
      9c:	00 04 05 07 00 00 00 00 00 00 00 00 00 00 00        ...............

000000ab <digital_pin_to_bit_mask_PGM>:
      ab:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      bb:	04 08 10 20 40 80 40                                ... @.@

000000c2 <port_to_output_PGM>:
      c2:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

000000cc <digital_pin_to_port_PGM>:
      cc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      dc:	03 03 03 03 02 02 03 00                             ........

000000e4 <__ctors_start>:
__ctors_start():
      e4:	4f 05       	cpc	r20, r15

000000e6 <__ctors_end>:
__dtors_start():
      e6:	82 07       	cpc	r24, r18

000000e8 <__dtors_end>:
__dtors_end():
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf e5       	ldi	r28, 0x5F	; 95
      ee:	d4 e0       	ldi	r29, 0x04	; 4
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      f4:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      f6:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      f8:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      fa:	e6 ef       	ldi	r30, 0xF6	; 246
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      fc:	f6 e1       	ldi	r31, 0x16	; 22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     100:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     102:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     104:	a2 3e       	cpi	r26, 0xE2	; 226
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     106:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>

0000010a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     10a:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     10c:	a2 ee       	ldi	r26, 0xE2	; 226
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     10e:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     114:	ac 31       	cpi	r26, 0x1C	; 28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     116:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>

0000011a <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     11a:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     11c:	c3 e7       	ldi	r28, 0x73	; 115
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     11e:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     120:	03 c0       	rjmp	.+6      	; 0x128 <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     122:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     124:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     126:	b0 d9       	rcall	.-3232   	; 0xfffff488 <__eeprom_end+0xff7ef488>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     128:	c2 37       	cpi	r28, 0x72	; 114
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     12a:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     12c:	d1 f7       	brne	.-12     	; 0x122 <__do_global_ctors+0x8>
     12e:	d3 d5       	rcall	.+2982   	; 0xcd6 <main>
     130:	d6 ca       	rjmp	.-2644   	; 0xfffff6de <__eeprom_end+0xff7ef6de>

00000132 <__bad_interrupt>:
__vector_1():
     132:	66 cf       	rjmp	.-308    	; 0x0 <__vectors>

00000134 <pinMode>:
pinMode():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	fc 01       	movw	r30, r24
     13c:	e5 55       	subi	r30, 0x55	; 85
     13e:	ff 4f       	sbci	r31, 0xFF	; 255
     140:	24 91       	lpm	r18, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     142:	84 53       	subi	r24, 0x34	; 52
     144:	9f 4f       	sbci	r25, 0xFF	; 255
     146:	fc 01       	movw	r30, r24
     148:	84 91       	lpm	r24, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     14a:	88 23       	and	r24, r24
     14c:	d1 f0       	breq	.+52     	; 0x182 <pinMode+0x4e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	88 0f       	add	r24, r24
     152:	99 1f       	adc	r25, r25
     154:	fc 01       	movw	r30, r24
     156:	e0 58       	subi	r30, 0x80	; 128
     158:	ff 4f       	sbci	r31, 0xFF	; 255
     15a:	a5 91       	lpm	r26, Z+
     15c:	b4 91       	lpm	r27, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     15e:	fc 01       	movw	r30, r24
     160:	ee 53       	subi	r30, 0x3E	; 62
     162:	ff 4f       	sbci	r31, 0xFF	; 255
     164:	c5 91       	lpm	r28, Z+
     166:	d4 91       	lpm	r29, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     168:	61 11       	cpse	r22, r1
     16a:	0e c0       	rjmp	.+28     	; 0x188 <pinMode+0x54>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     16c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     16e:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     170:	8c 91       	ld	r24, X
     172:	e2 2f       	mov	r30, r18
     174:	e0 95       	com	r30
     176:	8e 23       	and	r24, r30
     178:	8c 93       	st	X, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     17a:	28 81       	ld	r18, Y
     17c:	e2 23       	and	r30, r18
     17e:	e8 83       	st	Y, r30
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     180:	9f bf       	out	0x3f, r25	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     188:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     18a:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     18c:	ec 91       	ld	r30, X
     18e:	e2 2b       	or	r30, r18
     190:	ec 93       	st	X, r30
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     192:	8f bf       	out	0x3f, r24	; 63
     194:	f6 cf       	rjmp	.-20     	; 0x182 <pinMode+0x4e>

00000196 <micros>:
micros():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     196:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     198:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     19a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <timer0_overflow_count>
     19e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <timer0_overflow_count+0x1>
     1a2:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <timer0_overflow_count+0x2>
     1a6:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <timer0_overflow_count+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     1aa:	22 b7       	in	r18, 0x32	; 50
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     1ac:	08 b6       	in	r0, 0x38	; 56
     1ae:	00 fe       	sbrs	r0, 0
     1b0:	05 c0       	rjmp	.+10     	; 0x1bc <micros+0x26>
     1b2:	2f 3f       	cpi	r18, 0xFF	; 255
     1b4:	19 f0       	breq	.+6      	; 0x1bc <micros+0x26>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
     1b6:	01 96       	adiw	r24, 0x01	; 1
     1b8:	a1 1d       	adc	r26, r1
     1ba:	b1 1d       	adc	r27, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     1bc:	3f bf       	out	0x3f, r19	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     1be:	ba 2f       	mov	r27, r26
     1c0:	a9 2f       	mov	r26, r25
     1c2:	98 2f       	mov	r25, r24
     1c4:	88 27       	eor	r24, r24
     1c6:	bc 01       	movw	r22, r24
     1c8:	cd 01       	movw	r24, r26
     1ca:	62 0f       	add	r22, r18
     1cc:	71 1d       	adc	r23, r1
     1ce:	81 1d       	adc	r24, r1
     1d0:	91 1d       	adc	r25, r1
     1d2:	42 e0       	ldi	r20, 0x02	; 2
     1d4:	66 0f       	add	r22, r22
     1d6:	77 1f       	adc	r23, r23
     1d8:	88 1f       	adc	r24, r24
     1da:	99 1f       	adc	r25, r25
     1dc:	4a 95       	dec	r20
     1de:	d1 f7       	brne	.-12     	; 0x1d4 <micros+0x3e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     1e0:	08 95       	ret

000001e2 <delay>:
delay():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     1e2:	8f 92       	push	r8
     1e4:	9f 92       	push	r9
     1e6:	af 92       	push	r10
     1e8:	bf 92       	push	r11
     1ea:	cf 92       	push	r12
     1ec:	df 92       	push	r13
     1ee:	ef 92       	push	r14
     1f0:	ff 92       	push	r15
     1f2:	4b 01       	movw	r8, r22
     1f4:	5c 01       	movw	r10, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     1f6:	cf df       	rcall	.-98     	; 0x196 <micros>
     1f8:	6b 01       	movw	r12, r22
     1fa:	7c 01       	movw	r14, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     1fc:	cc df       	rcall	.-104    	; 0x196 <micros>
     1fe:	6c 19       	sub	r22, r12
     200:	7d 09       	sbc	r23, r13
     202:	8e 09       	sbc	r24, r14
     204:	9f 09       	sbc	r25, r15
     206:	68 3e       	cpi	r22, 0xE8	; 232
     208:	73 40       	sbci	r23, 0x03	; 3
     20a:	81 05       	cpc	r24, r1
     20c:	91 05       	cpc	r25, r1
     20e:	b0 f3       	brcs	.-20     	; 0x1fc <delay+0x1a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	82 1a       	sub	r8, r18
     214:	91 08       	sbc	r9, r1
     216:	a1 08       	sbc	r10, r1
     218:	b1 08       	sbc	r11, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     21a:	88 ee       	ldi	r24, 0xE8	; 232
     21c:	c8 0e       	add	r12, r24
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	d8 1e       	adc	r13, r24
     222:	e1 1c       	adc	r14, r1
     224:	f1 1c       	adc	r15, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     226:	81 14       	cp	r8, r1
     228:	91 04       	cpc	r9, r1
     22a:	a1 04       	cpc	r10, r1
     22c:	b1 04       	cpc	r11, r1
     22e:	31 f7       	brne	.-52     	; 0x1fc <delay+0x1a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	bf 90       	pop	r11
     23a:	af 90       	pop	r10
     23c:	9f 90       	pop	r9
     23e:	8f 90       	pop	r8
     240:	08 95       	ret

00000242 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     242:	af 92       	push	r10
     244:	bf 92       	push	r11
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	6c 01       	movw	r12, r24
     258:	7b 01       	movw	r14, r22
     25a:	8b 01       	movw	r16, r22
     25c:	04 0f       	add	r16, r20
     25e:	15 1f       	adc	r17, r21
     260:	eb 01       	movw	r28, r22
     262:	5e 01       	movw	r10, r28
     264:	ae 18       	sub	r10, r14
     266:	bf 08       	sbc	r11, r15
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     268:	c0 17       	cp	r28, r16
     26a:	d1 07       	cpc	r29, r17
     26c:	59 f0       	breq	.+22     	; 0x284 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     26e:	69 91       	ld	r22, Y+
     270:	d6 01       	movw	r26, r12
     272:	ed 91       	ld	r30, X+
     274:	fc 91       	ld	r31, X
     276:	01 90       	ld	r0, Z+
     278:	f0 81       	ld	r31, Z
     27a:	e0 2d       	mov	r30, r0
     27c:	c6 01       	movw	r24, r12
     27e:	09 95       	icall
     280:	89 2b       	or	r24, r25
     282:	79 f7       	brne	.-34     	; 0x262 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     284:	c5 01       	movw	r24, r10
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	ff 90       	pop	r15
     290:	ef 90       	pop	r14
     292:	df 90       	pop	r13
     294:	cf 90       	pop	r12
     296:	bf 90       	pop	r11
     298:	af 90       	pop	r10
     29a:	08 95       	ret

0000029c <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     29c:	fc 01       	movw	r30, r24
     29e:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     2a0:	44 8d       	ldd	r20, Z+28	; 0x1c
     2a2:	25 2f       	mov	r18, r21
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	84 2f       	mov	r24, r20
     2a8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     2aa:	82 1b       	sub	r24, r18
     2ac:	93 0b       	sbc	r25, r19
     2ae:	54 17       	cp	r21, r20
     2b0:	10 f0       	brcs	.+4      	; 0x2b6 <HardwareSerial::availableForWrite()+0x1a>
     2b2:	cf 96       	adiw	r24, 0x3f	; 63
     2b4:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     2b6:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     2b8:	08 95       	ret

000002ba <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     2ba:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     2bc:	91 8d       	ldd	r25, Z+25	; 0x19
     2be:	82 8d       	ldd	r24, Z+26	; 0x1a
     2c0:	98 17       	cp	r25, r24
     2c2:	61 f0       	breq	.+24     	; 0x2dc <HardwareSerial::read()+0x22>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     2c4:	a2 8d       	ldd	r26, Z+26	; 0x1a
     2c6:	ae 0f       	add	r26, r30
     2c8:	bf 2f       	mov	r27, r31
     2ca:	b1 1d       	adc	r27, r1
     2cc:	5d 96       	adiw	r26, 0x1d	; 29
     2ce:	8c 91       	ld	r24, X
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     2d0:	92 8d       	ldd	r25, Z+26	; 0x1a
     2d2:	9f 5f       	subi	r25, 0xFF	; 255
     2d4:	9f 73       	andi	r25, 0x3F	; 63
     2d6:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     2dc:	8f ef       	ldi	r24, 0xFF	; 255
     2de:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     2e0:	08 95       	ret

000002e2 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     2e2:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     2e4:	91 8d       	ldd	r25, Z+25	; 0x19
     2e6:	82 8d       	ldd	r24, Z+26	; 0x1a
     2e8:	98 17       	cp	r25, r24
     2ea:	31 f0       	breq	.+12     	; 0x2f8 <HardwareSerial::peek()+0x16>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     2ec:	82 8d       	ldd	r24, Z+26	; 0x1a
     2ee:	e8 0f       	add	r30, r24
     2f0:	f1 1d       	adc	r31, r1
     2f2:	85 8d       	ldd	r24, Z+29	; 0x1d
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     2f8:	8f ef       	ldi	r24, 0xFF	; 255
     2fa:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     2fc:	08 95       	ret

000002fe <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     2fe:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     300:	91 8d       	ldd	r25, Z+25	; 0x19
     302:	22 8d       	ldd	r18, Z+26	; 0x1a
     304:	89 2f       	mov	r24, r25
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	80 5c       	subi	r24, 0xC0	; 192
     30a:	9f 4f       	sbci	r25, 0xFF	; 255
     30c:	82 1b       	sub	r24, r18
     30e:	91 09       	sbc	r25, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     310:	8f 73       	andi	r24, 0x3F	; 63
     312:	99 27       	eor	r25, r25
     314:	08 95       	ret

00000316 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     316:	80 e4       	ldi	r24, 0x40	; 64
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	f1 df       	rcall	.-30     	; 0x2fe <HardwareSerial::available()>
     31c:	21 e0       	ldi	r18, 0x01	; 1
     31e:	89 2b       	or	r24, r25
     320:	09 f4       	brne	.+2      	; 0x324 <Serial0_available()+0xe>
     322:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     324:	82 2f       	mov	r24, r18
     326:	08 95       	ret

00000328 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	89 2b       	or	r24, r25
     32e:	19 f0       	breq	.+6      	; 0x336 <serialEventRun()+0xe>
     330:	f2 df       	rcall	.-28     	; 0x316 <Serial0_available()>
     332:	81 11       	cpse	r24, r1
     334:	65 ce       	rjmp	.-822    	; 0x0 <__vectors>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     336:	08 95       	ret

00000338 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     338:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     33a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     33c:	a8 0f       	add	r26, r24
     33e:	b9 2f       	mov	r27, r25
     340:	b1 1d       	adc	r27, r1
     342:	a3 5a       	subi	r26, 0xA3	; 163
     344:	bf 4f       	sbci	r27, 0xFF	; 255
     346:	2c 91       	ld	r18, X
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     348:	84 8d       	ldd	r24, Z+28	; 0x1c
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	8f 73       	andi	r24, 0x3F	; 63
     350:	99 27       	eor	r25, r25
     352:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     354:	a6 89       	ldd	r26, Z+22	; 0x16
     356:	b7 89       	ldd	r27, Z+23	; 0x17
     358:	2c 93       	st	X, r18
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:106
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     35a:	a0 89       	ldd	r26, Z+16	; 0x10
     35c:	b1 89       	ldd	r27, Z+17	; 0x11
     35e:	8c 91       	ld	r24, X
     360:	82 74       	andi	r24, 0x42	; 66
     362:	8c 93       	st	X, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     364:	93 8d       	ldd	r25, Z+27	; 0x1b
     366:	84 8d       	ldd	r24, Z+28	; 0x1c
     368:	98 13       	cpse	r25, r24
     36a:	06 c0       	rjmp	.+12     	; 0x378 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     36c:	02 88       	ldd	r0, Z+18	; 0x12
     36e:	f3 89       	ldd	r31, Z+19	; 0x13
     370:	e0 2d       	mov	r30, r0
     372:	80 81       	ld	r24, Z
     374:	8f 7d       	andi	r24, 0xDF	; 223
     376:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     378:	08 95       	ret

0000037a <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ec 01       	movw	r28, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     38c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     38e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     390:	98 13       	cpse	r25, r24
     392:	19 c0       	rjmp	.+50     	; 0x3c6 <HardwareSerial::write(unsigned char)+0x4c>
     394:	e8 89       	ldd	r30, Y+16	; 0x10
     396:	f9 89       	ldd	r31, Y+17	; 0x11
     398:	80 81       	ld	r24, Z
     39a:	85 ff       	sbrs	r24, 5
     39c:	14 c0       	rjmp	.+40     	; 0x3c6 <HardwareSerial::write(unsigned char)+0x4c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     39e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\lenovo\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3a0:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     3a2:	ee 89       	ldd	r30, Y+22	; 0x16
     3a4:	ff 89       	ldd	r31, Y+23	; 0x17
     3a6:	60 83       	st	Z, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:243
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
      #else
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     3a8:	e8 89       	ldd	r30, Y+16	; 0x10
     3aa:	f9 89       	ldd	r31, Y+17	; 0x11
     3ac:	80 81       	ld	r24, Z
     3ae:	82 74       	andi	r24, 0x42	; 66
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     3b0:	80 83       	st	Z, r24
__iRestore():
c:\users\lenovo\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3b2:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	08 95       	ret
     3c6:	f6 2e       	mov	r15, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     3c8:	0b 8d       	ldd	r16, Y+27	; 0x1b
     3ca:	10 e0       	ldi	r17, 0x00	; 0
     3cc:	0f 5f       	subi	r16, 0xFF	; 255
     3ce:	1f 4f       	sbci	r17, 0xFF	; 255
     3d0:	0f 73       	andi	r16, 0x3F	; 63
     3d2:	11 27       	eor	r17, r17
     3d4:	e0 2e       	mov	r14, r16
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     3d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3d8:	8e 11       	cpse	r24, r14
     3da:	0b c0       	rjmp	.+22     	; 0x3f2 <HardwareSerial::write(unsigned char)+0x78>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	07 fc       	sbrc	r0, 7
     3e0:	fa cf       	rjmp	.-12     	; 0x3d6 <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     3e2:	e8 89       	ldd	r30, Y+16	; 0x10
     3e4:	f9 89       	ldd	r31, Y+17	; 0x11
     3e6:	80 81       	ld	r24, Z
     3e8:	85 ff       	sbrs	r24, 5
     3ea:	f5 cf       	rjmp	.-22     	; 0x3d6 <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     3ec:	ce 01       	movw	r24, r28
     3ee:	a4 df       	rcall	.-184    	; 0x338 <HardwareSerial::_tx_udr_empty_irq()>
     3f0:	f2 cf       	rjmp	.-28     	; 0x3d6 <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     3f2:	eb 8d       	ldd	r30, Y+27	; 0x1b
     3f4:	ec 0f       	add	r30, r28
     3f6:	fd 2f       	mov	r31, r29
     3f8:	f1 1d       	adc	r31, r1
     3fa:	e3 5a       	subi	r30, 0xA3	; 163
     3fc:	ff 4f       	sbci	r31, 0xFF	; 255
     3fe:	f0 82       	st	Z, r15
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     400:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\lenovo\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     402:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     404:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     406:	ea 89       	ldd	r30, Y+18	; 0x12
     408:	fb 89       	ldd	r31, Y+19	; 0x13
     40a:	80 81       	ld	r24, Z
     40c:	80 62       	ori	r24, 0x20	; 32
     40e:	d0 cf       	rjmp	.-96     	; 0x3b0 <HardwareSerial::write(unsigned char)+0x36>

00000410 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	ec 01       	movw	r28, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     416:	88 8d       	ldd	r24, Y+24	; 0x18
     418:	88 23       	and	r24, r24
     41a:	b1 f0       	breq	.+44     	; 0x448 <HardwareSerial::flush()+0x38>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     41c:	aa 89       	ldd	r26, Y+18	; 0x12
     41e:	bb 89       	ldd	r27, Y+19	; 0x13
     420:	e8 89       	ldd	r30, Y+16	; 0x10
     422:	f9 89       	ldd	r31, Y+17	; 0x11
     424:	8c 91       	ld	r24, X
     426:	85 fd       	sbrc	r24, 5
     428:	03 c0       	rjmp	.+6      	; 0x430 <HardwareSerial::flush()+0x20>
     42a:	80 81       	ld	r24, Z
     42c:	86 fd       	sbrc	r24, 6
     42e:	0c c0       	rjmp	.+24     	; 0x448 <HardwareSerial::flush()+0x38>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	07 fc       	sbrc	r0, 7
     434:	f7 cf       	rjmp	.-18     	; 0x424 <HardwareSerial::flush()+0x14>
     436:	8c 91       	ld	r24, X
     438:	85 ff       	sbrs	r24, 5
     43a:	f2 cf       	rjmp	.-28     	; 0x420 <HardwareSerial::flush()+0x10>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     43c:	80 81       	ld	r24, Z
     43e:	85 ff       	sbrs	r24, 5
     440:	ed cf       	rjmp	.-38     	; 0x41c <HardwareSerial::flush()+0xc>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     442:	ce 01       	movw	r24, r28
     444:	79 df       	rcall	.-270    	; 0x338 <HardwareSerial::_tx_udr_empty_irq()>
     446:	ea cf       	rjmp	.-44     	; 0x41c <HardwareSerial::flush()+0xc>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <twi_stop>:
twi_stop():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     44e:	85 ed       	ldi	r24, 0xD5	; 213
     450:	86 bf       	out	0x36, r24	; 54
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     452:	06 b6       	in	r0, 0x36	; 54
     454:	04 fc       	sbrc	r0, 4
     456:	fd cf       	rjmp	.-6      	; 0x452 <twi_stop+0x4>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     458:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <twi_state>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:463
}
     45c:	08 95       	ret

0000045e <twi_transmit>:
twi_transmit():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     45e:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <twi_txBufferLength>
     462:	26 0f       	add	r18, r22
     464:	33 27       	eor	r19, r19
     466:	33 1f       	adc	r19, r19
     468:	21 32       	cpi	r18, 0x21	; 33
     46a:	31 05       	cpc	r19, r1
     46c:	ec f4       	brge	.+58     	; 0x4a8 <__stack+0x49>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     46e:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <twi_state>
     472:	fc 01       	movw	r30, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	24 30       	cpi	r18, 0x04	; 4
     47a:	69 f0       	breq	.+26     	; 0x496 <__stack+0x37>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:377
    return 2;
     47c:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     47e:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     480:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <twi_txBufferLength>
     484:	21 91       	ld	r18, Z+
     486:	ac 01       	movw	r20, r24
     488:	47 51       	subi	r20, 0x17	; 23
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	a4 0f       	add	r26, r20
     48e:	b5 2f       	mov	r27, r21
     490:	b1 1d       	adc	r27, r1
     492:	2c 93       	st	X, r18
     494:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     496:	86 17       	cp	r24, r22
     498:	98 f3       	brcs	.-26     	; 0x480 <__stack+0x21>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     49a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <twi_txBufferLength>
     49e:	68 0f       	add	r22, r24
     4a0:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <twi_txBufferLength>
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	08 95       	ret

000004ac <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:326
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     4ac:	08 95       	ret

000004ae <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:321
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	9f ef       	ldi	r25, 0xFF	; 255
     4b2:	08 95       	ret

000004b4 <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:307
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
     4b4:	8f ef       	ldi	r24, 0xFF	; 255
     4b6:	9f ef       	ldi	r25, 0xFF	; 255
     4b8:	08 95       	ret

000004ba <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     4ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <TwoWire::rxBufferIndex>
     4be:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:291
}
     4c0:	91 95       	neg	r25
     4c2:	81 95       	neg	r24
     4c4:	91 09       	sbc	r25, r1
     4c6:	08 95       	ret

000004c8 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:271

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	cb 01       	movw	r24, r22
     4ce:	ea 01       	movw	r28, r20
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:280
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     4d0:	64 2f       	mov	r22, r20
     4d2:	c5 df       	rcall	.-118    	; 0x45e <twi_transmit>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:283
  }
  return quantity;
}
     4d4:	ce 01       	movw	r24, r28
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:246

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	1f 92       	push	r1
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	69 83       	std	Y+1, r22	; 0x01
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:262
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	ce 01       	movw	r24, r28
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	b7 df       	rcall	.-146    	; 0x45e <twi_transmit>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:265
  }
  return 1;
}
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0f 90       	pop	r0
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	08 95       	ret

00000502 <Print::write(char const*) [clone .part.2] [clone .constprop.29]>:
_ZN5Print5writeEPKc.part.2.constprop.29():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     502:	fc 01       	movw	r30, r24
     504:	01 90       	ld	r0, Z+
     506:	00 20       	and	r0, r0
     508:	e9 f7       	brne	.-6      	; 0x504 <Print::write(char const*) [clone .part.2] [clone .constprop.29]+0x2>
     50a:	31 97       	sbiw	r30, 0x01	; 1
     50c:	af 01       	movw	r20, r30
     50e:	48 1b       	sub	r20, r24
     510:	59 0b       	sbc	r21, r25
     512:	bc 01       	movw	r22, r24
     514:	80 e4       	ldi	r24, 0x40	; 64
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	94 ce       	rjmp	.-728    	; 0x242 <Print::write(unsigned char const*, unsigned int)>

0000051a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]>:
_ZN5Print11printNumberEmh.constprop.24():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     51a:	8f 92       	push	r8
     51c:	9f 92       	push	r9
     51e:	af 92       	push	r10
     520:	bf 92       	push	r11
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	a1 97       	sbiw	r28, 0x21	; 33
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     53a:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     53c:	42 30       	cpi	r20, 0x02	; 2
     53e:	08 f4       	brcc	.+2      	; 0x542 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x28>
     540:	4a e0       	ldi	r20, 0x0A	; 10
     542:	8e 01       	movw	r16, r28
     544:	0f 5d       	subi	r16, 0xDF	; 223
     546:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
     548:	84 2e       	mov	r8, r20
     54a:	91 2c       	mov	r9, r1
     54c:	b1 2c       	mov	r11, r1
     54e:	a1 2c       	mov	r10, r1
     550:	a5 01       	movw	r20, r10
     552:	94 01       	movw	r18, r8
     554:	fe d5       	rcall	.+3068   	; 0x1152 <__udivmodsi4>
     556:	e6 2f       	mov	r30, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
     558:	b9 01       	movw	r22, r18
     55a:	ca 01       	movw	r24, r20
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     55c:	ea 30       	cpi	r30, 0x0A	; 10
     55e:	ec f4       	brge	.+58     	; 0x59a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x80>
     560:	e0 5d       	subi	r30, 0xD0	; 208
     562:	d8 01       	movw	r26, r16
     564:	ee 93       	st	-X, r30
     566:	8d 01       	movw	r16, r26
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
     568:	23 2b       	or	r18, r19
     56a:	24 2b       	or	r18, r20
     56c:	25 2b       	or	r18, r21
     56e:	81 f7       	brne	.-32     	; 0x550 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x36>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	80 e0       	ldi	r24, 0x00	; 0
write():
     574:	10 97       	sbiw	r26, 0x00	; 0
     576:	11 f0       	breq	.+4      	; 0x57c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x62>
     578:	cd 01       	movw	r24, r26
     57a:	c3 df       	rcall	.-122    	; 0x502 <Print::write(char const*) [clone .part.2] [clone .constprop.29]>
_ZN5Print11printNumberEmh.constprop.24():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
     57c:	a1 96       	adiw	r28, 0x21	; 33
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	f8 94       	cli
     582:	de bf       	out	0x3e, r29	; 62
     584:	0f be       	out	0x3f, r0	; 63
     586:	cd bf       	out	0x3d, r28	; 61
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	bf 90       	pop	r11
     592:	af 90       	pop	r10
     594:	9f 90       	pop	r9
     596:	8f 90       	pop	r8
     598:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     59a:	e9 5c       	subi	r30, 0xC9	; 201
     59c:	e2 cf       	rjmp	.-60     	; 0x562 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x48>

0000059e <Print::println(char const*) [clone .constprop.26]>:
_ZN5Print7printlnEPKc.constprop.26():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:138
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
write():
     5a2:	af df       	rcall	.-162    	; 0x502 <Print::write(char const*) [clone .part.2] [clone .constprop.29]>
     5a4:	ec 01       	movw	r28, r24
     5a6:	88 e7       	ldi	r24, 0x78	; 120
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	ab df       	rcall	.-170    	; 0x502 <Print::write(char const*) [clone .part.2] [clone .constprop.29]>
_ZN5Print7printlnEPKc.constprop.26():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:143
{
  size_t n = print(c);
  n += println();
  return n;
}
     5ac:	8c 0f       	add	r24, r28
     5ae:	9d 1f       	adc	r25, r29
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <Print::printFloat(double, unsigned char) [clone .constprop.19]>:
_ZN5Print10printFloatEdh.constprop.19():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:252
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
     5b6:	4f 92       	push	r4
     5b8:	5f 92       	push	r5
     5ba:	6f 92       	push	r6
     5bc:	7f 92       	push	r7
     5be:	8f 92       	push	r8
     5c0:	9f 92       	push	r9
     5c2:	af 92       	push	r10
     5c4:	bf 92       	push	r11
     5c6:	cf 92       	push	r12
     5c8:	df 92       	push	r13
     5ca:	ef 92       	push	r14
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	6b 01       	movw	r12, r22
     5d6:	7c 01       	movw	r14, r24
     5d8:	74 2e       	mov	r7, r20
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:256
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     5da:	ac 01       	movw	r20, r24
     5dc:	9b 01       	movw	r18, r22
     5de:	1d d7       	rcall	.+3642   	; 0x141a <__unordsf2>
     5e0:	88 23       	and	r24, r24
     5e2:	91 f0       	breq	.+36     	; 0x608 <Print::printFloat(double, unsigned char) [clone .constprop.19]+0x52>
write():
     5e4:	8b e7       	ldi	r24, 0x7B	; 123
     5e6:	90 e0       	ldi	r25, 0x00	; 0
_ZN5Print10printFloatEdh.constprop.19():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	cf 90       	pop	r12
     5f6:	bf 90       	pop	r11
     5f8:	af 90       	pop	r10
     5fa:	9f 90       	pop	r9
     5fc:	8f 90       	pop	r8
     5fe:	7f 90       	pop	r7
     600:	6f 90       	pop	r6
     602:	5f 90       	pop	r5
     604:	4f 90       	pop	r4
write():
     606:	7d cf       	rjmp	.-262    	; 0x502 <Print::write(char const*) [clone .part.2] [clone .constprop.29]>
_ZN5Print10printFloatEdh.constprop.19():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:257
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     608:	46 01       	movw	r8, r12
     60a:	57 01       	movw	r10, r14
     60c:	e8 94       	clt
     60e:	b7 f8       	bld	r11, 7
     610:	2f ef       	ldi	r18, 0xFF	; 255
     612:	3f ef       	ldi	r19, 0xFF	; 255
     614:	4f e7       	ldi	r20, 0x7F	; 127
     616:	5f e7       	ldi	r21, 0x7F	; 127
     618:	c5 01       	movw	r24, r10
     61a:	b4 01       	movw	r22, r8
     61c:	fe d6       	rcall	.+3580   	; 0x141a <__unordsf2>
     61e:	81 11       	cpse	r24, r1
     620:	0c c0       	rjmp	.+24     	; 0x63a <Print::printFloat(double, unsigned char) [clone .constprop.19]+0x84>
     622:	2f ef       	ldi	r18, 0xFF	; 255
     624:	3f ef       	ldi	r19, 0xFF	; 255
     626:	4f e7       	ldi	r20, 0x7F	; 127
     628:	5f e7       	ldi	r21, 0x7F	; 127
     62a:	c5 01       	movw	r24, r10
     62c:	b4 01       	movw	r22, r8
     62e:	78 d4       	rcall	.+2288   	; 0xf20 <__cmpsf2>
     630:	18 16       	cp	r1, r24
     632:	1c f4       	brge	.+6      	; 0x63a <Print::printFloat(double, unsigned char) [clone .constprop.19]+0x84>
write():
     634:	8f e7       	ldi	r24, 0x7F	; 127
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	d7 cf       	rjmp	.-82     	; 0x5e8 <Print::printFloat(double, unsigned char) [clone .constprop.19]+0x32>
_ZN5Print10printFloatEdh.constprop.19():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     63a:	2f ef       	ldi	r18, 0xFF	; 255
     63c:	3f ef       	ldi	r19, 0xFF	; 255
     63e:	4f e7       	ldi	r20, 0x7F	; 127
     640:	5f e4       	ldi	r21, 0x4F	; 79
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	a0 d6       	rcall	.+3392   	; 0x1388 <__gesf2>
     648:	18 16       	cp	r1, r24
     64a:	1c f4       	brge	.+6      	; 0x652 <Print::printFloat(double, unsigned char) [clone .constprop.19]+0x9c>
write():
     64c:	83 e8       	ldi	r24, 0x83	; 131
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	cb cf       	rjmp	.-106    	; 0x5e8 <Print::printFloat(double, unsigned char) [clone .constprop.19]+0x32>
_ZN5Print10printFloatEdh.constprop.19():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:259
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     652:	2f ef       	ldi	r18, 0xFF	; 255
     654:	3f ef       	ldi	r19, 0xFF	; 255
     656:	4f e7       	ldi	r20, 0x7F	; 127
     658:	5f ec       	ldi	r21, 0xCF	; 207
     65a:	c7 01       	movw	r24, r14
     65c:	b6 01       	movw	r22, r12
     65e:	60 d4       	rcall	.+2240   	; 0xf20 <__cmpsf2>
     660:	87 fd       	sbrc	r24, 7
     662:	f4 cf       	rjmp	.-24     	; 0x64c <Print::printFloat(double, unsigned char) [clone .constprop.19]+0x96>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	a9 01       	movw	r20, r18
     66a:	c7 01       	movw	r24, r14
     66c:	b6 01       	movw	r22, r12
     66e:	58 d4       	rcall	.+2224   	; 0xf20 <__cmpsf2>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     670:	10 e0       	ldi	r17, 0x00	; 0
     672:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
     674:	87 ff       	sbrs	r24, 7
     676:	09 c0       	rjmp	.+18     	; 0x68a <Print::printFloat(double, unsigned char) [clone .constprop.19]+0xd4>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     678:	6d e2       	ldi	r22, 0x2D	; 45
     67a:	80 e4       	ldi	r24, 0x40	; 64
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	7d de       	rcall	.-774    	; 0x37a <HardwareSerial::write(unsigned char)>
     680:	8c 01       	movw	r16, r24
_ZN5Print10printFloatEdh.constprop.19():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:265
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
     682:	f7 fa       	bst	r15, 7
     684:	f0 94       	com	r15
     686:	f7 f8       	bld	r15, 7
     688:	f0 94       	com	r15
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     68a:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
     694:	7c 16       	cp	r7, r28
     696:	39 f0       	breq	.+14     	; 0x6a6 <Print::printFloat(double, unsigned char) [clone .constprop.19]+0xf0>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	40 e2       	ldi	r20, 0x20	; 32
     69e:	51 e4       	ldi	r21, 0x41	; 65
     6a0:	df d5       	rcall	.+3006   	; 0x1260 <__divsf3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     6a2:	cf 5f       	subi	r28, 0xFF	; 255
     6a4:	f7 cf       	rjmp	.-18     	; 0x694 <Print::printFloat(double, unsigned char) [clone .constprop.19]+0xde>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
     6a6:	a7 01       	movw	r20, r14
     6a8:	96 01       	movw	r18, r12
     6aa:	76 d5       	rcall	.+2796   	; 0x1198 <__addsf3>
     6ac:	2b 01       	movw	r4, r22
     6ae:	3c 01       	movw	r6, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     6b0:	3f d6       	rcall	.+3198   	; 0x1330 <__fixunssfsi>
     6b2:	4b 01       	movw	r8, r22
     6b4:	5c 01       	movw	r10, r24
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     6b6:	4a e0       	ldi	r20, 0x0A	; 10
     6b8:	30 df       	rcall	.-416    	; 0x51a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]>
_ZN5Print10printFloatEdh.constprop.19():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     6ba:	7c 01       	movw	r14, r24
     6bc:	e0 0e       	add	r14, r16
     6be:	f1 1e       	adc	r15, r17
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     6c0:	cc 23       	and	r28, r28
     6c2:	81 f1       	breq	.+96     	; 0x724 <Print::printFloat(double, unsigned char) [clone .constprop.19]+0x16e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     6c4:	c5 01       	movw	r24, r10
     6c6:	b4 01       	movw	r22, r8
     6c8:	2f d4       	rcall	.+2142   	; 0xf28 <__floatunsisf>
     6ca:	9b 01       	movw	r18, r22
     6cc:	ac 01       	movw	r20, r24
     6ce:	c3 01       	movw	r24, r6
     6d0:	b2 01       	movw	r22, r4
     6d2:	61 d5       	rcall	.+2754   	; 0x1196 <__subsf3>
     6d4:	4b 01       	movw	r8, r22
     6d6:	5c 01       	movw	r10, r24
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     6d8:	6e e2       	ldi	r22, 0x2E	; 46
     6da:	80 e4       	ldi	r24, 0x40	; 64
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	4d de       	rcall	.-870    	; 0x37a <HardwareSerial::write(unsigned char)>
_ZN5Print10printFloatEdh.constprop.19():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:282
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     6e0:	e8 0e       	add	r14, r24
     6e2:	f9 1e       	adc	r15, r25
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     6e4:	c1 50       	subi	r28, 0x01	; 1
     6e6:	f0 f0       	brcs	.+60     	; 0x724 <Print::printFloat(double, unsigned char) [clone .constprop.19]+0x16e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e2       	ldi	r20, 0x20	; 32
     6ee:	51 e4       	ldi	r21, 0x41	; 65
     6f0:	c5 01       	movw	r24, r10
     6f2:	b4 01       	movw	r22, r8
     6f4:	7a d4       	rcall	.+2292   	; 0xfea <__mulsf3>
     6f6:	2b 01       	movw	r4, r22
     6f8:	3c 01       	movw	r6, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
     6fa:	1a d6       	rcall	.+3124   	; 0x1330 <__fixunssfsi>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
     6fc:	4b 01       	movw	r8, r22
     6fe:	b1 2c       	mov	r11, r1
     700:	a1 2c       	mov	r10, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     702:	4a e0       	ldi	r20, 0x0A	; 10
     704:	c5 01       	movw	r24, r10
     706:	b4 01       	movw	r22, r8
     708:	08 df       	rcall	.-496    	; 0x51a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]>
_ZN5Print10printFloatEdh.constprop.19():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:290
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
     70a:	e8 0e       	add	r14, r24
     70c:	f9 1e       	adc	r15, r25
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
     70e:	c5 01       	movw	r24, r10
     710:	b4 01       	movw	r22, r8
     712:	0a d4       	rcall	.+2068   	; 0xf28 <__floatunsisf>
     714:	9b 01       	movw	r18, r22
     716:	ac 01       	movw	r20, r24
     718:	c3 01       	movw	r24, r6
     71a:	b2 01       	movw	r22, r4
     71c:	3c d5       	rcall	.+2680   	; 0x1196 <__subsf3>
     71e:	4b 01       	movw	r8, r22
     720:	5c 01       	movw	r10, r24
     722:	e0 cf       	rjmp	.-64     	; 0x6e4 <Print::printFloat(double, unsigned char) [clone .constprop.19]+0x12e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
     724:	c7 01       	movw	r24, r14
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	bf 90       	pop	r11
     736:	af 90       	pop	r10
     738:	9f 90       	pop	r9
     73a:	8f 90       	pop	r8
     73c:	7f 90       	pop	r7
     73e:	6f 90       	pop	r6
     740:	5f 90       	pop	r5
     742:	4f 90       	pop	r4
     744:	08 95       	ret

00000746 <__vector_9>:
__vector_9():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	2f 93       	push	r18
     752:	3f 93       	push	r19
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	af 93       	push	r26
     75a:	bf 93       	push	r27
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     75c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <timer0_millis>
     760:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <timer0_millis+0x1>
     764:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <timer0_millis+0x2>
     768:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <timer0_millis+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     76c:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <timer0_fract>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     770:	23 e0       	ldi	r18, 0x03	; 3
     772:	23 0f       	add	r18, r19
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     774:	2d 37       	cpi	r18, 0x7D	; 125
     776:	68 f1       	brcs	.+90     	; 0x7d2 <__vector_9+0x8c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     778:	26 e8       	ldi	r18, 0x86	; 134
     77a:	23 0f       	add	r18, r19
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     77c:	02 96       	adiw	r24, 0x02	; 2
     77e:	a1 1d       	adc	r26, r1
     780:	b1 1d       	adc	r27, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     782:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <timer0_fract>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     786:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timer0_millis>
     78a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timer0_millis+0x1>
     78e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timer0_millis+0x2>
     792:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timer0_millis+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     796:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <timer0_overflow_count>
     79a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <timer0_overflow_count+0x1>
     79e:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <timer0_overflow_count+0x2>
     7a2:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <timer0_overflow_count+0x3>
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	a1 1d       	adc	r26, r1
     7aa:	b1 1d       	adc	r27, r1
     7ac:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timer0_overflow_count>
     7b0:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timer0_overflow_count+0x1>
     7b4:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <timer0_overflow_count+0x2>
     7b8:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <timer0_overflow_count+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     7bc:	bf 91       	pop	r27
     7be:	af 91       	pop	r26
     7c0:	9f 91       	pop	r25
     7c2:	8f 91       	pop	r24
     7c4:	3f 91       	pop	r19
     7c6:	2f 91       	pop	r18
     7c8:	0f 90       	pop	r0
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	0f 90       	pop	r0
     7ce:	1f 90       	pop	r1
     7d0:	18 95       	reti
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	a1 1d       	adc	r26, r1
     7d6:	b1 1d       	adc	r27, r1
     7d8:	d4 cf       	rjmp	.-88     	; 0x782 <__vector_9+0x3c>

000007da <__vector_12>:
__vector_12():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	2f 93       	push	r18
     7e6:	3f 93       	push	r19
     7e8:	4f 93       	push	r20
     7ea:	5f 93       	push	r21
     7ec:	6f 93       	push	r22
     7ee:	7f 93       	push	r23
     7f0:	8f 93       	push	r24
     7f2:	9f 93       	push	r25
     7f4:	af 93       	push	r26
     7f6:	bf 93       	push	r27
     7f8:	ef 93       	push	r30
     7fa:	ff 93       	push	r31
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     7fc:	80 e4       	ldi	r24, 0x40	; 64
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	9b dd       	rcall	.-1226   	; 0x338 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     802:	ff 91       	pop	r31
     804:	ef 91       	pop	r30
     806:	bf 91       	pop	r27
     808:	af 91       	pop	r26
     80a:	9f 91       	pop	r25
     80c:	8f 91       	pop	r24
     80e:	7f 91       	pop	r23
     810:	6f 91       	pop	r22
     812:	5f 91       	pop	r21
     814:	4f 91       	pop	r20
     816:	3f 91       	pop	r19
     818:	2f 91       	pop	r18
     81a:	0f 90       	pop	r0
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	0f 90       	pop	r0
     820:	1f 90       	pop	r1
     822:	18 95       	reti

00000824 <__vector_11>:
__vector_11():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     824:	1f 92       	push	r1
     826:	0f 92       	push	r0
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	0f 92       	push	r0
     82c:	11 24       	eor	r1, r1
     82e:	2f 93       	push	r18
     830:	8f 93       	push	r24
     832:	9f 93       	push	r25
     834:	ef 93       	push	r30
     836:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     838:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Serial+0x10>
     83c:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Serial+0x11>
     840:	80 81       	ld	r24, Z
     842:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Serial+0x16>
     846:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Serial+0x17>
     84a:	82 fd       	sbrc	r24, 2
     84c:	1b c0       	rjmp	.+54     	; 0x884 <__vector_11+0x60>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     84e:	90 81       	ld	r25, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     850:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <Serial+0x19>
     854:	8f 5f       	subi	r24, 0xFF	; 255
     856:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     858:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <Serial+0x1a>
     85c:	82 17       	cp	r24, r18
     85e:	41 f0       	breq	.+16     	; 0x870 <__vector_11+0x4c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     860:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <Serial+0x19>
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	e0 5c       	subi	r30, 0xC0	; 192
     868:	fe 4f       	sbci	r31, 0xFE	; 254
     86a:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     86c:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <Serial+0x19>
__vector_11():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     870:	ff 91       	pop	r31
     872:	ef 91       	pop	r30
     874:	9f 91       	pop	r25
     876:	8f 91       	pop	r24
     878:	2f 91       	pop	r18
     87a:	0f 90       	pop	r0
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	0f 90       	pop	r0
     880:	1f 90       	pop	r1
     882:	18 95       	reti
_rx_complete_irq():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     884:	80 81       	ld	r24, Z
     886:	f4 cf       	rjmp	.-24     	; 0x870 <__vector_11+0x4c>

00000888 <__vector_17>:
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
     888:	1f 92       	push	r1
     88a:	0f 92       	push	r0
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	0f 92       	push	r0
     890:	11 24       	eor	r1, r1
     892:	2f 93       	push	r18
     894:	3f 93       	push	r19
     896:	4f 93       	push	r20
     898:	5f 93       	push	r21
     89a:	6f 93       	push	r22
     89c:	7f 93       	push	r23
     89e:	8f 93       	push	r24
     8a0:	9f 93       	push	r25
     8a2:	af 93       	push	r26
     8a4:	bf 93       	push	r27
     8a6:	ef 93       	push	r30
     8a8:	ff 93       	push	r31
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  switch(TW_STATUS){
     8aa:	81 b1       	in	r24, 0x01	; 1
     8ac:	88 7f       	andi	r24, 0xF8	; 248
     8ae:	80 36       	cpi	r24, 0x60	; 96
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <__vector_17+0x2c>
     8b2:	49 c0       	rjmp	.+146    	; 0x946 <__vector_17+0xbe>
     8b4:	e8 f5       	brcc	.+122    	; 0x930 <__vector_17+0xa8>
     8b6:	88 32       	cpi	r24, 0x28	; 40
     8b8:	09 f4       	brne	.+2      	; 0x8bc <__vector_17+0x34>
     8ba:	a0 c0       	rjmp	.+320    	; 0x9fc <__vector_17+0x174>
     8bc:	18 f5       	brcc	.+70     	; 0x904 <__vector_17+0x7c>
     8be:	80 31       	cpi	r24, 0x10	; 16
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <__vector_17+0x3c>
     8c2:	96 c0       	rjmp	.+300    	; 0x9f0 <__vector_17+0x168>
     8c4:	b8 f4       	brcc	.+46     	; 0x8f4 <__vector_17+0x6c>
     8c6:	88 23       	and	r24, r24
     8c8:	09 f4       	brne	.+2      	; 0x8cc <__vector_17+0x44>
     8ca:	e6 c0       	rjmp	.+460    	; 0xa98 <__vector_17+0x210>
     8cc:	88 30       	cpi	r24, 0x08	; 8
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <__vector_17+0x4a>
     8d0:	8f c0       	rjmp	.+286    	; 0x9f0 <__vector_17+0x168>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     8d2:	ff 91       	pop	r31
     8d4:	ef 91       	pop	r30
     8d6:	bf 91       	pop	r27
     8d8:	af 91       	pop	r26
     8da:	9f 91       	pop	r25
     8dc:	8f 91       	pop	r24
     8de:	7f 91       	pop	r23
     8e0:	6f 91       	pop	r22
     8e2:	5f 91       	pop	r21
     8e4:	4f 91       	pop	r20
     8e6:	3f 91       	pop	r19
     8e8:	2f 91       	pop	r18
     8ea:	0f 90       	pop	r0
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	0f 90       	pop	r0
     8f0:	1f 90       	pop	r1
     8f2:	18 95       	reti
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     8f4:	88 31       	cpi	r24, 0x18	; 24
     8f6:	09 f4       	brne	.+2      	; 0x8fa <__vector_17+0x72>
     8f8:	81 c0       	rjmp	.+258    	; 0x9fc <__vector_17+0x174>
     8fa:	80 32       	cpi	r24, 0x20	; 32
     8fc:	51 f7       	brne	.-44     	; 0x8d2 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     8fe:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <twi_error>
     902:	14 c0       	rjmp	.+40     	; 0x92c <__vector_17+0xa4>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	09 f4       	brne	.+2      	; 0x90a <__vector_17+0x82>
     908:	91 c0       	rjmp	.+290    	; 0xa2c <__vector_17+0x1a4>
     90a:	40 f4       	brcc	.+16     	; 0x91c <__vector_17+0x94>
     90c:	80 33       	cpi	r24, 0x30	; 48
     90e:	b9 f3       	breq	.-18     	; 0x8fe <__vector_17+0x76>
     910:	88 33       	cpi	r24, 0x38	; 56
     912:	f9 f6       	brne	.-66     	; 0x8d2 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     914:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <twi_error>
twi_reply():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     918:	85 ec       	ldi	r24, 0xC5	; 197
     91a:	a1 c0       	rjmp	.+322    	; 0xa5e <__vector_17+0x1d6>
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     91c:	80 35       	cpi	r24, 0x50	; 80
     91e:	09 f4       	brne	.+2      	; 0x922 <__vector_17+0x9a>
     920:	7c c0       	rjmp	.+248    	; 0xa1a <__vector_17+0x192>
     922:	88 35       	cpi	r24, 0x58	; 88
     924:	09 f4       	brne	.+2      	; 0x928 <__vector_17+0xa0>
     926:	8a c0       	rjmp	.+276    	; 0xa3c <__vector_17+0x1b4>
     928:	88 34       	cpi	r24, 0x48	; 72
     92a:	99 f6       	brne	.-90     	; 0x8d2 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
     92c:	90 dd       	rcall	.-1248   	; 0x44e <twi_stop>
     92e:	d1 cf       	rjmp	.-94     	; 0x8d2 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     930:	88 39       	cpi	r24, 0x98	; 152
     932:	09 f4       	brne	.+2      	; 0x936 <__vector_17+0xae>
     934:	81 c0       	rjmp	.+258    	; 0xa38 <__vector_17+0x1b0>
     936:	30 f5       	brcc	.+76     	; 0x984 <__vector_17+0xfc>
     938:	88 37       	cpi	r24, 0x78	; 120
     93a:	29 f0       	breq	.+10     	; 0x946 <__vector_17+0xbe>
     93c:	50 f4       	brcc	.+20     	; 0x952 <__vector_17+0xca>
     93e:	88 36       	cpi	r24, 0x68	; 104
     940:	11 f0       	breq	.+4      	; 0x946 <__vector_17+0xbe>
     942:	80 37       	cpi	r24, 0x70	; 112
     944:	31 f6       	brne	.-116    	; 0x8d2 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <twi_state>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     94c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <twi_rxBufferIndex>
     950:	52 c0       	rjmp	.+164    	; 0x9f6 <__vector_17+0x16e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     952:	88 38       	cpi	r24, 0x88	; 136
     954:	09 f4       	brne	.+2      	; 0x958 <__vector_17+0xd0>
     956:	70 c0       	rjmp	.+224    	; 0xa38 <__vector_17+0x1b0>
     958:	80 39       	cpi	r24, 0x90	; 144
     95a:	19 f0       	breq	.+6      	; 0x962 <__vector_17+0xda>
     95c:	80 38       	cpi	r24, 0x80	; 128
     95e:	09 f0       	breq	.+2      	; 0x962 <__vector_17+0xda>
     960:	b8 cf       	rjmp	.-144    	; 0x8d2 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
     962:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <twi_rxBufferIndex>
     966:	80 32       	cpi	r24, 0x20	; 32
     968:	08 f0       	brcs	.+2      	; 0x96c <__vector_17+0xe4>
     96a:	66 c0       	rjmp	.+204    	; 0xa38 <__vector_17+0x1b0>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     96c:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <twi_rxBufferIndex>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	8e 0f       	add	r24, r30
     974:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <twi_rxBufferIndex>
     978:	83 b1       	in	r24, 0x03	; 3
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	e5 5f       	subi	r30, 0xF5	; 245
     97e:	fe 4f       	sbci	r31, 0xFE	; 254
     980:	80 83       	st	Z, r24
     982:	39 c0       	rjmp	.+114    	; 0x9f6 <__vector_17+0x16e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     984:	80 3b       	cpi	r24, 0xB0	; 176
     986:	39 f0       	breq	.+14     	; 0x996 <__vector_17+0x10e>
     988:	d0 f4       	brcc	.+52     	; 0x9be <__vector_17+0x136>
     98a:	80 3a       	cpi	r24, 0xA0	; 160
     98c:	09 f4       	brne	.+2      	; 0x990 <__vector_17+0x108>
     98e:	6b c0       	rjmp	.+214    	; 0xa66 <__vector_17+0x1de>
     990:	88 3a       	cpi	r24, 0xA8	; 168
     992:	09 f0       	breq	.+2      	; 0x996 <__vector_17+0x10e>
     994:	9e cf       	rjmp	.-196    	; 0x8d2 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <twi_state>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     99c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <twi_txBufferIndex>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     9a0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <twi_txBufferLength>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	e0 e0       	ldi	r30, 0x00	; 0
     9a8:	09 95       	icall
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     9aa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <twi_txBufferLength>
     9ae:	81 11       	cpse	r24, r1
     9b0:	0f c0       	rjmp	.+30     	; 0x9d0 <__vector_17+0x148>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:665
        twi_txBufferLength = 1;
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <twi_txBufferLength>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:666
        twi_txBuffer[0] = 0x00;
     9b8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <twi_txBuffer>
     9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <__vector_17+0x148>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     9be:	80 3c       	cpi	r24, 0xC0	; 192
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <__vector_17+0x13c>
     9c2:	aa cf       	rjmp	.-172    	; 0x918 <__vector_17+0x90>
     9c4:	88 3c       	cpi	r24, 0xC8	; 200
     9c6:	09 f4       	brne	.+2      	; 0x9ca <__vector_17+0x142>
     9c8:	a7 cf       	rjmp	.-178    	; 0x918 <__vector_17+0x90>
     9ca:	88 3b       	cpi	r24, 0xB8	; 184
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <__vector_17+0x148>
     9ce:	81 cf       	rjmp	.-254    	; 0x8d2 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     9d0:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <twi_txBufferIndex>
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	8e 0f       	add	r24, r30
     9d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <twi_txBufferIndex>
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	e7 51       	subi	r30, 0x17	; 23
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	80 81       	ld	r24, Z
     9e4:	83 b9       	out	0x03, r24	; 3
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     9e6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <twi_txBufferIndex>
     9ea:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <twi_txBufferLength>
     9ee:	22 c0       	rjmp	.+68     	; 0xa34 <__vector_17+0x1ac>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     9f0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <twi_slarw>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     9f4:	83 b9       	out	0x03, r24	; 3
twi_reply():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     9f6:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     9f8:	86 bf       	out	0x36, r24	; 54
     9fa:	6b cf       	rjmp	.-298    	; 0x8d2 <__vector_17+0x4a>
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
     9fc:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <twi_masterBufferIndex>
     a00:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <twi_masterBufferLength>
     a04:	98 17       	cp	r25, r24
     a06:	18 f5       	brcc	.+70     	; 0xa4e <__vector_17+0x1c6>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     a08:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <twi_masterBufferIndex>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	8e 0f       	add	r24, r30
     a10:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <twi_masterBufferIndex>
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	ed cf       	rjmp	.-38     	; 0x9f4 <__vector_17+0x16c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     a1a:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <twi_masterBufferIndex>
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	8e 0f       	add	r24, r30
     a22:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <twi_masterBufferIndex>
     a26:	83 b1       	in	r24, 0x03	; 3
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     a2c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <twi_masterBufferIndex>
     a30:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <twi_masterBufferLength>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     a34:	98 17       	cp	r25, r24
     a36:	f8 f2       	brcs	.-66     	; 0x9f6 <__vector_17+0x16e>
twi_reply():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     a38:	85 e8       	ldi	r24, 0x85	; 133
     a3a:	de cf       	rjmp	.-68     	; 0x9f8 <__vector_17+0x170>
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     a3c:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <twi_masterBufferIndex>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	8e 0f       	add	r24, r30
     a44:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <twi_masterBufferIndex>
     a48:	83 b1       	in	r24, 0x03	; 3
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:594
  if (twi_sendStop)
     a4e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <twi_sendStop>
     a52:	81 11       	cpse	r24, r1
     a54:	6b cf       	rjmp	.-298    	; 0x92c <__vector_17+0xa4>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <twi_inRepStart>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     a5c:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     a5e:	86 bf       	out	0x36, r24	; 54
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     a60:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <twi_state>
     a64:	36 cf       	rjmp	.-404    	; 0x8d2 <__vector_17+0x4a>
twi_releaseBus():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     a66:	85 ec       	ldi	r24, 0xC5	; 197
     a68:	86 bf       	out	0x36, r24	; 54
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
     a6a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <twi_state>
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:637
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
     a6e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <twi_rxBufferIndex>
     a72:	80 32       	cpi	r24, 0x20	; 32
     a74:	30 f4       	brcc	.+12     	; 0xa82 <__vector_17+0x1fa>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     a76:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <twi_rxBufferIndex>
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	e5 5f       	subi	r30, 0xF5	; 245
     a7e:	fe 4f       	sbci	r31, 0xFE	; 254
     a80:	10 82       	st	Z, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     a82:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <twi_rxBufferIndex>
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	8b e0       	ldi	r24, 0x0B	; 11
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	e0 e0       	ldi	r30, 0x00	; 0
     a90:	09 95       	icall
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     a92:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <twi_rxBufferIndex>
     a96:	1d cf       	rjmp	.-454    	; 0x8d2 <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     a98:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <twi_error>
     a9c:	47 cf       	rjmp	.-370    	; 0x92c <__vector_17+0xa4>

00000a9e <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518>:
_GLOBAL__I_65535_0_sketch_sep8a.ino.cpp.o.2518():
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <Serial+0x3>
     aaa:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <Serial+0x2>
     aae:	88 ee       	ldi	r24, 0xE8	; 232
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	a0 e0       	ldi	r26, 0x00	; 0
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <Serial+0x4>
     aba:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <Serial+0x5>
     abe:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <Serial+0x6>
     ac2:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <Serial+0x7>
     ac6:	8a e6       	ldi	r24, 0x6A	; 106
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <Serial+0x1>
     ace:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <Serial>
     ad2:	80 e4       	ldi	r24, 0x40	; 64
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <Serial+0xd>
     ada:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <Serial+0xc>
     ade:	29 e2       	ldi	r18, 0x29	; 41
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	30 93 4f 01 	sts	0x014F, r19	; 0x80014f <Serial+0xf>
     ae6:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <Serial+0xe>
     aea:	2b e2       	ldi	r18, 0x2B	; 43
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <Serial+0x11>
     af2:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <Serial+0x10>
     af6:	2a e2       	ldi	r18, 0x2A	; 42
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <Serial+0x13>
     afe:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <Serial+0x12>
     b02:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <Serial+0x15>
     b06:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <Serial+0x14>
     b0a:	8c e2       	ldi	r24, 0x2C	; 44
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <Serial+0x17>
     b12:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <Serial+0x16>
     b16:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <Serial+0x19>
     b1a:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <Serial+0x1a>
     b1e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <Serial+0x1b>
     b22:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <Serial+0x1c>
     b26:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <pixels+0x1>
     b2a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <pixels+0x8>
     b2e:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <pixels+0xf>
     b32:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <pixels+0x10>
     b36:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <pixels+0x11>
     b3a:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <pixels+0x12>
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <pixels+0xe>
     b44:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <pixels+0xb>
     b48:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <pixels+0xc>
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <pixels+0xd>
     b52:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <pixels>
     b56:	c8 e6       	ldi	r28, 0x68	; 104
     b58:	d1 e0       	ldi	r29, 0x01	; 1
     b5a:	d0 93 07 02 	sts	0x0207, r29	; 0x800207 <pixels+0x5>
     b5e:	c0 93 06 02 	sts	0x0206, r28	; 0x800206 <pixels+0x4>
     b62:	88 e6       	ldi	r24, 0x68	; 104
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	96 d4       	rcall	.+2348   	; 0x1494 <malloc>
     b68:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <pixels+0xa>
     b6c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <pixels+0x9>
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	09 f4       	brne	.+2      	; 0xb76 <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0xd8>
     b74:	a0 c0       	rjmp	.+320    	; 0xcb6 <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0x218>
     b76:	fc 01       	movw	r30, r24
     b78:	9e 01       	movw	r18, r28
     b7a:	11 92       	st	Z+, r1
     b7c:	21 50       	subi	r18, 0x01	; 1
     b7e:	30 40       	sbci	r19, 0x00	; 0
     b80:	e1 f7       	brne	.-8      	; 0xb7a <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0xdc>
     b82:	88 e7       	ldi	r24, 0x78	; 120
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <pixels+0x3>
     b8a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <pixels+0x2>
     b8e:	8d e0       	ldi	r24, 0x0D	; 13
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <pixels+0x7>
     b96:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <pixels+0x6>
     b9a:	08 eb       	ldi	r16, 0xB8	; 184
     b9c:	10 e0       	ldi	r17, 0x00	; 0
     b9e:	c9 ed       	ldi	r28, 0xD9	; 217
     ba0:	d0 e0       	ldi	r29, 0x00	; 0
     ba2:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <pixels+0x1>
     ba6:	88 23       	and	r24, r24
     ba8:	41 f1       	breq	.+80     	; 0xbfa <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0x15c>
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	8d e0       	ldi	r24, 0x0D	; 13
     bae:	c2 da       	rcall	.-2684   	; 0x134 <pinMode>
     bb0:	e1 ea       	ldi	r30, 0xA1	; 161
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	84 91       	lpm	r24, Z
     bb6:	f8 01       	movw	r30, r16
     bb8:	94 91       	lpm	r25, Z
     bba:	fe 01       	movw	r30, r28
     bbc:	24 91       	lpm	r18, Z
     bbe:	22 23       	and	r18, r18
     bc0:	e1 f0       	breq	.+56     	; 0xbfa <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0x15c>
     bc2:	88 23       	and	r24, r24
     bc4:	59 f0       	breq	.+22     	; 0xbdc <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0x13e>
     bc6:	85 30       	cpi	r24, 0x05	; 5
     bc8:	09 f4       	brne	.+2      	; 0xbcc <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0x12e>
     bca:	7e c0       	rjmp	.+252    	; 0xcc8 <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0x22a>
     bcc:	87 30       	cpi	r24, 0x07	; 7
     bce:	09 f4       	brne	.+2      	; 0xbd2 <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0x134>
     bd0:	7e c0       	rjmp	.+252    	; 0xcce <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0x230>
     bd2:	84 30       	cpi	r24, 0x04	; 4
     bd4:	19 f4       	brne	.+6      	; 0xbdc <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0x13e>
     bd6:	8f b5       	in	r24, 0x2f	; 47
     bd8:	8f 77       	andi	r24, 0x7F	; 127
     bda:	8f bd       	out	0x2f, r24	; 47
     bdc:	e2 2f       	mov	r30, r18
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	ee 53       	subi	r30, 0x3E	; 62
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	a5 91       	lpm	r26, Z+
     bea:	b4 91       	lpm	r27, Z
     bec:	8f b7       	in	r24, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	2c 91       	ld	r18, X
     bf2:	90 95       	com	r25
     bf4:	92 23       	and	r25, r18
     bf6:	9c 93       	st	X, r25
     bf8:	8f bf       	out	0x3f, r24	; 63
     bfa:	fe 01       	movw	r30, r28
     bfc:	84 91       	lpm	r24, Z
     bfe:	e8 2f       	mov	r30, r24
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	ee 53       	subi	r30, 0x3E	; 62
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	85 91       	lpm	r24, Z+
     c0c:	94 91       	lpm	r25, Z
     c0e:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <pixels+0x14>
     c12:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <pixels+0x13>
     c16:	f8 01       	movw	r30, r16
     c18:	84 91       	lpm	r24, Z
     c1a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <pixels+0x15>
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	8d e0       	ldi	r24, 0x0D	; 13
     c22:	88 da       	rcall	.-2800   	; 0x134 <pinMode>
     c24:	f8 01       	movw	r30, r16
     c26:	04 91       	lpm	r16, Z
     c28:	00 93 f4 01 	sts	0x01F4, r16	; 0x8001f4 <oneWire>
     c2c:	fe 01       	movw	r30, r28
     c2e:	c4 91       	lpm	r28, Z
     c30:	ec 2f       	mov	r30, r28
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	e6 57       	subi	r30, 0x76	; 118
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	85 91       	lpm	r24, Z+
     c3e:	94 91       	lpm	r25, Z
     c40:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <oneWire+0x2>
     c44:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <oneWire+0x1>
     c48:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <oneWire+0xb>
     c4c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <oneWire+0xd>
     c50:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <oneWire+0xc>
     c54:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <oneWire+0xa>
     c58:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <oneWire+0x9>
     c5c:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <oneWire+0x8>
     c60:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <oneWire+0x7>
     c64:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <oneWire+0x6>
     c68:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <oneWire+0x5>
     c6c:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <oneWire+0x4>
     c70:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <oneWire+0x3>
     c74:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <sensors+0x16>
     c78:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <sensors+0x15>
     c7c:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <sensors+0x1>
     c80:	84 ef       	ldi	r24, 0xF4	; 244
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <sensors+0xa>
     c88:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <sensors+0x9>
     c8c:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <sensors+0x7>
     c90:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <sensors+0x8>
     c94:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <sensors>
     c98:	89 e0       	ldi	r24, 0x09	; 9
     c9a:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <sensors+0x3>
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <sensors+0x4>
     ca4:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <sensors+0x5>
     ca8:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <sensors+0x6>
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	08 95       	ret
     cb6:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <pixels+0x5>
     cba:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <pixels+0x4>
     cbe:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <pixels+0x3>
     cc2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <pixels+0x2>
     cc6:	63 cf       	rjmp	.-314    	; 0xb8e <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0xf0>
     cc8:	8f b5       	in	r24, 0x2f	; 47
     cca:	8f 7d       	andi	r24, 0xDF	; 223
     ccc:	86 cf       	rjmp	.-244    	; 0xbda <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0x13c>
     cce:	85 b5       	in	r24, 0x25	; 37
     cd0:	8f 7d       	andi	r24, 0xDF	; 223
     cd2:	85 bd       	out	0x25, r24	; 37
     cd4:	83 cf       	rjmp	.-250    	; 0xbdc <global constructors keyed to 65535_0_sketch_sep8a.ino.cpp.o.2518+0x13e>

00000cd6 <main>:
main():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	64 97       	sbiw	r28, 0x14	; 20
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
init():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     cea:	78 94       	sei
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
     cec:	83 b7       	in	r24, 0x33	; 51
     cee:	83 60       	ori	r24, 0x03	; 3
     cf0:	83 bf       	out	0x33, r24	; 51
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
     cf2:	89 b7       	in	r24, 0x39	; 57
     cf4:	81 60       	ori	r24, 0x01	; 1
     cf6:	89 bf       	out	0x39, r24	; 57
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     cf8:	92 e0       	ldi	r25, 0x02	; 2
     cfa:	9e bd       	out	0x2e, r25	; 46
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     cfc:	8e b5       	in	r24, 0x2e	; 46
     cfe:	81 60       	ori	r24, 0x01	; 1
     d00:	8e bd       	out	0x2e, r24	; 46
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     d02:	8f b5       	in	r24, 0x2f	; 47
     d04:	81 60       	ori	r24, 0x01	; 1
     d06:	8f bd       	out	0x2f, r24	; 47
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
     d08:	85 b5       	in	r24, 0x25	; 37
     d0a:	84 60       	ori	r24, 0x04	; 4
     d0c:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
     d0e:	85 b5       	in	r24, 0x25	; 37
     d10:	80 64       	ori	r24, 0x40	; 64
     d12:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
     d14:	87 e8       	ldi	r24, 0x87	; 135
     d16:	86 b9       	out	0x06, r24	; 6
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
     d18:	1a b8       	out	0x0a, r1	; 10
begin():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     d1a:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Serial+0x10>
     d1e:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Serial+0x11>
     d22:	90 83       	st	Z, r25
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     d24:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <Serial+0xc>
     d28:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <Serial+0xd>
     d2c:	10 82       	st	Z, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     d2e:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Serial+0xe>
     d32:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Serial+0xf>
     d36:	8f ec       	ldi	r24, 0xCF	; 207
     d38:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     d3a:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Serial+0x18>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     d3e:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Serial+0x14>
     d42:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Serial+0x15>
     d46:	86 e8       	ldi	r24, 0x86	; 134
     d48:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     d4a:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Serial+0x12>
     d4e:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Serial+0x13>
     d52:	80 81       	ld	r24, Z
     d54:	88 69       	ori	r24, 0x98	; 152
     d56:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     d58:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Serial+0x12>
     d5c:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Serial+0x13>
     d60:	80 81       	ld	r24, Z
     d62:	8f 7d       	andi	r24, 0xDF	; 223
     d64:	80 83       	st	Z, r24
setup():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:121
int thermistorPin = PC1;  // Where the ADC samples the resistor divider's output

void setup() {
  // Set the port speed for serial window messages
  Serial.begin(9600);
  pinMode(thermistorPin, INPUT);
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	e4 d9       	rcall	.-3128   	; 0x134 <pinMode>
     d6c:	5e 01       	movw	r10, r28
     d6e:	85 e1       	ldi	r24, 0x15	; 21
     d70:	a8 0e       	add	r10, r24
     d72:	b1 1c       	adc	r11, r1
analogRead():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     d74:	81 e4       	ldi	r24, 0x41	; 65
     d76:	38 2e       	mov	r3, r24
serialEventRun():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	89 2e       	mov	r8, r25
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	99 2e       	mov	r9, r25
     d80:	8e 01       	movw	r16, r28
     d82:	0f 5f       	subi	r16, 0xFF	; 255
     d84:	1f 4f       	sbci	r17, 0xFF	; 255
main():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/main.cpp:34
     d86:	78 01       	movw	r14, r16
analogRead():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
     d88:	37 b8       	out	0x07, r3	; 7
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     d8a:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
     d8c:	36 99       	sbic	0x06, 6	; 6
     d8e:	fe cf       	rjmp	.-4      	; 0xd8c <main+0xb6>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
     d90:	84 b1       	in	r24, 0x04	; 4
     d92:	95 b1       	in	r25, 0x05	; 5
readThermistor():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:158
  double adcAverage = 0;          // Holds the average voltage measurement
  int adcSamples[SAMPLE_NUMBER];  // Array to hold each voltage measurement


  for (int i = 0; i < SAMPLE_NUMBER; i++) {
    adcSamples[i] = analogRead(thermistorPin);  // read from pin and store
     d94:	f7 01       	movw	r30, r14
     d96:	81 93       	st	Z+, r24
     d98:	91 93       	st	Z+, r25
     d9a:	7f 01       	movw	r14, r30
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:159
    delay(10);                                  // wait 10 milliseconds
     d9c:	6a e0       	ldi	r22, 0x0A	; 10
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	1e da       	rcall	.-3012   	; 0x1e2 <delay>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:157
  double tCelsius = 0;            // Hold temperature in celsius
  double adcAverage = 0;          // Holds the average voltage measurement
  int adcSamples[SAMPLE_NUMBER];  // Array to hold each voltage measurement


  for (int i = 0; i < SAMPLE_NUMBER; i++) {
     da6:	ae 14       	cp	r10, r14
     da8:	bf 04       	cpc	r11, r15
     daa:	71 f7       	brne	.-36     	; 0xd88 <main+0xb2>
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:153
double readThermistor() {
  // variables that live in this function
  double rThermistor = 0;         // Holds thermistor resistance value
  double tKelvin = 0;             // Holds calculated temperature
  double tCelsius = 0;            // Hold temperature in celsius
  double adcAverage = 0;          // Holds the average voltage measurement
     dac:	41 2c       	mov	r4, r1
     dae:	51 2c       	mov	r5, r1
     db0:	32 01       	movw	r6, r4
readThermistor():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:165
  }

  /* Then, we will simply average all of those samples up for a "stiffer"
    measurement. */
  for (int i = 0; i < SAMPLE_NUMBER; i++) {
    adcAverage += adcSamples[i];  // add all samples up . . .
     db2:	f8 01       	movw	r30, r16
     db4:	61 91       	ld	r22, Z+
     db6:	71 91       	ld	r23, Z+
     db8:	8f 01       	movw	r16, r30
     dba:	07 2e       	mov	r0, r23
     dbc:	00 0c       	add	r0, r0
     dbe:	88 0b       	sbc	r24, r24
     dc0:	99 0b       	sbc	r25, r25
     dc2:	b4 d0       	rcall	.+360    	; 0xf2c <__floatsisf>
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	c3 01       	movw	r24, r6
     dca:	b2 01       	movw	r22, r4
     dcc:	e5 d1       	rcall	.+970    	; 0x1198 <__addsf3>
     dce:	2b 01       	movw	r4, r22
     dd0:	3c 01       	movw	r6, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:164
    delay(10);                                  // wait 10 milliseconds
  }

  /* Then, we will simply average all of those samples up for a "stiffer"
    measurement. */
  for (int i = 0; i < SAMPLE_NUMBER; i++) {
     dd2:	e0 16       	cp	r14, r16
     dd4:	f1 06       	cpc	r15, r17
     dd6:	69 f7       	brne	.-38     	; 0xdb2 <main+0xdc>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:167
    adcAverage += adcSamples[i];  // add all samples up . . .
  }
  adcAverage /= SAMPLE_NUMBER;  // . . . average it w/ divide
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	40 e2       	ldi	r20, 0x20	; 32
     dde:	51 e4       	ldi	r21, 0x41	; 65
     de0:	3f d2       	rcall	.+1150   	; 0x1260 <__divsf3>
     de2:	9b 01       	movw	r18, r22
     de4:	ac 01       	movw	r20, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:170


  rThermistor = BALANCE_RESISTOR * ((MAX_ADC / adcAverage) - 1);
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	70 ec       	ldi	r23, 0xC0	; 192
     dea:	8f e7       	ldi	r24, 0x7F	; 127
     dec:	94 e4       	ldi	r25, 0x44	; 68
     dee:	38 d2       	rcall	.+1136   	; 0x1260 <__divsf3>
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e8       	ldi	r20, 0x80	; 128
     df6:	5f e3       	ldi	r21, 0x3F	; 63
     df8:	ce d1       	rcall	.+924    	; 0x1196 <__subsf3>
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e4       	ldi	r19, 0x40	; 64
     dfe:	4c e1       	ldi	r20, 0x1C	; 28
     e00:	56 e4       	ldi	r21, 0x46	; 70
     e02:	f3 d0       	rcall	.+486    	; 0xfea <__mulsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:173


  tKelvin = (BETA * ROOM_TEMP) / (BETA + (ROOM_TEMP * log(rThermistor / RESISTOR_ROOM_TEMP)));
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e4       	ldi	r19, 0x40	; 64
     e08:	4c e1       	ldi	r20, 0x1C	; 28
     e0a:	56 e4       	ldi	r21, 0x46	; 70
     e0c:	29 d2       	rcall	.+1106   	; 0x1260 <__divsf3>
     e0e:	c5 d2       	rcall	.+1418   	; 0x139a <log>
     e10:	23 e3       	ldi	r18, 0x33	; 51
     e12:	33 e1       	ldi	r19, 0x13	; 19
     e14:	45 e9       	ldi	r20, 0x95	; 149
     e16:	53 e4       	ldi	r21, 0x43	; 67
     e18:	e8 d0       	rcall	.+464    	; 0xfea <__mulsf3>
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e6       	ldi	r19, 0x60	; 96
     e1e:	48 e7       	ldi	r20, 0x78	; 120
     e20:	55 e4       	ldi	r21, 0x45	; 69
     e22:	ba d1       	rcall	.+884    	; 0x1198 <__addsf3>
     e24:	9b 01       	movw	r18, r22
     e26:	ac 01       	movw	r20, r24
     e28:	61 e8       	ldi	r22, 0x81	; 129
     e2a:	72 ea       	ldi	r23, 0xA2	; 162
     e2c:	80 e9       	ldi	r24, 0x90	; 144
     e2e:	99 e4       	ldi	r25, 0x49	; 73
     e30:	17 d2       	rcall	.+1070   	; 0x1260 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:176


  tCelsius = tKelvin - 273.15;  // convert kelvin to celsius
     e32:	23 e3       	ldi	r18, 0x33	; 51
     e34:	33 e9       	ldi	r19, 0x93	; 147
     e36:	48 e8       	ldi	r20, 0x88	; 136
     e38:	53 e4       	ldi	r21, 0x43	; 67
     e3a:	ad d1       	rcall	.+858    	; 0x1196 <__subsf3>
     e3c:	6b 01       	movw	r12, r22
     e3e:	7c 01       	movw	r14, r24
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:127
}


void loop() {

  currentTemperature = readThermistor();
     e40:	c0 92 33 01 	sts	0x0133, r12	; 0x800133 <currentTemperature>
     e44:	d0 92 34 01 	sts	0x0134, r13	; 0x800134 <currentTemperature+0x1>
     e48:	e0 92 35 01 	sts	0x0135, r14	; 0x800135 <currentTemperature+0x2>
     e4c:	f0 92 36 01 	sts	0x0136, r15	; 0x800136 <currentTemperature+0x3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:128
  delay(3000);
     e50:	68 eb       	ldi	r22, 0xB8	; 184
     e52:	7b e0       	ldi	r23, 0x0B	; 11
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	c4 d9       	rcall	.-3192   	; 0x1e2 <delay>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:131


  if (currentTemperature > 21.0 && currentTemperature < 24.0) {
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	48 ea       	ldi	r20, 0xA8	; 168
     e60:	51 e4       	ldi	r21, 0x41	; 65
     e62:	c7 01       	movw	r24, r14
     e64:	b6 01       	movw	r22, r12
     e66:	90 d2       	rcall	.+1312   	; 0x1388 <__gesf2>
     e68:	18 16       	cp	r1, r24
     e6a:	1c f5       	brge	.+70     	; 0xeb2 <main+0x1dc>
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 ec       	ldi	r20, 0xC0	; 192
     e72:	51 e4       	ldi	r21, 0x41	; 65
     e74:	c7 01       	movw	r24, r14
     e76:	b6 01       	movw	r22, r12
     e78:	53 d0       	rcall	.+166    	; 0xf20 <__cmpsf2>
     e7a:	87 ff       	sbrs	r24, 7
     e7c:	1a c0       	rjmp	.+52     	; 0xeb2 <main+0x1dc>
write():
     e7e:	87 e8       	ldi	r24, 0x87	; 135
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	3f db       	rcall	.-2434   	; 0x502 <Print::write(char const*) [clone .part.2] [clone .constprop.29]>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     e84:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <currentTemperature>
     e88:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <currentTemperature+0x1>
     e8c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <currentTemperature+0x2>
     e90:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <currentTemperature+0x3>
     e94:	42 e0       	ldi	r20, 0x02	; 2
     e96:	8f db       	rcall	.-2274   	; 0x5b6 <Print::printFloat(double, unsigned char) [clone .constprop.19]>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:134
    Serial.print("It is ");
    Serial.print(currentTemperature);
    Serial.println("C. Ahhh, very nice temperature.");
     e98:	8e e8       	ldi	r24, 0x8E	; 142
     e9a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:142
    Serial.print(currentTemperature);
    Serial.println("C. I feel like a hot tamale!");
  } else {
    Serial.print("It is ");
    Serial.print(currentTemperature);
    Serial.println("C. Brrrrrr, it's COLD!");
     e9c:	80 db       	rcall	.-2304   	; 0x59e <Print::println(char const*) [clone .constprop.26]>
serialEventRun():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
     e9e:	81 14       	cp	r8, r1
     ea0:	91 04       	cpc	r9, r1
     ea2:	09 f4       	brne	.+2      	; 0xea6 <main+0x1d0>
     ea4:	6d cf       	rjmp	.-294    	; 0xd80 <main+0xaa>
     ea6:	37 da       	rcall	.-2962   	; 0x316 <Serial0_available()>
     ea8:	88 23       	and	r24, r24
     eaa:	09 f4       	brne	.+2      	; 0xeae <main+0x1d8>
     eac:	69 cf       	rjmp	.-302    	; 0xd80 <main+0xaa>
     eae:	a8 d8       	rcall	.-3760   	; 0x0 <__vectors>
     eb0:	67 cf       	rjmp	.-306    	; 0xd80 <main+0xaa>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:135

  if (currentTemperature > 21.0 && currentTemperature < 24.0) {
    Serial.print("It is ");
    Serial.print(currentTemperature);
    Serial.println("C. Ahhh, very nice temperature.");
  } else if (currentTemperature >= 24.0) {
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 ec       	ldi	r20, 0xC0	; 192
     eb8:	51 e4       	ldi	r21, 0x41	; 65
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	64 d2       	rcall	.+1224   	; 0x1388 <__gesf2>
     ec0:	87 fd       	sbrc	r24, 7
     ec2:	10 c0       	rjmp	.+32     	; 0xee4 <main+0x20e>
write():
     ec4:	87 e8       	ldi	r24, 0x87	; 135
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	1c db       	rcall	.-2504   	; 0x502 <Print::write(char const*) [clone .part.2] [clone .constprop.29]>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:111
     eca:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <currentTemperature>
     ece:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <currentTemperature+0x1>
     ed2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <currentTemperature+0x2>
     ed6:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <currentTemperature+0x3>
     eda:	42 e0       	ldi	r20, 0x02	; 2
     edc:	6c db       	rcall	.-2344   	; 0x5b6 <Print::printFloat(double, unsigned char) [clone .constprop.19]>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:138
    Serial.print("It is ");
    Serial.print(currentTemperature);
    Serial.println("C. I feel like a hot tamale!");
     ede:	8e ea       	ldi	r24, 0xAE	; 174
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	dc cf       	rjmp	.-72     	; 0xe9c <main+0x1c6>
write():
     ee4:	87 e8       	ldi	r24, 0x87	; 135
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0c db       	rcall	.-2536   	; 0x502 <Print::write(char const*) [clone .part.2] [clone .constprop.29]>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:111
     eea:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <currentTemperature>
     eee:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <currentTemperature+0x1>
     ef2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <currentTemperature+0x2>
     ef6:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <currentTemperature+0x3>
     efa:	42 e0       	ldi	r20, 0x02	; 2
     efc:	5c db       	rcall	.-2376   	; 0x5b6 <Print::printFloat(double, unsigned char) [clone .constprop.19]>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\TEMPRATURE\sketch_sep8a/sketch_sep8a.ino:142
  } else {
    Serial.print("It is ");
    Serial.print(currentTemperature);
    Serial.println("C. Brrrrrr, it's COLD!");
     efe:	8b ec       	ldi	r24, 0xCB	; 203
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	cc cf       	rjmp	.-104    	; 0xe9c <main+0x1c6>

00000f04 <_GLOBAL__sub_D__ZN4CingC2Ev>:
_GLOBAL__sub_D__ZN4CingC2Ev():
c:\Users\Lenovo\Documents\Arduino\libraries\Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:120

/*!
  @brief   Deallocate Adafruit_NeoPixel object, set data pin back to INPUT.
*/
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  free(pixels);
     f04:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <pixels+0x9>
     f08:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <pixels+0xa>
     f0c:	5f d3       	rcall	.+1726   	; 0x15cc <free>
c:\Users\Lenovo\Documents\Arduino\libraries\Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:121
  if (pin >= 0)
     f0e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <pixels+0x6>
     f12:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <pixels+0x7>
     f16:	97 fd       	sbrc	r25, 7
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <_GLOBAL__sub_D__ZN4CingC2Ev+0x1a>
c:\Users\Lenovo\Documents\Arduino\libraries\Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:122
    pinMode(pin, INPUT);
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	0b c9       	rjmp	.-3562   	; 0x134 <pinMode>
c:\Users\Lenovo\Documents\Arduino\libraries\Atmega8_IO\src/Atmega8_IO.cpp:296
			}
	}
void Cing::ShowLed()
	{
		pixels.show();
	}
     f1e:	08 95       	ret

00000f20 <__cmpsf2>:
__cmpsf2():
     f20:	40 d0       	rcall	.+128    	; 0xfa2 <__fp_cmp>
     f22:	08 f4       	brcc	.+2      	; 0xf26 <__cmpsf2+0x6>
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	08 95       	ret

00000f28 <__floatunsisf>:
__floatunsisf():
     f28:	e8 94       	clt
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <__floatsisf+0x12>

00000f2c <__floatsisf>:
     f2c:	97 fb       	bst	r25, 7
     f2e:	3e f4       	brtc	.+14     	; 0xf3e <__floatsisf+0x12>
     f30:	90 95       	com	r25
     f32:	80 95       	com	r24
     f34:	70 95       	com	r23
     f36:	61 95       	neg	r22
     f38:	7f 4f       	sbci	r23, 0xFF	; 255
     f3a:	8f 4f       	sbci	r24, 0xFF	; 255
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	99 23       	and	r25, r25
     f40:	a9 f0       	breq	.+42     	; 0xf6c <__floatsisf+0x40>
     f42:	f9 2f       	mov	r31, r25
     f44:	96 e9       	ldi	r25, 0x96	; 150
     f46:	bb 27       	eor	r27, r27
     f48:	93 95       	inc	r25
     f4a:	f6 95       	lsr	r31
     f4c:	87 95       	ror	r24
     f4e:	77 95       	ror	r23
     f50:	67 95       	ror	r22
     f52:	b7 95       	ror	r27
     f54:	f1 11       	cpse	r31, r1
     f56:	f8 cf       	rjmp	.-16     	; 0xf48 <__floatsisf+0x1c>
     f58:	fa f4       	brpl	.+62     	; 0xf98 <__floatsisf+0x6c>
     f5a:	bb 0f       	add	r27, r27
     f5c:	11 f4       	brne	.+4      	; 0xf62 <__floatsisf+0x36>
     f5e:	60 ff       	sbrs	r22, 0
     f60:	1b c0       	rjmp	.+54     	; 0xf98 <__floatsisf+0x6c>
     f62:	6f 5f       	subi	r22, 0xFF	; 255
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	8f 4f       	sbci	r24, 0xFF	; 255
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	16 c0       	rjmp	.+44     	; 0xf98 <__floatsisf+0x6c>
     f6c:	88 23       	and	r24, r24
     f6e:	11 f0       	breq	.+4      	; 0xf74 <__floatsisf+0x48>
     f70:	96 e9       	ldi	r25, 0x96	; 150
     f72:	11 c0       	rjmp	.+34     	; 0xf96 <__floatsisf+0x6a>
     f74:	77 23       	and	r23, r23
     f76:	21 f0       	breq	.+8      	; 0xf80 <__floatsisf+0x54>
     f78:	9e e8       	ldi	r25, 0x8E	; 142
     f7a:	87 2f       	mov	r24, r23
     f7c:	76 2f       	mov	r23, r22
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <__floatsisf+0x5e>
     f80:	66 23       	and	r22, r22
     f82:	71 f0       	breq	.+28     	; 0xfa0 <__floatsisf+0x74>
     f84:	96 e8       	ldi	r25, 0x86	; 134
     f86:	86 2f       	mov	r24, r22
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	2a f0       	brmi	.+10     	; 0xf98 <__floatsisf+0x6c>
     f8e:	9a 95       	dec	r25
     f90:	66 0f       	add	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	88 1f       	adc	r24, r24
     f96:	da f7       	brpl	.-10     	; 0xf8e <__floatsisf+0x62>
     f98:	88 0f       	add	r24, r24
     f9a:	96 95       	lsr	r25
     f9c:	87 95       	ror	r24
     f9e:	97 f9       	bld	r25, 7
     fa0:	08 95       	ret

00000fa2 <__fp_cmp>:
__fp_cmp():
     fa2:	99 0f       	add	r25, r25
     fa4:	00 08       	sbc	r0, r0
     fa6:	55 0f       	add	r21, r21
     fa8:	aa 0b       	sbc	r26, r26
     faa:	e0 e8       	ldi	r30, 0x80	; 128
     fac:	fe ef       	ldi	r31, 0xFE	; 254
     fae:	16 16       	cp	r1, r22
     fb0:	17 06       	cpc	r1, r23
     fb2:	e8 07       	cpc	r30, r24
     fb4:	f9 07       	cpc	r31, r25
     fb6:	c0 f0       	brcs	.+48     	; 0xfe8 <__fp_cmp+0x46>
     fb8:	12 16       	cp	r1, r18
     fba:	13 06       	cpc	r1, r19
     fbc:	e4 07       	cpc	r30, r20
     fbe:	f5 07       	cpc	r31, r21
     fc0:	98 f0       	brcs	.+38     	; 0xfe8 <__fp_cmp+0x46>
     fc2:	62 1b       	sub	r22, r18
     fc4:	73 0b       	sbc	r23, r19
     fc6:	84 0b       	sbc	r24, r20
     fc8:	95 0b       	sbc	r25, r21
     fca:	39 f4       	brne	.+14     	; 0xfda <__fp_cmp+0x38>
     fcc:	0a 26       	eor	r0, r26
     fce:	61 f0       	breq	.+24     	; 0xfe8 <__fp_cmp+0x46>
     fd0:	23 2b       	or	r18, r19
     fd2:	24 2b       	or	r18, r20
     fd4:	25 2b       	or	r18, r21
     fd6:	21 f4       	brne	.+8      	; 0xfe0 <__fp_cmp+0x3e>
     fd8:	08 95       	ret
     fda:	0a 26       	eor	r0, r26
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <__fp_cmp+0x3e>
     fde:	a1 40       	sbci	r26, 0x01	; 1
     fe0:	a6 95       	lsr	r26
     fe2:	8f ef       	ldi	r24, 0xFF	; 255
     fe4:	81 1d       	adc	r24, r1
     fe6:	81 1d       	adc	r24, r1
     fe8:	08 95       	ret

00000fea <__mulsf3>:
__mulsf3():
     fea:	0b d0       	rcall	.+22     	; 0x1002 <__mulsf3x>
     fec:	78 c0       	rjmp	.+240    	; 0x10de <__fp_round>
     fee:	69 d0       	rcall	.+210    	; 0x10c2 <__fp_pscA>
     ff0:	28 f0       	brcs	.+10     	; 0xffc <__mulsf3+0x12>
     ff2:	6e d0       	rcall	.+220    	; 0x10d0 <__fp_pscB>
     ff4:	18 f0       	brcs	.+6      	; 0xffc <__mulsf3+0x12>
     ff6:	95 23       	and	r25, r21
     ff8:	09 f0       	breq	.+2      	; 0xffc <__mulsf3+0x12>
     ffa:	5a c0       	rjmp	.+180    	; 0x10b0 <__fp_inf>
     ffc:	5f c0       	rjmp	.+190    	; 0x10bc <__fp_nan>
     ffe:	11 24       	eor	r1, r1
    1000:	a2 c0       	rjmp	.+324    	; 0x1146 <__fp_szero>

00001002 <__mulsf3x>:
__mulsf3x():
    1002:	7e d0       	rcall	.+252    	; 0x1100 <__fp_split3>
    1004:	a0 f3       	brcs	.-24     	; 0xfee <__mulsf3+0x4>

00001006 <__mulsf3_pse>:
    1006:	95 9f       	mul	r25, r21
    1008:	d1 f3       	breq	.-12     	; 0xffe <__mulsf3+0x14>
    100a:	95 0f       	add	r25, r21
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	55 1f       	adc	r21, r21
    1010:	62 9f       	mul	r22, r18
    1012:	f0 01       	movw	r30, r0
    1014:	72 9f       	mul	r23, r18
    1016:	bb 27       	eor	r27, r27
    1018:	f0 0d       	add	r31, r0
    101a:	b1 1d       	adc	r27, r1
    101c:	63 9f       	mul	r22, r19
    101e:	aa 27       	eor	r26, r26
    1020:	f0 0d       	add	r31, r0
    1022:	b1 1d       	adc	r27, r1
    1024:	aa 1f       	adc	r26, r26
    1026:	64 9f       	mul	r22, r20
    1028:	66 27       	eor	r22, r22
    102a:	b0 0d       	add	r27, r0
    102c:	a1 1d       	adc	r26, r1
    102e:	66 1f       	adc	r22, r22
    1030:	82 9f       	mul	r24, r18
    1032:	22 27       	eor	r18, r18
    1034:	b0 0d       	add	r27, r0
    1036:	a1 1d       	adc	r26, r1
    1038:	62 1f       	adc	r22, r18
    103a:	73 9f       	mul	r23, r19
    103c:	b0 0d       	add	r27, r0
    103e:	a1 1d       	adc	r26, r1
    1040:	62 1f       	adc	r22, r18
    1042:	83 9f       	mul	r24, r19
    1044:	a0 0d       	add	r26, r0
    1046:	61 1d       	adc	r22, r1
    1048:	22 1f       	adc	r18, r18
    104a:	74 9f       	mul	r23, r20
    104c:	33 27       	eor	r19, r19
    104e:	a0 0d       	add	r26, r0
    1050:	61 1d       	adc	r22, r1
    1052:	23 1f       	adc	r18, r19
    1054:	84 9f       	mul	r24, r20
    1056:	60 0d       	add	r22, r0
    1058:	21 1d       	adc	r18, r1
    105a:	82 2f       	mov	r24, r18
    105c:	76 2f       	mov	r23, r22
    105e:	6a 2f       	mov	r22, r26
    1060:	11 24       	eor	r1, r1
    1062:	9f 57       	subi	r25, 0x7F	; 127
    1064:	50 40       	sbci	r21, 0x00	; 0
    1066:	8a f0       	brmi	.+34     	; 0x108a <__mulsf3_pse+0x84>
    1068:	e1 f0       	breq	.+56     	; 0x10a2 <__mulsf3_pse+0x9c>
    106a:	88 23       	and	r24, r24
    106c:	4a f0       	brmi	.+18     	; 0x1080 <__mulsf3_pse+0x7a>
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	bb 1f       	adc	r27, r27
    1074:	66 1f       	adc	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	88 1f       	adc	r24, r24
    107a:	91 50       	subi	r25, 0x01	; 1
    107c:	50 40       	sbci	r21, 0x00	; 0
    107e:	a9 f7       	brne	.-22     	; 0x106a <__mulsf3_pse+0x64>
    1080:	9e 3f       	cpi	r25, 0xFE	; 254
    1082:	51 05       	cpc	r21, r1
    1084:	70 f0       	brcs	.+28     	; 0x10a2 <__mulsf3_pse+0x9c>
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <__fp_inf>
    1088:	5e c0       	rjmp	.+188    	; 0x1146 <__fp_szero>
    108a:	5f 3f       	cpi	r21, 0xFF	; 255
    108c:	ec f3       	brlt	.-6      	; 0x1088 <__mulsf3_pse+0x82>
    108e:	98 3e       	cpi	r25, 0xE8	; 232
    1090:	dc f3       	brlt	.-10     	; 0x1088 <__mulsf3_pse+0x82>
    1092:	86 95       	lsr	r24
    1094:	77 95       	ror	r23
    1096:	67 95       	ror	r22
    1098:	b7 95       	ror	r27
    109a:	f7 95       	ror	r31
    109c:	e7 95       	ror	r30
    109e:	9f 5f       	subi	r25, 0xFF	; 255
    10a0:	c1 f7       	brne	.-16     	; 0x1092 <__mulsf3_pse+0x8c>
    10a2:	fe 2b       	or	r31, r30
    10a4:	88 0f       	add	r24, r24
    10a6:	91 1d       	adc	r25, r1
    10a8:	96 95       	lsr	r25
    10aa:	87 95       	ror	r24
    10ac:	97 f9       	bld	r25, 7
    10ae:	08 95       	ret

000010b0 <__fp_inf>:
    10b0:	97 f9       	bld	r25, 7
    10b2:	9f 67       	ori	r25, 0x7F	; 127
    10b4:	80 e8       	ldi	r24, 0x80	; 128
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	08 95       	ret

000010bc <__fp_nan>:
    10bc:	9f ef       	ldi	r25, 0xFF	; 255
    10be:	80 ec       	ldi	r24, 0xC0	; 192
    10c0:	08 95       	ret

000010c2 <__fp_pscA>:
    10c2:	00 24       	eor	r0, r0
__fp_pscA():
    10c4:	0a 94       	dec	r0
    10c6:	16 16       	cp	r1, r22
    10c8:	17 06       	cpc	r1, r23
    10ca:	18 06       	cpc	r1, r24
    10cc:	09 06       	cpc	r0, r25
    10ce:	08 95       	ret

000010d0 <__fp_pscB>:
__fp_pscB():
    10d0:	00 24       	eor	r0, r0
    10d2:	0a 94       	dec	r0
    10d4:	12 16       	cp	r1, r18
    10d6:	13 06       	cpc	r1, r19
    10d8:	14 06       	cpc	r1, r20
    10da:	05 06       	cpc	r0, r21
    10dc:	08 95       	ret

000010de <__fp_round>:
__fp_round():
    10de:	09 2e       	mov	r0, r25
    10e0:	03 94       	inc	r0
    10e2:	00 0c       	add	r0, r0
    10e4:	11 f4       	brne	.+4      	; 0x10ea <__fp_round+0xc>
    10e6:	88 23       	and	r24, r24
    10e8:	52 f0       	brmi	.+20     	; 0x10fe <__fp_round+0x20>
    10ea:	bb 0f       	add	r27, r27
    10ec:	40 f4       	brcc	.+16     	; 0x10fe <__fp_round+0x20>
    10ee:	bf 2b       	or	r27, r31
    10f0:	11 f4       	brne	.+4      	; 0x10f6 <__fp_round+0x18>
    10f2:	60 ff       	sbrs	r22, 0
    10f4:	04 c0       	rjmp	.+8      	; 0x10fe <__fp_round+0x20>
    10f6:	6f 5f       	subi	r22, 0xFF	; 255
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	8f 4f       	sbci	r24, 0xFF	; 255
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	08 95       	ret

00001100 <__fp_split3>:
__fp_split3():
    1100:	57 fd       	sbrc	r21, 7
    1102:	90 58       	subi	r25, 0x80	; 128
    1104:	44 0f       	add	r20, r20
    1106:	55 1f       	adc	r21, r21
    1108:	59 f0       	breq	.+22     	; 0x1120 <__fp_splitA+0x10>
    110a:	5f 3f       	cpi	r21, 0xFF	; 255
    110c:	71 f0       	breq	.+28     	; 0x112a <__fp_splitA+0x1a>
    110e:	47 95       	ror	r20

00001110 <__fp_splitA>:
    1110:	88 0f       	add	r24, r24
    1112:	97 fb       	bst	r25, 7
    1114:	99 1f       	adc	r25, r25
    1116:	61 f0       	breq	.+24     	; 0x1130 <__fp_splitA+0x20>
    1118:	9f 3f       	cpi	r25, 0xFF	; 255
    111a:	79 f0       	breq	.+30     	; 0x113a <__fp_splitA+0x2a>
    111c:	87 95       	ror	r24
    111e:	08 95       	ret
    1120:	12 16       	cp	r1, r18
    1122:	13 06       	cpc	r1, r19
    1124:	14 06       	cpc	r1, r20
    1126:	55 1f       	adc	r21, r21
    1128:	f2 cf       	rjmp	.-28     	; 0x110e <__fp_split3+0xe>
    112a:	46 95       	lsr	r20
    112c:	f1 df       	rcall	.-30     	; 0x1110 <__fp_splitA>
    112e:	08 c0       	rjmp	.+16     	; 0x1140 <__fp_splitA+0x30>
    1130:	16 16       	cp	r1, r22
    1132:	17 06       	cpc	r1, r23
    1134:	18 06       	cpc	r1, r24
    1136:	99 1f       	adc	r25, r25
    1138:	f1 cf       	rjmp	.-30     	; 0x111c <__fp_splitA+0xc>
    113a:	86 95       	lsr	r24
    113c:	71 05       	cpc	r23, r1
    113e:	61 05       	cpc	r22, r1
    1140:	08 94       	sec
    1142:	08 95       	ret

00001144 <__fp_zero>:
__fp_zero():
    1144:	e8 94       	clt

00001146 <__fp_szero>:
    1146:	bb 27       	eor	r27, r27
    1148:	66 27       	eor	r22, r22
    114a:	77 27       	eor	r23, r23
    114c:	cb 01       	movw	r24, r22
    114e:	97 f9       	bld	r25, 7
    1150:	08 95       	ret

00001152 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1152:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1154:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1156:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1158:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    115a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    115c:	0d c0       	rjmp	.+26     	; 0x1178 <__udivmodsi4_ep>

0000115e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    115e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1160:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1162:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1164:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1166:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1168:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    116a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    116c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    116e:	20 f0       	brcs	.+8      	; 0x1178 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1170:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1172:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1174:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1176:	f5 0b       	sbc	r31, r21

00001178 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1178:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    117a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    117c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    117e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1180:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1182:	69 f7       	brne	.-38     	; 0x115e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1184:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1186:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1188:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    118a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    118c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    118e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1190:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1192:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1194:	08 95       	ret

00001196 <__subsf3>:
__subsf3():
    1196:	50 58       	subi	r21, 0x80	; 128

00001198 <__addsf3>:
    1198:	bb 27       	eor	r27, r27
    119a:	aa 27       	eor	r26, r26
    119c:	0e d0       	rcall	.+28     	; 0x11ba <__addsf3x>
    119e:	9f cf       	rjmp	.-194    	; 0x10de <__fp_round>
__addsf3():
    11a0:	90 df       	rcall	.-224    	; 0x10c2 <__fp_pscA>
    11a2:	30 f0       	brcs	.+12     	; 0x11b0 <__addsf3+0x18>
    11a4:	95 df       	rcall	.-214    	; 0x10d0 <__fp_pscB>
    11a6:	20 f0       	brcs	.+8      	; 0x11b0 <__addsf3+0x18>
    11a8:	31 f4       	brne	.+12     	; 0x11b6 <__addsf3+0x1e>
    11aa:	9f 3f       	cpi	r25, 0xFF	; 255
    11ac:	11 f4       	brne	.+4      	; 0x11b2 <__addsf3+0x1a>
    11ae:	1e f4       	brtc	.+6      	; 0x11b6 <__addsf3+0x1e>
    11b0:	85 cf       	rjmp	.-246    	; 0x10bc <__fp_nan>
    11b2:	0e f4       	brtc	.+2      	; 0x11b6 <__addsf3+0x1e>
    11b4:	e0 95       	com	r30
    11b6:	e7 fb       	bst	r30, 7
    11b8:	7b cf       	rjmp	.-266    	; 0x10b0 <__fp_inf>

000011ba <__addsf3x>:
__addsf3x():
    11ba:	e9 2f       	mov	r30, r25
    11bc:	a1 df       	rcall	.-190    	; 0x1100 <__fp_split3>
    11be:	80 f3       	brcs	.-32     	; 0x11a0 <__addsf3+0x8>
    11c0:	ba 17       	cp	r27, r26
    11c2:	62 07       	cpc	r22, r18
    11c4:	73 07       	cpc	r23, r19
    11c6:	84 07       	cpc	r24, r20
    11c8:	95 07       	cpc	r25, r21
    11ca:	18 f0       	brcs	.+6      	; 0x11d2 <__addsf3x+0x18>
    11cc:	71 f4       	brne	.+28     	; 0x11ea <__addsf3x+0x30>
    11ce:	9e f5       	brtc	.+102    	; 0x1236 <__addsf3x+0x7c>
    11d0:	b9 cf       	rjmp	.-142    	; 0x1144 <__fp_zero>
    11d2:	0e f4       	brtc	.+2      	; 0x11d6 <__addsf3x+0x1c>
    11d4:	e0 95       	com	r30
    11d6:	0b 2e       	mov	r0, r27
    11d8:	ba 2f       	mov	r27, r26
    11da:	a0 2d       	mov	r26, r0
    11dc:	0b 01       	movw	r0, r22
    11de:	b9 01       	movw	r22, r18
    11e0:	90 01       	movw	r18, r0
    11e2:	0c 01       	movw	r0, r24
    11e4:	ca 01       	movw	r24, r20
    11e6:	a0 01       	movw	r20, r0
    11e8:	11 24       	eor	r1, r1
    11ea:	ff 27       	eor	r31, r31
    11ec:	59 1b       	sub	r21, r25
    11ee:	99 f0       	breq	.+38     	; 0x1216 <__addsf3x+0x5c>
    11f0:	59 3f       	cpi	r21, 0xF9	; 249
    11f2:	50 f4       	brcc	.+20     	; 0x1208 <__addsf3x+0x4e>
    11f4:	50 3e       	cpi	r21, 0xE0	; 224
    11f6:	68 f1       	brcs	.+90     	; 0x1252 <__addsf3x+0x98>
    11f8:	1a 16       	cp	r1, r26
    11fa:	f0 40       	sbci	r31, 0x00	; 0
    11fc:	a2 2f       	mov	r26, r18
    11fe:	23 2f       	mov	r18, r19
    1200:	34 2f       	mov	r19, r20
    1202:	44 27       	eor	r20, r20
    1204:	58 5f       	subi	r21, 0xF8	; 248
    1206:	f3 cf       	rjmp	.-26     	; 0x11ee <__addsf3x+0x34>
    1208:	46 95       	lsr	r20
    120a:	37 95       	ror	r19
    120c:	27 95       	ror	r18
    120e:	a7 95       	ror	r26
    1210:	f0 40       	sbci	r31, 0x00	; 0
    1212:	53 95       	inc	r21
    1214:	c9 f7       	brne	.-14     	; 0x1208 <__addsf3x+0x4e>
    1216:	7e f4       	brtc	.+30     	; 0x1236 <__addsf3x+0x7c>
    1218:	1f 16       	cp	r1, r31
    121a:	ba 0b       	sbc	r27, r26
    121c:	62 0b       	sbc	r22, r18
    121e:	73 0b       	sbc	r23, r19
    1220:	84 0b       	sbc	r24, r20
    1222:	ba f0       	brmi	.+46     	; 0x1252 <__addsf3x+0x98>
    1224:	91 50       	subi	r25, 0x01	; 1
    1226:	a1 f0       	breq	.+40     	; 0x1250 <__addsf3x+0x96>
    1228:	ff 0f       	add	r31, r31
    122a:	bb 1f       	adc	r27, r27
    122c:	66 1f       	adc	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	88 1f       	adc	r24, r24
    1232:	c2 f7       	brpl	.-16     	; 0x1224 <__addsf3x+0x6a>
    1234:	0e c0       	rjmp	.+28     	; 0x1252 <__addsf3x+0x98>
    1236:	ba 0f       	add	r27, r26
    1238:	62 1f       	adc	r22, r18
    123a:	73 1f       	adc	r23, r19
    123c:	84 1f       	adc	r24, r20
    123e:	48 f4       	brcc	.+18     	; 0x1252 <__addsf3x+0x98>
    1240:	87 95       	ror	r24
    1242:	77 95       	ror	r23
    1244:	67 95       	ror	r22
    1246:	b7 95       	ror	r27
    1248:	f7 95       	ror	r31
    124a:	9e 3f       	cpi	r25, 0xFE	; 254
    124c:	08 f0       	brcs	.+2      	; 0x1250 <__addsf3x+0x96>
    124e:	b3 cf       	rjmp	.-154    	; 0x11b6 <__addsf3+0x1e>
    1250:	93 95       	inc	r25
    1252:	88 0f       	add	r24, r24
    1254:	08 f0       	brcs	.+2      	; 0x1258 <__addsf3x+0x9e>
    1256:	99 27       	eor	r25, r25
    1258:	ee 0f       	add	r30, r30
    125a:	97 95       	ror	r25
    125c:	87 95       	ror	r24
    125e:	08 95       	ret

00001260 <__divsf3>:
    1260:	0c d0       	rcall	.+24     	; 0x127a <__divsf3x>
    1262:	3d cf       	rjmp	.-390    	; 0x10de <__fp_round>
    1264:	35 df       	rcall	.-406    	; 0x10d0 <__fp_pscB>
    1266:	40 f0       	brcs	.+16     	; 0x1278 <__divsf3+0x18>
    1268:	2c df       	rcall	.-424    	; 0x10c2 <__fp_pscA>
    126a:	30 f0       	brcs	.+12     	; 0x1278 <__divsf3+0x18>
    126c:	21 f4       	brne	.+8      	; 0x1276 <__divsf3+0x16>
    126e:	5f 3f       	cpi	r21, 0xFF	; 255
    1270:	19 f0       	breq	.+6      	; 0x1278 <__divsf3+0x18>
    1272:	1e cf       	rjmp	.-452    	; 0x10b0 <__fp_inf>
    1274:	51 11       	cpse	r21, r1
    1276:	67 cf       	rjmp	.-306    	; 0x1146 <__fp_szero>
    1278:	21 cf       	rjmp	.-446    	; 0x10bc <__fp_nan>

0000127a <__divsf3x>:
__divsf3x():
    127a:	42 df       	rcall	.-380    	; 0x1100 <__fp_split3>
    127c:	98 f3       	brcs	.-26     	; 0x1264 <__divsf3+0x4>

0000127e <__divsf3_pse>:
    127e:	99 23       	and	r25, r25
    1280:	c9 f3       	breq	.-14     	; 0x1274 <__divsf3+0x14>
    1282:	55 23       	and	r21, r21
    1284:	b1 f3       	breq	.-20     	; 0x1272 <__divsf3+0x12>
    1286:	95 1b       	sub	r25, r21
    1288:	55 0b       	sbc	r21, r21
    128a:	bb 27       	eor	r27, r27
    128c:	aa 27       	eor	r26, r26
    128e:	62 17       	cp	r22, r18
    1290:	73 07       	cpc	r23, r19
    1292:	84 07       	cpc	r24, r20
    1294:	38 f0       	brcs	.+14     	; 0x12a4 <__divsf3_pse+0x26>
    1296:	9f 5f       	subi	r25, 0xFF	; 255
    1298:	5f 4f       	sbci	r21, 0xFF	; 255
    129a:	22 0f       	add	r18, r18
    129c:	33 1f       	adc	r19, r19
    129e:	44 1f       	adc	r20, r20
    12a0:	aa 1f       	adc	r26, r26
    12a2:	a9 f3       	breq	.-22     	; 0x128e <__divsf3_pse+0x10>
    12a4:	33 d0       	rcall	.+102    	; 0x130c <__divsf3_pse+0x8e>
    12a6:	0e 2e       	mov	r0, r30
    12a8:	3a f0       	brmi	.+14     	; 0x12b8 <__divsf3_pse+0x3a>
    12aa:	e0 e8       	ldi	r30, 0x80	; 128
    12ac:	30 d0       	rcall	.+96     	; 0x130e <__divsf3_pse+0x90>
    12ae:	91 50       	subi	r25, 0x01	; 1
    12b0:	50 40       	sbci	r21, 0x00	; 0
    12b2:	e6 95       	lsr	r30
    12b4:	00 1c       	adc	r0, r0
    12b6:	ca f7       	brpl	.-14     	; 0x12aa <__divsf3_pse+0x2c>
    12b8:	29 d0       	rcall	.+82     	; 0x130c <__divsf3_pse+0x8e>
    12ba:	fe 2f       	mov	r31, r30
    12bc:	27 d0       	rcall	.+78     	; 0x130c <__divsf3_pse+0x8e>
    12be:	66 0f       	add	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	88 1f       	adc	r24, r24
    12c4:	bb 1f       	adc	r27, r27
    12c6:	26 17       	cp	r18, r22
    12c8:	37 07       	cpc	r19, r23
    12ca:	48 07       	cpc	r20, r24
    12cc:	ab 07       	cpc	r26, r27
    12ce:	b0 e8       	ldi	r27, 0x80	; 128
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <__divsf3_pse+0x56>
    12d2:	bb 0b       	sbc	r27, r27
    12d4:	80 2d       	mov	r24, r0
    12d6:	bf 01       	movw	r22, r30
    12d8:	ff 27       	eor	r31, r31
    12da:	93 58       	subi	r25, 0x83	; 131
    12dc:	5f 4f       	sbci	r21, 0xFF	; 255
    12de:	2a f0       	brmi	.+10     	; 0x12ea <__divsf3_pse+0x6c>
    12e0:	9e 3f       	cpi	r25, 0xFE	; 254
    12e2:	51 05       	cpc	r21, r1
    12e4:	68 f0       	brcs	.+26     	; 0x1300 <__divsf3_pse+0x82>
    12e6:	e4 ce       	rjmp	.-568    	; 0x10b0 <__fp_inf>
    12e8:	2e cf       	rjmp	.-420    	; 0x1146 <__fp_szero>
    12ea:	5f 3f       	cpi	r21, 0xFF	; 255
    12ec:	ec f3       	brlt	.-6      	; 0x12e8 <__divsf3_pse+0x6a>
    12ee:	98 3e       	cpi	r25, 0xE8	; 232
    12f0:	dc f3       	brlt	.-10     	; 0x12e8 <__divsf3_pse+0x6a>
    12f2:	86 95       	lsr	r24
    12f4:	77 95       	ror	r23
    12f6:	67 95       	ror	r22
    12f8:	b7 95       	ror	r27
    12fa:	f7 95       	ror	r31
    12fc:	9f 5f       	subi	r25, 0xFF	; 255
    12fe:	c9 f7       	brne	.-14     	; 0x12f2 <__divsf3_pse+0x74>
    1300:	88 0f       	add	r24, r24
    1302:	91 1d       	adc	r25, r1
    1304:	96 95       	lsr	r25
    1306:	87 95       	ror	r24
    1308:	97 f9       	bld	r25, 7
    130a:	08 95       	ret
    130c:	e1 e0       	ldi	r30, 0x01	; 1
    130e:	66 0f       	add	r22, r22
    1310:	77 1f       	adc	r23, r23
    1312:	88 1f       	adc	r24, r24
    1314:	bb 1f       	adc	r27, r27
    1316:	62 17       	cp	r22, r18
    1318:	73 07       	cpc	r23, r19
    131a:	84 07       	cpc	r24, r20
    131c:	ba 07       	cpc	r27, r26
    131e:	20 f0       	brcs	.+8      	; 0x1328 <__divsf3_pse+0xaa>
    1320:	62 1b       	sub	r22, r18
    1322:	73 0b       	sbc	r23, r19
    1324:	84 0b       	sbc	r24, r20
    1326:	ba 0b       	sbc	r27, r26
    1328:	ee 1f       	adc	r30, r30
    132a:	88 f7       	brcc	.-30     	; 0x130e <__divsf3_pse+0x90>
    132c:	e0 95       	com	r30
    132e:	08 95       	ret

00001330 <__fixunssfsi>:
    1330:	ef de       	rcall	.-546    	; 0x1110 <__fp_splitA>
    1332:	88 f0       	brcs	.+34     	; 0x1356 <__fixunssfsi+0x26>
    1334:	9f 57       	subi	r25, 0x7F	; 127
    1336:	90 f0       	brcs	.+36     	; 0x135c <__fixunssfsi+0x2c>
    1338:	b9 2f       	mov	r27, r25
    133a:	99 27       	eor	r25, r25
    133c:	b7 51       	subi	r27, 0x17	; 23
    133e:	a0 f0       	brcs	.+40     	; 0x1368 <__fixunssfsi+0x38>
    1340:	d1 f0       	breq	.+52     	; 0x1376 <__fixunssfsi+0x46>
    1342:	66 0f       	add	r22, r22
    1344:	77 1f       	adc	r23, r23
__fixunssfsi():
    1346:	88 1f       	adc	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	1a f0       	brmi	.+6      	; 0x1352 <__fixunssfsi+0x22>
    134c:	ba 95       	dec	r27
    134e:	c9 f7       	brne	.-14     	; 0x1342 <__fixunssfsi+0x12>
    1350:	12 c0       	rjmp	.+36     	; 0x1376 <__fixunssfsi+0x46>
    1352:	b1 30       	cpi	r27, 0x01	; 1
    1354:	81 f0       	breq	.+32     	; 0x1376 <__fixunssfsi+0x46>
    1356:	f6 de       	rcall	.-532    	; 0x1144 <__fp_zero>
    1358:	b1 e0       	ldi	r27, 0x01	; 1
    135a:	08 95       	ret
    135c:	f3 ce       	rjmp	.-538    	; 0x1144 <__fp_zero>
    135e:	67 2f       	mov	r22, r23
    1360:	78 2f       	mov	r23, r24
    1362:	88 27       	eor	r24, r24
    1364:	b8 5f       	subi	r27, 0xF8	; 248
    1366:	39 f0       	breq	.+14     	; 0x1376 <__fixunssfsi+0x46>
    1368:	b9 3f       	cpi	r27, 0xF9	; 249
    136a:	cc f3       	brlt	.-14     	; 0x135e <__fixunssfsi+0x2e>
    136c:	86 95       	lsr	r24
    136e:	77 95       	ror	r23
    1370:	67 95       	ror	r22
    1372:	b3 95       	inc	r27
    1374:	d9 f7       	brne	.-10     	; 0x136c <__fixunssfsi+0x3c>
    1376:	3e f4       	brtc	.+14     	; 0x1386 <__fixunssfsi+0x56>
    1378:	90 95       	com	r25
    137a:	80 95       	com	r24
    137c:	70 95       	com	r23
    137e:	61 95       	neg	r22
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	8f 4f       	sbci	r24, 0xFF	; 255
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	08 95       	ret

00001388 <__gesf2>:
__gesf2():
    1388:	0c de       	rcall	.-1000   	; 0xfa2 <__fp_cmp>
    138a:	08 f4       	brcc	.+2      	; 0x138e <__gesf2+0x6>
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	08 95       	ret
    1390:	0e f0       	brts	.+2      	; 0x1394 <__gesf2+0xc>
    1392:	47 c0       	rjmp	.+142    	; 0x1422 <__fp_mpack>
    1394:	93 ce       	rjmp	.-730    	; 0x10bc <__fp_nan>
    1396:	68 94       	set
    1398:	8b ce       	rjmp	.-746    	; 0x10b0 <__fp_inf>

0000139a <log>:
log():
    139a:	ba de       	rcall	.-652    	; 0x1110 <__fp_splitA>
    139c:	c8 f3       	brcs	.-14     	; 0x1390 <__gesf2+0x8>
    139e:	99 23       	and	r25, r25
    13a0:	d1 f3       	breq	.-12     	; 0x1396 <__gesf2+0xe>
    13a2:	c6 f3       	brts	.-16     	; 0x1394 <__gesf2+0xc>
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	1f 93       	push	r17
    13aa:	0f 93       	push	r16
    13ac:	ff 92       	push	r15
    13ae:	c9 2f       	mov	r28, r25
    13b0:	dd 27       	eor	r29, r29
    13b2:	88 23       	and	r24, r24
    13b4:	2a f0       	brmi	.+10     	; 0x13c0 <log+0x26>
    13b6:	21 97       	sbiw	r28, 0x01	; 1
    13b8:	66 0f       	add	r22, r22
    13ba:	77 1f       	adc	r23, r23
    13bc:	88 1f       	adc	r24, r24
    13be:	da f7       	brpl	.-10     	; 0x13b6 <log+0x1c>
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e8       	ldi	r20, 0x80	; 128
    13c6:	5f eb       	ldi	r21, 0xBF	; 191
    13c8:	9f e3       	ldi	r25, 0x3F	; 63
    13ca:	88 39       	cpi	r24, 0x98	; 152
    13cc:	20 f0       	brcs	.+8      	; 0x13d6 <log+0x3c>
    13ce:	80 3e       	cpi	r24, 0xE0	; 224
    13d0:	30 f0       	brcs	.+12     	; 0x13de <log+0x44>
    13d2:	21 96       	adiw	r28, 0x01	; 1
    13d4:	8f 77       	andi	r24, 0x7F	; 127
    13d6:	e0 de       	rcall	.-576    	; 0x1198 <__addsf3>
    13d8:	e6 e2       	ldi	r30, 0x26	; 38
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	03 c0       	rjmp	.+6      	; 0x13e4 <log+0x4a>
    13de:	dc de       	rcall	.-584    	; 0x1198 <__addsf3>
    13e0:	e3 e5       	ldi	r30, 0x53	; 83
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	2c d0       	rcall	.+88     	; 0x143e <__fp_powser>
    13e6:	8b 01       	movw	r16, r22
    13e8:	be 01       	movw	r22, r28
    13ea:	ec 01       	movw	r28, r24
    13ec:	fb 2e       	mov	r15, r27
    13ee:	6f 57       	subi	r22, 0x7F	; 127
    13f0:	71 09       	sbc	r23, r1
    13f2:	75 95       	asr	r23
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 0b       	sbc	r24, r24
    13f8:	99 0b       	sbc	r25, r25
    13fa:	98 dd       	rcall	.-1232   	; 0xf2c <__floatsisf>
    13fc:	28 e1       	ldi	r18, 0x18	; 24
    13fe:	32 e7       	ldi	r19, 0x72	; 114
    1400:	41 e3       	ldi	r20, 0x31	; 49
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	fe dd       	rcall	.-1028   	; 0x1002 <__mulsf3x>
    1406:	af 2d       	mov	r26, r15
    1408:	98 01       	movw	r18, r16
    140a:	ae 01       	movw	r20, r28
    140c:	ff 90       	pop	r15
    140e:	0f 91       	pop	r16
    1410:	1f 91       	pop	r17
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	d1 de       	rcall	.-606    	; 0x11ba <__addsf3x>
    1418:	62 ce       	rjmp	.-828    	; 0x10de <__fp_round>

0000141a <__unordsf2>:
    141a:	c3 dd       	rcall	.-1146   	; 0xfa2 <__fp_cmp>
    141c:	88 0b       	sbc	r24, r24
    141e:	99 0b       	sbc	r25, r25
    1420:	08 95       	ret

00001422 <__fp_mpack>:
    1422:	9f 3f       	cpi	r25, 0xFF	; 255
__fp_mpack():
    1424:	31 f0       	breq	.+12     	; 0x1432 <__fp_mpack_finite+0xc>

00001426 <__fp_mpack_finite>:
    1426:	91 50       	subi	r25, 0x01	; 1
    1428:	20 f4       	brcc	.+8      	; 0x1432 <__fp_mpack_finite+0xc>
    142a:	87 95       	ror	r24
    142c:	77 95       	ror	r23
    142e:	67 95       	ror	r22
    1430:	b7 95       	ror	r27
    1432:	88 0f       	add	r24, r24
    1434:	91 1d       	adc	r25, r1
    1436:	96 95       	lsr	r25
    1438:	87 95       	ror	r24
    143a:	97 f9       	bld	r25, 7
    143c:	08 95       	ret

0000143e <__fp_powser>:
__fp_powser():
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	1f 93       	push	r17
    1444:	0f 93       	push	r16
    1446:	ff 92       	push	r15
    1448:	ef 92       	push	r14
    144a:	df 92       	push	r13
    144c:	7b 01       	movw	r14, r22
    144e:	8c 01       	movw	r16, r24
    1450:	68 94       	set
    1452:	05 c0       	rjmp	.+10     	; 0x145e <__fp_powser+0x20>
    1454:	da 2e       	mov	r13, r26
    1456:	ef 01       	movw	r28, r30
    1458:	d4 dd       	rcall	.-1112   	; 0x1002 <__mulsf3x>
    145a:	fe 01       	movw	r30, r28
    145c:	e8 94       	clt
    145e:	a5 91       	lpm	r26, Z+
    1460:	25 91       	lpm	r18, Z+
    1462:	35 91       	lpm	r19, Z+
    1464:	45 91       	lpm	r20, Z+
    1466:	55 91       	lpm	r21, Z+
    1468:	ae f3       	brts	.-22     	; 0x1454 <__fp_powser+0x16>
    146a:	ef 01       	movw	r28, r30
    146c:	a6 de       	rcall	.-692    	; 0x11ba <__addsf3x>
    146e:	fe 01       	movw	r30, r28
    1470:	97 01       	movw	r18, r14
    1472:	a8 01       	movw	r20, r16
    1474:	da 94       	dec	r13
    1476:	79 f7       	brne	.-34     	; 0x1456 <__fp_powser+0x18>
    1478:	df 90       	pop	r13
    147a:	ef 90       	pop	r14
    147c:	ff 90       	pop	r15
    147e:	0f 91       	pop	r16
    1480:	1f 91       	pop	r17
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1488:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    148a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    148c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    148e:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1490:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1492:	09 94       	ijmp

00001494 <malloc>:
malloc():
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	91 05       	cpc	r25, r1
    14a0:	10 f4       	brcc	.+4      	; 0x14a6 <malloc+0x12>
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__flp>
    14aa:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <__flp+0x1>
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	30 97       	sbiw	r30, 0x00	; 0
    14b8:	99 f4       	brne	.+38     	; 0x14e0 <malloc+0x4c>
    14ba:	21 15       	cp	r18, r1
    14bc:	31 05       	cpc	r19, r1
    14be:	09 f4       	brne	.+2      	; 0x14c2 <malloc+0x2e>
    14c0:	4a c0       	rjmp	.+148    	; 0x1556 <malloc+0xc2>
    14c2:	28 1b       	sub	r18, r24
    14c4:	39 0b       	sbc	r19, r25
    14c6:	24 30       	cpi	r18, 0x04	; 4
    14c8:	31 05       	cpc	r19, r1
    14ca:	d8 f5       	brcc	.+118    	; 0x1542 <malloc+0xae>
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	9b 81       	ldd	r25, Y+3	; 0x03
    14d0:	61 15       	cp	r22, r1
    14d2:	71 05       	cpc	r23, r1
    14d4:	89 f1       	breq	.+98     	; 0x1538 <malloc+0xa4>
    14d6:	fb 01       	movw	r30, r22
    14d8:	93 83       	std	Z+3, r25	; 0x03
    14da:	82 83       	std	Z+2, r24	; 0x02
    14dc:	fe 01       	movw	r30, r28
    14de:	11 c0       	rjmp	.+34     	; 0x1502 <malloc+0x6e>
    14e0:	40 81       	ld	r20, Z
    14e2:	51 81       	ldd	r21, Z+1	; 0x01
    14e4:	02 81       	ldd	r16, Z+2	; 0x02
    14e6:	13 81       	ldd	r17, Z+3	; 0x03
    14e8:	48 17       	cp	r20, r24
    14ea:	59 07       	cpc	r21, r25
    14ec:	e0 f0       	brcs	.+56     	; 0x1526 <malloc+0x92>
    14ee:	48 17       	cp	r20, r24
    14f0:	59 07       	cpc	r21, r25
    14f2:	99 f4       	brne	.+38     	; 0x151a <malloc+0x86>
    14f4:	10 97       	sbiw	r26, 0x00	; 0
    14f6:	61 f0       	breq	.+24     	; 0x1510 <malloc+0x7c>
    14f8:	12 96       	adiw	r26, 0x02	; 2
    14fa:	0c 93       	st	X, r16
    14fc:	12 97       	sbiw	r26, 0x02	; 2
    14fe:	13 96       	adiw	r26, 0x03	; 3
    1500:	1c 93       	st	X, r17
    1502:	32 96       	adiw	r30, 0x02	; 2
    1504:	cf 01       	movw	r24, r30
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	08 95       	ret
    1510:	00 93 1a 02 	sts	0x021A, r16	; 0x80021a <__flp>
    1514:	10 93 1b 02 	sts	0x021B, r17	; 0x80021b <__flp+0x1>
    1518:	f4 cf       	rjmp	.-24     	; 0x1502 <malloc+0x6e>
    151a:	21 15       	cp	r18, r1
    151c:	31 05       	cpc	r19, r1
    151e:	51 f0       	breq	.+20     	; 0x1534 <malloc+0xa0>
    1520:	42 17       	cp	r20, r18
    1522:	53 07       	cpc	r21, r19
    1524:	38 f0       	brcs	.+14     	; 0x1534 <malloc+0xa0>
    1526:	a9 01       	movw	r20, r18
    1528:	db 01       	movw	r26, r22
    152a:	9a 01       	movw	r18, r20
    152c:	bd 01       	movw	r22, r26
    152e:	df 01       	movw	r26, r30
    1530:	f8 01       	movw	r30, r16
    1532:	c1 cf       	rjmp	.-126    	; 0x14b6 <malloc+0x22>
    1534:	ef 01       	movw	r28, r30
    1536:	f9 cf       	rjmp	.-14     	; 0x152a <malloc+0x96>
    1538:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <__flp+0x1>
    153c:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__flp>
    1540:	cd cf       	rjmp	.-102    	; 0x14dc <malloc+0x48>
    1542:	fe 01       	movw	r30, r28
    1544:	e2 0f       	add	r30, r18
    1546:	f3 1f       	adc	r31, r19
    1548:	81 93       	st	Z+, r24
    154a:	91 93       	st	Z+, r25
    154c:	22 50       	subi	r18, 0x02	; 2
    154e:	31 09       	sbc	r19, r1
    1550:	39 83       	std	Y+1, r19	; 0x01
    1552:	28 83       	st	Y, r18
    1554:	d7 cf       	rjmp	.-82     	; 0x1504 <malloc+0x70>
    1556:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__brkval>
    155a:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <__brkval+0x1>
    155e:	23 2b       	or	r18, r19
    1560:	41 f4       	brne	.+16     	; 0x1572 <malloc+0xde>
    1562:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1566:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    156a:	30 93 19 02 	sts	0x0219, r19	; 0x800219 <__brkval+0x1>
    156e:	20 93 18 02 	sts	0x0218, r18	; 0x800218 <__brkval>
    1572:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1576:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    157a:	21 15       	cp	r18, r1
    157c:	31 05       	cpc	r19, r1
    157e:	41 f4       	brne	.+16     	; 0x1590 <malloc+0xfc>
    1580:	2d b7       	in	r18, 0x3d	; 61
    1582:	3e b7       	in	r19, 0x3e	; 62
    1584:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1588:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    158c:	24 1b       	sub	r18, r20
    158e:	35 0b       	sbc	r19, r21
    1590:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__brkval>
    1594:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__brkval+0x1>
    1598:	e2 17       	cp	r30, r18
    159a:	f3 07       	cpc	r31, r19
    159c:	a0 f4       	brcc	.+40     	; 0x15c6 <malloc+0x132>
    159e:	2e 1b       	sub	r18, r30
    15a0:	3f 0b       	sbc	r19, r31
    15a2:	28 17       	cp	r18, r24
    15a4:	39 07       	cpc	r19, r25
    15a6:	78 f0       	brcs	.+30     	; 0x15c6 <malloc+0x132>
    15a8:	ac 01       	movw	r20, r24
    15aa:	4e 5f       	subi	r20, 0xFE	; 254
    15ac:	5f 4f       	sbci	r21, 0xFF	; 255
    15ae:	24 17       	cp	r18, r20
    15b0:	35 07       	cpc	r19, r21
    15b2:	48 f0       	brcs	.+18     	; 0x15c6 <malloc+0x132>
    15b4:	4e 0f       	add	r20, r30
    15b6:	5f 1f       	adc	r21, r31
    15b8:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <__brkval+0x1>
    15bc:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <__brkval>
    15c0:	81 93       	st	Z+, r24
    15c2:	91 93       	st	Z+, r25
    15c4:	9f cf       	rjmp	.-194    	; 0x1504 <malloc+0x70>
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	e0 e0       	ldi	r30, 0x00	; 0
    15ca:	9c cf       	rjmp	.-200    	; 0x1504 <malloc+0x70>

000015cc <free>:
free():
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	e9 f0       	breq	.+58     	; 0x160e <free+0x42>
    15d4:	fc 01       	movw	r30, r24
    15d6:	32 97       	sbiw	r30, 0x02	; 2
    15d8:	13 82       	std	Z+3, r1	; 0x03
    15da:	12 82       	std	Z+2, r1	; 0x02
    15dc:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <__flp>
    15e0:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <__flp+0x1>
    15e4:	ed 01       	movw	r28, r26
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	10 97       	sbiw	r26, 0x00	; 0
    15ec:	a1 f4       	brne	.+40     	; 0x1616 <free+0x4a>
    15ee:	20 81       	ld	r18, Z
    15f0:	31 81       	ldd	r19, Z+1	; 0x01
    15f2:	82 0f       	add	r24, r18
    15f4:	93 1f       	adc	r25, r19
    15f6:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__brkval>
    15fa:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <__brkval+0x1>
    15fe:	28 17       	cp	r18, r24
    1600:	39 07       	cpc	r19, r25
    1602:	09 f0       	breq	.+2      	; 0x1606 <free+0x3a>
    1604:	61 c0       	rjmp	.+194    	; 0x16c8 <free+0xfc>
    1606:	f0 93 19 02 	sts	0x0219, r31	; 0x800219 <__brkval+0x1>
    160a:	e0 93 18 02 	sts	0x0218, r30	; 0x800218 <__brkval>
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret
    1614:	ea 01       	movw	r28, r20
    1616:	ce 17       	cp	r28, r30
    1618:	df 07       	cpc	r29, r31
    161a:	e8 f5       	brcc	.+122    	; 0x1696 <free+0xca>
    161c:	4a 81       	ldd	r20, Y+2	; 0x02
    161e:	5b 81       	ldd	r21, Y+3	; 0x03
    1620:	9e 01       	movw	r18, r28
    1622:	41 15       	cp	r20, r1
    1624:	51 05       	cpc	r21, r1
    1626:	b1 f7       	brne	.-20     	; 0x1614 <free+0x48>
    1628:	e9 01       	movw	r28, r18
    162a:	fb 83       	std	Y+3, r31	; 0x03
    162c:	ea 83       	std	Y+2, r30	; 0x02
    162e:	49 91       	ld	r20, Y+
    1630:	59 91       	ld	r21, Y+
    1632:	c4 0f       	add	r28, r20
    1634:	d5 1f       	adc	r29, r21
    1636:	ec 17       	cp	r30, r28
    1638:	fd 07       	cpc	r31, r29
    163a:	61 f4       	brne	.+24     	; 0x1654 <free+0x88>
    163c:	80 81       	ld	r24, Z
    163e:	91 81       	ldd	r25, Z+1	; 0x01
    1640:	02 96       	adiw	r24, 0x02	; 2
    1642:	84 0f       	add	r24, r20
    1644:	95 1f       	adc	r25, r21
    1646:	e9 01       	movw	r28, r18
    1648:	99 83       	std	Y+1, r25	; 0x01
    164a:	88 83       	st	Y, r24
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	9b 83       	std	Y+3, r25	; 0x03
    1652:	8a 83       	std	Y+2, r24	; 0x02
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	e0 e0       	ldi	r30, 0x00	; 0
    1658:	12 96       	adiw	r26, 0x02	; 2
    165a:	8d 91       	ld	r24, X+
    165c:	9c 91       	ld	r25, X
    165e:	13 97       	sbiw	r26, 0x03	; 3
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	b9 f5       	brne	.+110    	; 0x16d2 <free+0x106>
    1664:	2d 91       	ld	r18, X+
    1666:	3c 91       	ld	r19, X
    1668:	11 97       	sbiw	r26, 0x01	; 1
    166a:	cd 01       	movw	r24, r26
    166c:	02 96       	adiw	r24, 0x02	; 2
    166e:	82 0f       	add	r24, r18
    1670:	93 1f       	adc	r25, r19
    1672:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__brkval>
    1676:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <__brkval+0x1>
    167a:	28 17       	cp	r18, r24
    167c:	39 07       	cpc	r19, r25
    167e:	39 f6       	brne	.-114    	; 0x160e <free+0x42>
    1680:	30 97       	sbiw	r30, 0x00	; 0
    1682:	51 f5       	brne	.+84     	; 0x16d8 <free+0x10c>
    1684:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <__flp+0x1>
    1688:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__flp>
    168c:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <__brkval+0x1>
    1690:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <__brkval>
    1694:	bc cf       	rjmp	.-136    	; 0x160e <free+0x42>
    1696:	d3 83       	std	Z+3, r29	; 0x03
    1698:	c2 83       	std	Z+2, r28	; 0x02
    169a:	40 81       	ld	r20, Z
    169c:	51 81       	ldd	r21, Z+1	; 0x01
    169e:	84 0f       	add	r24, r20
    16a0:	95 1f       	adc	r25, r21
    16a2:	c8 17       	cp	r28, r24
    16a4:	d9 07       	cpc	r29, r25
    16a6:	61 f4       	brne	.+24     	; 0x16c0 <free+0xf4>
    16a8:	4e 5f       	subi	r20, 0xFE	; 254
    16aa:	5f 4f       	sbci	r21, 0xFF	; 255
    16ac:	88 81       	ld	r24, Y
    16ae:	99 81       	ldd	r25, Y+1	; 0x01
    16b0:	48 0f       	add	r20, r24
    16b2:	59 1f       	adc	r21, r25
    16b4:	51 83       	std	Z+1, r21	; 0x01
    16b6:	40 83       	st	Z, r20
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	93 83       	std	Z+3, r25	; 0x03
    16be:	82 83       	std	Z+2, r24	; 0x02
    16c0:	21 15       	cp	r18, r1
    16c2:	31 05       	cpc	r19, r1
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <free+0xfc>
    16c6:	b0 cf       	rjmp	.-160    	; 0x1628 <free+0x5c>
    16c8:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__flp+0x1>
    16cc:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__flp>
    16d0:	9e cf       	rjmp	.-196    	; 0x160e <free+0x42>
    16d2:	fd 01       	movw	r30, r26
    16d4:	dc 01       	movw	r26, r24
    16d6:	c0 cf       	rjmp	.-128    	; 0x1658 <free+0x8c>
    16d8:	13 82       	std	Z+3, r1	; 0x03
    16da:	12 82       	std	Z+2, r1	; 0x02
    16dc:	d7 cf       	rjmp	.-82     	; 0x168c <free+0xc0>

000016de <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    16de:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    16e0:	c3 e7       	ldi	r28, 0x73	; 115
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    16e2:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    16e4:	03 c0       	rjmp	.+6      	; 0x16ec <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    16e6:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    16e8:	cf de       	rcall	.-610    	; 0x1488 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    16ea:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    16ec:	c4 37       	cpi	r28, 0x74	; 116
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    16ee:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    16f0:	d1 f7       	brne	.-12     	; 0x16e6 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    16f2:	f8 94       	cli

000016f4 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    16f4:	ff cf       	rjmp	.-2      	; 0x16f4 <__stop_program>
