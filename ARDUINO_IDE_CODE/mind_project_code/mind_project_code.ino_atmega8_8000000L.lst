
C:\Users\Lenovo\AppData\Local\Temp\arduino\sketches\F57F6D0E75B2A2C07C77DAA0725859E4/mind_project_code.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	d4 c0       	rjmp	.+424    	; 0x1aa <__dtors_end>
       2:	f8 c0       	rjmp	.+496    	; 0x1f4 <__bad_interrupt>
       4:	f7 c0       	rjmp	.+494    	; 0x1f4 <__bad_interrupt>
       6:	f6 c0       	rjmp	.+492    	; 0x1f4 <__bad_interrupt>
       8:	f5 c0       	rjmp	.+490    	; 0x1f4 <__bad_interrupt>
       a:	f4 c0       	rjmp	.+488    	; 0x1f4 <__bad_interrupt>
       c:	ec c5       	rjmp	.+3032   	; 0xbe6 <__vector_6>
       e:	f2 c0       	rjmp	.+484    	; 0x1f4 <__bad_interrupt>
      10:	f1 c0       	rjmp	.+482    	; 0x1f4 <__bad_interrupt>
      12:	3d c4       	rjmp	.+2170   	; 0x88e <__vector_9>
      14:	ef c0       	rjmp	.+478    	; 0x1f4 <__bad_interrupt>
      16:	aa c4       	rjmp	.+2388   	; 0x96c <__vector_11>
      18:	84 c4       	rjmp	.+2312   	; 0x922 <__vector_12>
      1a:	ec c0       	rjmp	.+472    	; 0x1f4 <__bad_interrupt>
      1c:	eb c0       	rjmp	.+470    	; 0x1f4 <__bad_interrupt>
      1e:	ea c0       	rjmp	.+468    	; 0x1f4 <__bad_interrupt>
      20:	e9 c0       	rjmp	.+466    	; 0x1f4 <__bad_interrupt>
      22:	d6 c4       	rjmp	.+2476   	; 0x9d0 <__vector_17>
      24:	e7 c0       	rjmp	.+462    	; 0x1f4 <__bad_interrupt>
      26:	08 00       	.word	0x0008	; ????
      28:	00 00       	nop
      2a:	be 92       	st	-X, r11
      2c:	24 49       	sbci	r18, 0x94	; 148
      2e:	12 3e       	cpi	r17, 0xE2	; 226
      30:	ab aa       	std	Y+51, r10	; 0x33
      32:	aa 2a       	or	r10, r26
      34:	be cd       	rjmp	.-1156   	; 0xfffffbb2 <__eeprom_end+0xff7efbb2>
      36:	cc cc       	rjmp	.-1640   	; 0xfffff9d0 <__eeprom_end+0xff7ef9d0>
      38:	4c 3e       	cpi	r20, 0xEC	; 236
      3a:	00 00       	nop
      3c:	00 80       	ld	r0, Z
      3e:	be ab       	std	Y+54, r27	; 0x36
      40:	aa aa       	std	Y+50, r10	; 0x32
      42:	aa 3e       	cpi	r26, 0xEA	; 234
      44:	00 00       	nop
      46:	00 00       	nop
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	00 00       	nop
      50:	00 00       	nop
      52:	00 08       	sbc	r0, r0
      54:	41 78       	andi	r20, 0x81	; 129
      56:	d3 bb       	out	0x13, r29	; 19
      58:	43 87       	std	Z+11, r20	; 0x0b
      5a:	d1 13       	cpse	r29, r17
      5c:	3d 19       	sub	r19, r13
      5e:	0e 3c       	cpi	r16, 0xCE	; 206
      60:	c3 bd       	out	0x23, r28	; 35
      62:	42 82       	std	Z+2, r4	; 0x02
      64:	ad 2b       	or	r26, r29
      66:	3e 68       	ori	r19, 0x8E	; 142
      68:	ec 82       	std	Y+4, r14	; 0x04
      6a:	76 be       	out	0x36, r7	; 54
      6c:	d9 8f       	std	Y+25, r29	; 0x19
      6e:	e1 a9       	ldd	r30, Z+49	; 0x31
      70:	3e 4c       	sbci	r19, 0xCE	; 206
      72:	80 ef       	ldi	r24, 0xF0	; 240
      74:	ff be       	out	0x3f, r15	; 63
      76:	01 c4       	rjmp	.+2050   	; 0x87a <Print::print(long, int) [clone .part.3] [clone .constprop.23]+0x2a>
      78:	ff 7f       	andi	r31, 0xFF	; 255
      7a:	3f 00       	.word	0x003f	; ????
      7c:	00 00       	nop
	...

00000080 <__trampolines_end>:
__trampolines_start():
      80:	45 4e       	sbci	r20, 0xE5	; 229
      82:	54 45       	sbci	r21, 0x54	; 84
      84:	52 20       	and	r5, r2
      86:	50 41       	sbci	r21, 0x10	; 16
      88:	53 53       	subi	r21, 0x33	; 51
      8a:	3a 00       	.word	0x003a	; ????

0000008c <temperature_sys_activate()::__c>:
      8c:	2a 43 00                                            *C.

0000008f <temperature_sys_activate()::__c>:
      8f:	54 65 6d 70 3a 20 00                                Temp: .

00000096 <ldr_sys_activate()::__c>:
      96:	6c 69 67 68 74 20 6c 65 76 65 6c 3a 00              light level:.

000000a3 <keymap>:
      a3:	37 38 39 2f 34 35 36 2a 31 32 33 2d 63 30 3d 2b     789/456*123-c0=+

000000b3 <loop::__c>:
      b3:	50 61 73 73 77 6f 72 64 20 69 6e 63 6f 72 72 65     Password incorre
      c3:	63 74 2e 20 54 72 79 20 61 67 61 69 6e 2e 00        ct. Try again..

000000d2 <loop::__c>:
      d2:	50 61 73 73 77 6f 72 64 20 63 6f 72 72 65 63 74     Password correct
      e2:	2e 20 44 6f 6f 72 20 6f 70 65 6e 65 64 2e 00        . Door opened..

000000f1 <saved_pass>:
      f1:	34 35 34 35 00                                      4545.

000000f6 <loop::__c>:
      f6:	45 6e 74 65 72 65 64 20 50 61 73 73 77 6f 72 64     Entered Password
     106:	3a 20 00                                            : .

00000109 <loop::__c>:
     109:	4b 65 79 20 50 72 65 73 73 65 64 3a 20 00           Key Pressed: .

00000117 <loop::__c>:
     117:	45 4e 54 45 52 20 50 41 53 53 3a 00                 ENTER PASS:.

00000123 <loop::__c>:
     123:	44 6f 6f 72 20 69 73 20 63 6c 6f 73 65 64 2e 00     Door is closed..

00000133 <loop::__c>:
     133:	44 6f 6f 72 20 69 73 20 6f 70 65 6e 65 64 2e 00     Door is opened..

00000143 <port_to_mode_PGM>:
     143:	00 00 00 00 37 00 34 00 31 00                       ....7.4.1.

0000014d <digital_pin_to_timer_PGM>:
	...
     155:	00 04 05 07 00 00 00 00 00 00 00 00 00 00 00        ...............

00000164 <port_to_input_PGM>:
     164:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

0000016e <digital_pin_to_bit_mask_PGM>:
     16e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     17e:	04 08 10 20 40 80 40                                ... @.@

00000185 <port_to_output_PGM>:
     185:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

0000018f <digital_pin_to_port_PGM>:
     18f:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     19f:	03 03 03 03 02 02 03                                .......

000001a6 <__ctors_start>:
__ctors_start():
     1a6:	a1 06       	cpc	r10, r17

000001a8 <__ctors_end>:
__dtors_start():
     1a8:	87 0a       	sbc	r8, r23

000001aa <__dtors_end>:
__dtors_end():
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf e5       	ldi	r28, 0x5F	; 95
     1b0:	d4 e0       	ldi	r29, 0x04	; 4
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     1b6:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     1b8:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     1ba:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     1bc:	e8 e9       	ldi	r30, 0x98	; 152
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     1be:	fd e1       	ldi	r31, 0x1D	; 29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     1c2:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     1c4:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     1c6:	a4 38       	cpi	r26, 0x84	; 132
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     1c8:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1cc:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1ce:	a4 e8       	ldi	r26, 0x84	; 132
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1d6:	ab 3e       	cpi	r26, 0xEB	; 235
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1d8:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>

000001dc <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1dc:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1de:	c4 ed       	ldi	r28, 0xD4	; 212
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     1e0:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1e2:	03 c0       	rjmp	.+6      	; 0x1ea <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     1e4:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1e6:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1e8:	a0 dc       	rcall	.-1728   	; 0xfffffb2a <__eeprom_end+0xff7efb2a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1ea:	c3 3d       	cpi	r28, 0xD3	; 211
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1ec:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1ee:	d1 f7       	brne	.-12     	; 0x1e4 <__do_global_ctors+0x8>
     1f0:	b5 d6       	rcall	.+3434   	; 0xf5c <main>
     1f2:	c6 cd       	rjmp	.-1140   	; 0xfffffd80 <__eeprom_end+0xff7efd80>

000001f4 <__bad_interrupt>:
__vector_1():
     1f4:	05 cf       	rjmp	.-502    	; 0x0 <__vectors>

000001f6 <Servo::write(int) [clone .constprop.31]>:
_ZN5Servo5writeEi.constprop.31():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:264
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}

void Servo::write(int value)
     1f6:	8f 92       	push	r8
     1f8:	9f 92       	push	r9
     1fa:	af 92       	push	r10
     1fc:	bf 92       	push	r11
     1fe:	ff 92       	push	r15
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
writeMicroseconds():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:278
}

void Servo::writeMicroseconds(int value)
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     208:	f0 90 e4 01 	lds	r15, 0x01E4	; 0x8001e4 <myservo>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:279
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     20c:	2b e0       	ldi	r18, 0x0B	; 11
     20e:	2f 15       	cp	r18, r15
     210:	08 f4       	brcc	.+2      	; 0x214 <Servo::write(int) [clone .constprop.31]+0x1e>
     212:	48 c0       	rjmp	.+144    	; 0x2a4 <Servo::write(int) [clone .constprop.31]+0xae>
_ZN5Servo5writeEi.constprop.31():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:270
{
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
     214:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <myservo+0x2>
     218:	08 e5       	ldi	r16, 0x58	; 88
     21a:	12 e0       	ldi	r17, 0x02	; 2
     21c:	02 1b       	sub	r16, r18
     21e:	11 09       	sbc	r17, r1
     220:	27 fd       	sbrc	r18, 7
     222:	13 95       	inc	r17
     224:	00 0f       	add	r16, r16
     226:	11 1f       	adc	r17, r17
     228:	00 0f       	add	r16, r16
     22a:	11 1f       	adc	r17, r17
     22c:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <myservo+0x1>
     230:	c8 e8       	ldi	r28, 0x88	; 136
     232:	d0 e0       	ldi	r29, 0x00	; 0
     234:	c2 1b       	sub	r28, r18
     236:	d1 09       	sbc	r29, r1
     238:	27 fd       	sbrc	r18, 7
     23a:	d3 95       	inc	r29
     23c:	cc 0f       	add	r28, r28
     23e:	dd 1f       	adc	r29, r29
     240:	cc 0f       	add	r28, r28
     242:	dd 1f       	adc	r29, r29
     244:	4e 01       	movw	r8, r28
     246:	0d 2e       	mov	r0, r29
     248:	00 0c       	add	r0, r0
     24a:	aa 08       	sbc	r10, r10
     24c:	bb 08       	sbc	r11, r11
     24e:	98 01       	movw	r18, r16
     250:	01 2e       	mov	r0, r17
     252:	00 0c       	add	r0, r0
     254:	44 0b       	sbc	r20, r20
     256:	55 0b       	sbc	r21, r21
map():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WMath.cpp:54
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     258:	28 19       	sub	r18, r8
     25a:	39 09       	sbc	r19, r9
     25c:	4a 09       	sbc	r20, r10
     25e:	5b 09       	sbc	r21, r11
     260:	dc 01       	movw	r26, r24
     262:	a9 da       	rcall	.-2734   	; 0xfffff7b6 <__eeprom_end+0xff7ef7b6>
     264:	24 eb       	ldi	r18, 0xB4	; 180
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	7e da       	rcall	.-2820   	; 0xfffff76a <__eeprom_end+0xff7ef76a>
     26e:	82 0e       	add	r8, r18
     270:	93 1e       	adc	r9, r19
     272:	a4 1e       	adc	r10, r20
     274:	b5 1e       	adc	r11, r21
writeMicroseconds():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:281
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     276:	8c 16       	cp	r8, r28
     278:	9d 06       	cpc	r9, r29
     27a:	2c f0       	brlt	.+10     	; 0x286 <Servo::write(int) [clone .constprop.31]+0x90>
     27c:	e8 01       	movw	r28, r16
     27e:	80 16       	cp	r8, r16
     280:	91 06       	cpc	r9, r17
     282:	0c f4       	brge	.+2      	; 0x286 <Servo::write(int) [clone .constprop.31]+0x90>
     284:	e4 01       	movw	r28, r8
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:289
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009

    uint8_t oldSREG = SREG;
     286:	2f b7       	in	r18, 0x3f	; 63
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:290
    cli();
     288:	f8 94       	cli
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:291
    servos[channel].ticks = value;
     28a:	8f 2d       	mov	r24, r15
     28c:	90 e0       	ldi	r25, 0x00	; 0
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:286
    if( value < SERVO_MIN() )          // ensure pulse width is valid
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
     28e:	22 97       	sbiw	r28, 0x02	; 2
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:291
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009

    uint8_t oldSREG = SREG;
    cli();
    servos[channel].ticks = value;
     290:	fc 01       	movw	r30, r24
     292:	ee 0f       	add	r30, r30
     294:	ff 1f       	adc	r31, r31
     296:	e8 0f       	add	r30, r24
     298:	f9 1f       	adc	r31, r25
     29a:	e1 54       	subi	r30, 0x41	; 65
     29c:	fe 4f       	sbci	r31, 0xFE	; 254
     29e:	d2 83       	std	Z+2, r29	; 0x02
     2a0:	c1 83       	std	Z+1, r28	; 0x01
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:292
    SREG = oldSREG;
     2a2:	2f bf       	out	0x3f, r18	; 63
_ZN5Servo5writeEi.constprop.31():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:273
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	bf 90       	pop	r11
     2b0:	af 90       	pop	r10
     2b2:	9f 90       	pop	r9
     2b4:	8f 90       	pop	r8
     2b6:	08 95       	ret

000002b8 <turnOffPWM>:
turnOffPWM():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     2b8:	85 30       	cpi	r24, 0x05	; 5
     2ba:	41 f0       	breq	.+16     	; 0x2cc <turnOffPWM+0x14>
     2bc:	87 30       	cpi	r24, 0x07	; 7
     2be:	49 f0       	breq	.+18     	; 0x2d2 <turnOffPWM+0x1a>
     2c0:	84 30       	cpi	r24, 0x04	; 4
     2c2:	51 f4       	brne	.+20     	; 0x2d8 <turnOffPWM+0x20>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     2c4:	8f b5       	in	r24, 0x2f	; 47
     2c6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     2c8:	8f bd       	out	0x2f, r24	; 47
     2ca:	08 95       	ret
     2cc:	8f b5       	in	r24, 0x2f	; 47
     2ce:	8f 7d       	andi	r24, 0xDF	; 223
     2d0:	fb cf       	rjmp	.-10     	; 0x2c8 <turnOffPWM+0x10>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     2d2:	85 b5       	in	r24, 0x25	; 37
     2d4:	8f 7d       	andi	r24, 0xDF	; 223
     2d6:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
     2d8:	08 95       	ret

000002da <digitalRead>:
digitalRead():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     2de:	28 2f       	mov	r18, r24
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	f9 01       	movw	r30, r18
     2e4:	e3 5b       	subi	r30, 0xB3	; 179
     2e6:	fe 4f       	sbci	r31, 0xFE	; 254
     2e8:	84 91       	lpm	r24, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     2ea:	f9 01       	movw	r30, r18
     2ec:	e2 59       	subi	r30, 0x92	; 146
     2ee:	fe 4f       	sbci	r31, 0xFE	; 254
     2f0:	d4 91       	lpm	r29, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     2f2:	f9 01       	movw	r30, r18
     2f4:	e1 57       	subi	r30, 0x71	; 113
     2f6:	fe 4f       	sbci	r31, 0xFE	; 254
     2f8:	c4 91       	lpm	r28, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     2fa:	cc 23       	and	r28, r28
     2fc:	99 f0       	breq	.+38     	; 0x324 <digitalRead+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     2fe:	81 11       	cpse	r24, r1
     300:	db df       	rcall	.-74     	; 0x2b8 <turnOffPWM>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     302:	ec 2f       	mov	r30, r28
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	ee 0f       	add	r30, r30
     308:	ff 1f       	adc	r31, r31
     30a:	ec 59       	subi	r30, 0x9C	; 156
     30c:	fe 4f       	sbci	r31, 0xFE	; 254
     30e:	a5 91       	lpm	r26, Z+
     310:	b4 91       	lpm	r27, Z
     312:	ec 91       	ld	r30, X
     314:	ed 23       	and	r30, r29
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	09 f4       	brne	.+2      	; 0x31e <digitalRead+0x44>
     31c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	fa cf       	rjmp	.-12     	; 0x31e <digitalRead+0x44>

0000032a <digitalWrite>:
digitalWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     330:	28 2f       	mov	r18, r24
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	f9 01       	movw	r30, r18
     336:	e3 5b       	subi	r30, 0xB3	; 179
     338:	fe 4f       	sbci	r31, 0xFE	; 254
     33a:	84 91       	lpm	r24, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     33c:	f9 01       	movw	r30, r18
     33e:	e2 59       	subi	r30, 0x92	; 146
     340:	fe 4f       	sbci	r31, 0xFE	; 254
     342:	d4 91       	lpm	r29, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     344:	f9 01       	movw	r30, r18
     346:	e1 57       	subi	r30, 0x71	; 113
     348:	fe 4f       	sbci	r31, 0xFE	; 254
     34a:	c4 91       	lpm	r28, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     34c:	cc 23       	and	r28, r28
     34e:	a1 f0       	breq	.+40     	; 0x378 <digitalWrite+0x4e>
     350:	16 2f       	mov	r17, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     352:	81 11       	cpse	r24, r1
     354:	b1 df       	rcall	.-158    	; 0x2b8 <turnOffPWM>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     356:	ec 2f       	mov	r30, r28
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	ee 0f       	add	r30, r30
     35c:	ff 1f       	adc	r31, r31
     35e:	eb 57       	subi	r30, 0x7B	; 123
     360:	fe 4f       	sbci	r31, 0xFE	; 254
     362:	a5 91       	lpm	r26, Z+
     364:	b4 91       	lpm	r27, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     366:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     368:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     36a:	ec 91       	ld	r30, X
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     36c:	11 11       	cpse	r17, r1
     36e:	08 c0       	rjmp	.+16     	; 0x380 <digitalWrite+0x56>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     370:	d0 95       	com	r29
     372:	de 23       	and	r29, r30
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     374:	dc 93       	st	X, r29
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     376:	8f bf       	out	0x3f, r24	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:212
}
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     380:	de 2b       	or	r29, r30
     382:	f8 cf       	rjmp	.-16     	; 0x374 <digitalWrite+0x4a>

00000384 <pinMode>:
pinMode():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	fc 01       	movw	r30, r24
     38c:	e2 59       	subi	r30, 0x92	; 146
     38e:	fe 4f       	sbci	r31, 0xFE	; 254
     390:	24 91       	lpm	r18, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     392:	81 57       	subi	r24, 0x71	; 113
     394:	9e 4f       	sbci	r25, 0xFE	; 254
     396:	fc 01       	movw	r30, r24
     398:	84 91       	lpm	r24, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     39a:	88 23       	and	r24, r24
     39c:	c9 f0       	breq	.+50     	; 0x3d0 <pinMode+0x4c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	fc 01       	movw	r30, r24
     3a6:	ed 5b       	subi	r30, 0xBD	; 189
     3a8:	fe 4f       	sbci	r31, 0xFE	; 254
     3aa:	a5 91       	lpm	r26, Z+
     3ac:	b4 91       	lpm	r27, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     3ae:	fc 01       	movw	r30, r24
     3b0:	eb 57       	subi	r30, 0x7B	; 123
     3b2:	fe 4f       	sbci	r31, 0xFE	; 254
     3b4:	c5 91       	lpm	r28, Z+
     3b6:	d4 91       	lpm	r29, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     3b8:	61 11       	cpse	r22, r1
     3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <pinMode+0x52>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     3bc:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     3be:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     3c0:	8c 91       	ld	r24, X
     3c2:	20 95       	com	r18
     3c4:	82 23       	and	r24, r18
     3c6:	8c 93       	st	X, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     3c8:	88 81       	ld	r24, Y
     3ca:	28 23       	and	r18, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     3cc:	28 83       	st	Y, r18
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     3ce:	9f bf       	out	0x3f, r25	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     3d6:	62 30       	cpi	r22, 0x02	; 2
     3d8:	51 f4       	brne	.+20     	; 0x3ee <pinMode+0x6a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     3da:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     3dc:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     3de:	3c 91       	ld	r19, X
     3e0:	82 2f       	mov	r24, r18
     3e2:	80 95       	com	r24
     3e4:	83 23       	and	r24, r19
     3e6:	8c 93       	st	X, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     3e8:	e8 81       	ld	r30, Y
     3ea:	2e 2b       	or	r18, r30
     3ec:	ef cf       	rjmp	.-34     	; 0x3cc <pinMode+0x48>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     3ee:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     3f0:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     3f2:	ec 91       	ld	r30, X
     3f4:	2e 2b       	or	r18, r30
     3f6:	2c 93       	st	X, r18
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     3f8:	8f bf       	out	0x3f, r24	; 63
     3fa:	ea cf       	rjmp	.-44     	; 0x3d0 <pinMode+0x4c>

000003fc <micros>:
micros():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     3fc:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     3fe:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     400:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <timer0_overflow_count>
     404:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <timer0_overflow_count+0x1>
     408:	a0 91 e5 00 	lds	r26, 0x00E5	; 0x8000e5 <timer0_overflow_count+0x2>
     40c:	b0 91 e6 00 	lds	r27, 0x00E6	; 0x8000e6 <timer0_overflow_count+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     410:	22 b7       	in	r18, 0x32	; 50
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     412:	08 b6       	in	r0, 0x38	; 56
     414:	00 fe       	sbrs	r0, 0
     416:	05 c0       	rjmp	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     418:	2f 3f       	cpi	r18, 0xFF	; 255
     41a:	19 f0       	breq	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	a1 1d       	adc	r26, r1
     420:	b1 1d       	adc	r27, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     422:	3f bf       	out	0x3f, r19	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     424:	ba 2f       	mov	r27, r26
     426:	a9 2f       	mov	r26, r25
     428:	98 2f       	mov	r25, r24
     42a:	88 27       	eor	r24, r24
     42c:	bc 01       	movw	r22, r24
     42e:	cd 01       	movw	r24, r26
     430:	62 0f       	add	r22, r18
     432:	71 1d       	adc	r23, r1
     434:	81 1d       	adc	r24, r1
     436:	91 1d       	adc	r25, r1
     438:	43 e0       	ldi	r20, 0x03	; 3
     43a:	66 0f       	add	r22, r22
     43c:	77 1f       	adc	r23, r23
     43e:	88 1f       	adc	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	4a 95       	dec	r20
     444:	d1 f7       	brne	.-12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     446:	08 95       	ret

00000448 <delay>:
delay():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     448:	8f 92       	push	r8
     44a:	9f 92       	push	r9
     44c:	af 92       	push	r10
     44e:	bf 92       	push	r11
     450:	cf 92       	push	r12
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	4b 01       	movw	r8, r22
     45a:	5c 01       	movw	r10, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     45c:	cf df       	rcall	.-98     	; 0x3fc <micros>
     45e:	6b 01       	movw	r12, r22
     460:	7c 01       	movw	r14, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     462:	cc df       	rcall	.-104    	; 0x3fc <micros>
     464:	6c 19       	sub	r22, r12
     466:	7d 09       	sbc	r23, r13
     468:	8e 09       	sbc	r24, r14
     46a:	9f 09       	sbc	r25, r15
     46c:	68 3e       	cpi	r22, 0xE8	; 232
     46e:	73 40       	sbci	r23, 0x03	; 3
     470:	81 05       	cpc	r24, r1
     472:	91 05       	cpc	r25, r1
     474:	b0 f3       	brcs	.-20     	; 0x462 <__stack+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	82 1a       	sub	r8, r18
     47a:	91 08       	sbc	r9, r1
     47c:	a1 08       	sbc	r10, r1
     47e:	b1 08       	sbc	r11, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     480:	88 ee       	ldi	r24, 0xE8	; 232
     482:	c8 0e       	add	r12, r24
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	d8 1e       	adc	r13, r24
     488:	e1 1c       	adc	r14, r1
     48a:	f1 1c       	adc	r15, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     48c:	81 14       	cp	r8, r1
     48e:	91 04       	cpc	r9, r1
     490:	a1 04       	cpc	r10, r1
     492:	b1 04       	cpc	r11, r1
     494:	31 f7       	brne	.-52     	; 0x462 <__stack+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	df 90       	pop	r13
     49c:	cf 90       	pop	r12
     49e:	bf 90       	pop	r11
     4a0:	af 90       	pop	r10
     4a2:	9f 90       	pop	r9
     4a4:	8f 90       	pop	r8
     4a6:	08 95       	ret

000004a8 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     4a8:	af 92       	push	r10
     4aa:	bf 92       	push	r11
     4ac:	cf 92       	push	r12
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	6c 01       	movw	r12, r24
     4be:	7b 01       	movw	r14, r22
     4c0:	8b 01       	movw	r16, r22
     4c2:	04 0f       	add	r16, r20
     4c4:	15 1f       	adc	r17, r21
     4c6:	eb 01       	movw	r28, r22
     4c8:	5e 01       	movw	r10, r28
     4ca:	ae 18       	sub	r10, r14
     4cc:	bf 08       	sbc	r11, r15
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     4ce:	c0 17       	cp	r28, r16
     4d0:	d1 07       	cpc	r29, r17
     4d2:	59 f0       	breq	.+22     	; 0x4ea <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     4d4:	69 91       	ld	r22, Y+
     4d6:	d6 01       	movw	r26, r12
     4d8:	ed 91       	ld	r30, X+
     4da:	fc 91       	ld	r31, X
     4dc:	01 90       	ld	r0, Z+
     4de:	f0 81       	ld	r31, Z
     4e0:	e0 2d       	mov	r30, r0
     4e2:	c6 01       	movw	r24, r12
     4e4:	09 95       	icall
     4e6:	89 2b       	or	r24, r25
     4e8:	79 f7       	brne	.-34     	; 0x4c8 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     4ea:	c5 01       	movw	r24, r10
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	bf 90       	pop	r11
     4fe:	af 90       	pop	r10
     500:	08 95       	ret

00000502 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     502:	fc 01       	movw	r30, r24
     504:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     506:	44 8d       	ldd	r20, Z+28	; 0x1c
     508:	25 2f       	mov	r18, r21
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	84 2f       	mov	r24, r20
     50e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     510:	82 1b       	sub	r24, r18
     512:	93 0b       	sbc	r25, r19
     514:	54 17       	cp	r21, r20
     516:	10 f0       	brcs	.+4      	; 0x51c <HardwareSerial::availableForWrite()+0x1a>
     518:	cf 96       	adiw	r24, 0x3f	; 63
     51a:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     51c:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     51e:	08 95       	ret

00000520 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     520:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     522:	91 8d       	ldd	r25, Z+25	; 0x19
     524:	82 8d       	ldd	r24, Z+26	; 0x1a
     526:	98 17       	cp	r25, r24
     528:	61 f0       	breq	.+24     	; 0x542 <HardwareSerial::read()+0x22>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     52a:	a2 8d       	ldd	r26, Z+26	; 0x1a
     52c:	ae 0f       	add	r26, r30
     52e:	bf 2f       	mov	r27, r31
     530:	b1 1d       	adc	r27, r1
     532:	5d 96       	adiw	r26, 0x1d	; 29
     534:	8c 91       	ld	r24, X
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     536:	92 8d       	ldd	r25, Z+26	; 0x1a
     538:	9f 5f       	subi	r25, 0xFF	; 255
     53a:	9f 73       	andi	r25, 0x3F	; 63
     53c:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     546:	08 95       	ret

00000548 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     548:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     54a:	91 8d       	ldd	r25, Z+25	; 0x19
     54c:	82 8d       	ldd	r24, Z+26	; 0x1a
     54e:	98 17       	cp	r25, r24
     550:	31 f0       	breq	.+12     	; 0x55e <HardwareSerial::peek()+0x16>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     552:	82 8d       	ldd	r24, Z+26	; 0x1a
     554:	e8 0f       	add	r30, r24
     556:	f1 1d       	adc	r31, r1
     558:	85 8d       	ldd	r24, Z+29	; 0x1d
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     55e:	8f ef       	ldi	r24, 0xFF	; 255
     560:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     562:	08 95       	ret

00000564 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     564:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     566:	91 8d       	ldd	r25, Z+25	; 0x19
     568:	22 8d       	ldd	r18, Z+26	; 0x1a
     56a:	89 2f       	mov	r24, r25
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	80 5c       	subi	r24, 0xC0	; 192
     570:	9f 4f       	sbci	r25, 0xFF	; 255
     572:	82 1b       	sub	r24, r18
     574:	91 09       	sbc	r25, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     576:	8f 73       	andi	r24, 0x3F	; 63
     578:	99 27       	eor	r25, r25
     57a:	08 95       	ret

0000057c <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     57c:	87 ee       	ldi	r24, 0xE7	; 231
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	f1 df       	rcall	.-30     	; 0x564 <HardwareSerial::available()>
     582:	21 e0       	ldi	r18, 0x01	; 1
     584:	89 2b       	or	r24, r25
     586:	09 f4       	brne	.+2      	; 0x58a <Serial0_available()+0xe>
     588:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     58a:	82 2f       	mov	r24, r18
     58c:	08 95       	ret

0000058e <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	89 2b       	or	r24, r25
     594:	19 f0       	breq	.+6      	; 0x59c <serialEventRun()+0xe>
     596:	f2 df       	rcall	.-28     	; 0x57c <Serial0_available()>
     598:	81 11       	cpse	r24, r1
     59a:	32 cd       	rjmp	.-1436   	; 0x0 <__vectors>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     59c:	08 95       	ret

0000059e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     59e:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     5a0:	a4 8d       	ldd	r26, Z+28	; 0x1c
     5a2:	a8 0f       	add	r26, r24
     5a4:	b9 2f       	mov	r27, r25
     5a6:	b1 1d       	adc	r27, r1
     5a8:	a3 5a       	subi	r26, 0xA3	; 163
     5aa:	bf 4f       	sbci	r27, 0xFF	; 255
     5ac:	2c 91       	ld	r18, X
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     5ae:	84 8d       	ldd	r24, Z+28	; 0x1c
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	8f 73       	andi	r24, 0x3F	; 63
     5b6:	99 27       	eor	r25, r25
     5b8:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     5ba:	a6 89       	ldd	r26, Z+22	; 0x16
     5bc:	b7 89       	ldd	r27, Z+23	; 0x17
     5be:	2c 93       	st	X, r18
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:106
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     5c0:	a0 89       	ldd	r26, Z+16	; 0x10
     5c2:	b1 89       	ldd	r27, Z+17	; 0x11
     5c4:	8c 91       	ld	r24, X
     5c6:	82 74       	andi	r24, 0x42	; 66
     5c8:	8c 93       	st	X, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     5ca:	93 8d       	ldd	r25, Z+27	; 0x1b
     5cc:	84 8d       	ldd	r24, Z+28	; 0x1c
     5ce:	98 13       	cpse	r25, r24
     5d0:	06 c0       	rjmp	.+12     	; 0x5de <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     5d2:	02 88       	ldd	r0, Z+18	; 0x12
     5d4:	f3 89       	ldd	r31, Z+19	; 0x13
     5d6:	e0 2d       	mov	r30, r0
     5d8:	80 81       	ld	r24, Z
     5da:	8f 7d       	andi	r24, 0xDF	; 223
     5dc:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     5de:	08 95       	ret

000005e0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     5e0:	ef 92       	push	r14
     5e2:	ff 92       	push	r15
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	ec 01       	movw	r28, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     5f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5f6:	98 13       	cpse	r25, r24
     5f8:	19 c0       	rjmp	.+50     	; 0x62c <HardwareSerial::write(unsigned char)+0x4c>
     5fa:	e8 89       	ldd	r30, Y+16	; 0x10
     5fc:	f9 89       	ldd	r31, Y+17	; 0x11
     5fe:	80 81       	ld	r24, Z
     600:	85 ff       	sbrs	r24, 5
     602:	14 c0       	rjmp	.+40     	; 0x62c <HardwareSerial::write(unsigned char)+0x4c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     604:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\lenovo\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     606:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     608:	ee 89       	ldd	r30, Y+22	; 0x16
     60a:	ff 89       	ldd	r31, Y+23	; 0x17
     60c:	60 83       	st	Z, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:243
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
      #else
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     60e:	e8 89       	ldd	r30, Y+16	; 0x10
     610:	f9 89       	ldd	r31, Y+17	; 0x11
     612:	80 81       	ld	r24, Z
     614:	82 74       	andi	r24, 0x42	; 66
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     616:	80 83       	st	Z, r24
__iRestore():
c:\users\lenovo\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     618:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	08 95       	ret
     62c:	f6 2e       	mov	r15, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     62e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     630:	10 e0       	ldi	r17, 0x00	; 0
     632:	0f 5f       	subi	r16, 0xFF	; 255
     634:	1f 4f       	sbci	r17, 0xFF	; 255
     636:	0f 73       	andi	r16, 0x3F	; 63
     638:	11 27       	eor	r17, r17
     63a:	e0 2e       	mov	r14, r16
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     63c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     63e:	8e 11       	cpse	r24, r14
     640:	0b c0       	rjmp	.+22     	; 0x658 <HardwareSerial::write(unsigned char)+0x78>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	07 fc       	sbrc	r0, 7
     646:	fa cf       	rjmp	.-12     	; 0x63c <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     648:	e8 89       	ldd	r30, Y+16	; 0x10
     64a:	f9 89       	ldd	r31, Y+17	; 0x11
     64c:	80 81       	ld	r24, Z
     64e:	85 ff       	sbrs	r24, 5
     650:	f5 cf       	rjmp	.-22     	; 0x63c <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     652:	ce 01       	movw	r24, r28
     654:	a4 df       	rcall	.-184    	; 0x59e <HardwareSerial::_tx_udr_empty_irq()>
     656:	f2 cf       	rjmp	.-28     	; 0x63c <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     658:	eb 8d       	ldd	r30, Y+27	; 0x1b
     65a:	ec 0f       	add	r30, r28
     65c:	fd 2f       	mov	r31, r29
     65e:	f1 1d       	adc	r31, r1
     660:	e3 5a       	subi	r30, 0xA3	; 163
     662:	ff 4f       	sbci	r31, 0xFF	; 255
     664:	f0 82       	st	Z, r15
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     666:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\lenovo\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     668:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     66a:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     66c:	ea 89       	ldd	r30, Y+18	; 0x12
     66e:	fb 89       	ldd	r31, Y+19	; 0x13
     670:	80 81       	ld	r24, Z
     672:	80 62       	ori	r24, 0x20	; 32
     674:	d0 cf       	rjmp	.-96     	; 0x616 <HardwareSerial::write(unsigned char)+0x36>

00000676 <Print::print(__FlashStringHelper const*) [clone .constprop.34]>:
_ZN5Print5printEPK19__FlashStringHelper.constprop.34():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:44

size_t Print::print(const __FlashStringHelper *ifsh)
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	8c 01       	movw	r16, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:47
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     680:	d0 e0       	ldi	r29, 0x00	; 0
     682:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     684:	f8 01       	movw	r30, r16
     686:	ec 0f       	add	r30, r28
     688:	fd 1f       	adc	r31, r29
     68a:	64 91       	lpm	r22, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
     68c:	66 23       	and	r22, r22
     68e:	39 f0       	breq	.+14     	; 0x69e <Print::print(__FlashStringHelper const*) [clone .constprop.34]+0x28>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
     690:	87 ee       	ldi	r24, 0xE7	; 231
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	a5 df       	rcall	.-182    	; 0x5e0 <HardwareSerial::write(unsigned char)>
     696:	89 2b       	or	r24, r25
     698:	11 f0       	breq	.+4      	; 0x69e <Print::print(__FlashStringHelper const*) [clone .constprop.34]+0x28>
     69a:	21 96       	adiw	r28, 0x01	; 1
     69c:	f3 cf       	rjmp	.-26     	; 0x684 <Print::print(__FlashStringHelper const*) [clone .constprop.34]+0xe>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
     69e:	ce 01       	movw	r24, r28
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     6b0:	88 8d       	ldd	r24, Y+24	; 0x18
     6b2:	88 23       	and	r24, r24
     6b4:	b1 f0       	breq	.+44     	; 0x6e2 <HardwareSerial::flush()+0x38>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     6b6:	aa 89       	ldd	r26, Y+18	; 0x12
     6b8:	bb 89       	ldd	r27, Y+19	; 0x13
     6ba:	e8 89       	ldd	r30, Y+16	; 0x10
     6bc:	f9 89       	ldd	r31, Y+17	; 0x11
     6be:	8c 91       	ld	r24, X
     6c0:	85 fd       	sbrc	r24, 5
     6c2:	03 c0       	rjmp	.+6      	; 0x6ca <HardwareSerial::flush()+0x20>
     6c4:	80 81       	ld	r24, Z
     6c6:	86 fd       	sbrc	r24, 6
     6c8:	0c c0       	rjmp	.+24     	; 0x6e2 <HardwareSerial::flush()+0x38>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	07 fc       	sbrc	r0, 7
     6ce:	f7 cf       	rjmp	.-18     	; 0x6be <HardwareSerial::flush()+0x14>
     6d0:	8c 91       	ld	r24, X
     6d2:	85 ff       	sbrs	r24, 5
     6d4:	f2 cf       	rjmp	.-28     	; 0x6ba <HardwareSerial::flush()+0x10>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     6d6:	80 81       	ld	r24, Z
     6d8:	85 ff       	sbrs	r24, 5
     6da:	ed cf       	rjmp	.-38     	; 0x6b6 <HardwareSerial::flush()+0xc>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     6dc:	ce 01       	movw	r24, r28
     6de:	5f df       	rcall	.-322    	; 0x59e <HardwareSerial::_tx_udr_empty_irq()>
     6e0:	ea cf       	rjmp	.-44     	; 0x6b6 <HardwareSerial::flush()+0xc>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <twi_stop>:
twi_stop():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     6e8:	85 ed       	ldi	r24, 0xD5	; 213
     6ea:	86 bf       	out	0x36, r24	; 54
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     6ec:	06 b6       	in	r0, 0x36	; 54
     6ee:	04 fc       	sbrc	r0, 4
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <twi_stop+0x4>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     6f2:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <twi_state>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:463
}
     6f6:	08 95       	ret

000006f8 <twi_transmit>:
twi_transmit():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     6f8:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <twi_txBufferLength>
     6fc:	26 0f       	add	r18, r22
     6fe:	33 27       	eor	r19, r19
     700:	33 1f       	adc	r19, r19
     702:	21 32       	cpi	r18, 0x21	; 33
     704:	31 05       	cpc	r19, r1
     706:	ec f4       	brge	.+58     	; 0x742 <twi_transmit+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     708:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <twi_state>
     70c:	fc 01       	movw	r30, r24
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	24 30       	cpi	r18, 0x04	; 4
     714:	69 f0       	breq	.+26     	; 0x730 <twi_transmit+0x38>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:377
    return 2;
     716:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     718:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     71a:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <twi_txBufferLength>
     71e:	21 91       	ld	r18, Z+
     720:	ac 01       	movw	r20, r24
     722:	44 57       	subi	r20, 0x74	; 116
     724:	5f 4f       	sbci	r21, 0xFF	; 255
     726:	a4 0f       	add	r26, r20
     728:	b5 2f       	mov	r27, r21
     72a:	b1 1d       	adc	r27, r1
     72c:	2c 93       	st	X, r18
     72e:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     730:	86 17       	cp	r24, r22
     732:	98 f3       	brcs	.-26     	; 0x71a <twi_transmit+0x22>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     734:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <twi_txBufferLength>
     738:	68 0f       	add	r22, r24
     73a:	60 93 ac 00 	sts	0x00AC, r22	; 0x8000ac <twi_txBufferLength>
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	08 95       	ret

00000746 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:326
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     746:	08 95       	ret

00000748 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:321
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	9f ef       	ldi	r25, 0xFF	; 255
     74c:	08 95       	ret

0000074e <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:307
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	9f ef       	ldi	r25, 0xFF	; 255
     752:	08 95       	ret

00000754 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     754:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <TwoWire::rxBufferIndex>
     758:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:291
}
     75a:	91 95       	neg	r25
     75c:	81 95       	neg	r24
     75e:	91 09       	sbc	r25, r1
     760:	08 95       	ret

00000762 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:271

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	cb 01       	movw	r24, r22
     768:	ea 01       	movw	r28, r20
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:280
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     76a:	64 2f       	mov	r22, r20
     76c:	c5 df       	rcall	.-118    	; 0x6f8 <twi_transmit>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:283
  }
  return quantity;
}
     76e:	ce 01       	movw	r24, r28
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:246

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	1f 92       	push	r1
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	69 83       	std	Y+1, r22	; 0x01
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:262
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	ce 01       	movw	r24, r28
     786:	01 96       	adiw	r24, 0x01	; 1
     788:	b7 df       	rcall	.-146    	; 0x6f8 <twi_transmit>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src/Wire.cpp:265
  }
  return 1;
}
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0f 90       	pop	r0
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	08 95       	ret

0000079c <Print::write(char const*) [clone .part.2] [clone .constprop.36]>:
_ZN5Print5writeEPKc.part.2.constprop.36():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     79c:	fc 01       	movw	r30, r24
     79e:	01 90       	ld	r0, Z+
     7a0:	00 20       	and	r0, r0
     7a2:	e9 f7       	brne	.-6      	; 0x79e <Print::write(char const*) [clone .part.2] [clone .constprop.36]+0x2>
     7a4:	31 97       	sbiw	r30, 0x01	; 1
     7a6:	af 01       	movw	r20, r30
     7a8:	48 1b       	sub	r20, r24
     7aa:	59 0b       	sbc	r21, r25
     7ac:	bc 01       	movw	r22, r24
     7ae:	87 ee       	ldi	r24, 0xE7	; 231
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	7a ce       	rjmp	.-780    	; 0x4a8 <Print::write(unsigned char const*, unsigned int)>

000007b4 <Print::println(__FlashStringHelper const*) [clone .constprop.33]>:
_ZN5Print7printlnEPK19__FlashStringHelper.constprop.33():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:114
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:116
{
  size_t n = print(ifsh);
     7b8:	5e df       	rcall	.-324    	; 0x676 <Print::print(__FlashStringHelper const*) [clone .constprop.34]>
     7ba:	ec 01       	movw	r28, r24
write():
     7bc:	80 e8       	ldi	r24, 0x80	; 128
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	ed df       	rcall	.-38     	; 0x79c <Print::write(char const*) [clone .part.2] [clone .constprop.36]>
_ZN5Print7printlnEPK19__FlashStringHelper.constprop.33():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:119
  n += println();
  return n;
}
     7c2:	8c 0f       	add	r24, r28
     7c4:	9d 1f       	adc	r25, r29
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]>:
_ZN5Print11printNumberEmh.constprop.24():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     7cc:	8f 92       	push	r8
     7ce:	9f 92       	push	r9
     7d0:	af 92       	push	r10
     7d2:	bf 92       	push	r11
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	a1 97       	sbiw	r28, 0x21	; 33
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     7ec:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     7ee:	42 30       	cpi	r20, 0x02	; 2
     7f0:	08 f4       	brcc	.+2      	; 0x7f4 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x28>
     7f2:	4a e0       	ldi	r20, 0x0A	; 10
     7f4:	8e 01       	movw	r16, r28
     7f6:	0f 5d       	subi	r16, 0xDF	; 223
     7f8:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
     7fa:	84 2e       	mov	r8, r20
     7fc:	91 2c       	mov	r9, r1
     7fe:	b1 2c       	mov	r11, r1
     800:	a1 2c       	mov	r10, r1
     802:	a5 01       	movw	r20, r10
     804:	94 01       	movw	r18, r8
     806:	dd d7       	rcall	.+4026   	; 0x17c2 <__udivmodsi4>
     808:	e6 2f       	mov	r30, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
     80a:	b9 01       	movw	r22, r18
     80c:	ca 01       	movw	r24, r20
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     80e:	ea 30       	cpi	r30, 0x0A	; 10
     810:	ec f4       	brge	.+58     	; 0x84c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x80>
     812:	e0 5d       	subi	r30, 0xD0	; 208
     814:	d8 01       	movw	r26, r16
     816:	ee 93       	st	-X, r30
     818:	8d 01       	movw	r16, r26
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
     81a:	23 2b       	or	r18, r19
     81c:	24 2b       	or	r18, r20
     81e:	25 2b       	or	r18, r21
     820:	81 f7       	brne	.-32     	; 0x802 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x36>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	80 e0       	ldi	r24, 0x00	; 0
write():
     826:	10 97       	sbiw	r26, 0x00	; 0
     828:	11 f0       	breq	.+4      	; 0x82e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x62>
     82a:	cd 01       	movw	r24, r26
     82c:	b7 df       	rcall	.-146    	; 0x79c <Print::write(char const*) [clone .part.2] [clone .constprop.36]>
_ZN5Print11printNumberEmh.constprop.24():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
     82e:	a1 96       	adiw	r28, 0x21	; 33
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	bf 90       	pop	r11
     844:	af 90       	pop	r10
     846:	9f 90       	pop	r9
     848:	8f 90       	pop	r8
     84a:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     84c:	e9 5c       	subi	r30, 0xC9	; 201
     84e:	e2 cf       	rjmp	.-60     	; 0x814 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]+0x48>

00000850 <Print::print(long, int) [clone .part.3] [clone .constprop.23]>:
_ZN5Print5printEli.part.3.constprop.23():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:87
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
     850:	cf 92       	push	r12
     852:	df 92       	push	r13
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	6b 01       	movw	r12, r22
     85e:	7c 01       	movw	r14, r24
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     860:	6d e2       	ldi	r22, 0x2D	; 45
     862:	87 ee       	ldi	r24, 0xE7	; 231
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	bc de       	rcall	.-648    	; 0x5e0 <HardwareSerial::write(unsigned char)>
     868:	ec 01       	movw	r28, r24
_ZN5Print5printEli.part.3.constprop.23():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
     86a:	66 27       	eor	r22, r22
     86c:	77 27       	eor	r23, r23
     86e:	cb 01       	movw	r24, r22
     870:	6c 19       	sub	r22, r12
     872:	7d 09       	sbc	r23, r13
     874:	8e 09       	sbc	r24, r14
     876:	9f 09       	sbc	r25, r15
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
     878:	4a e0       	ldi	r20, 0x0A	; 10
     87a:	a8 df       	rcall	.-176    	; 0x7cc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:101
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     87c:	8c 0f       	add	r24, r28
     87e:	9d 1f       	adc	r25, r29
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	08 95       	ret

0000088e <__vector_9>:
__vector_9():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     88e:	1f 92       	push	r1
     890:	0f 92       	push	r0
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	0f 92       	push	r0
     896:	11 24       	eor	r1, r1
     898:	2f 93       	push	r18
     89a:	3f 93       	push	r19
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
     8a0:	af 93       	push	r26
     8a2:	bf 93       	push	r27
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     8a4:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <timer0_millis>
     8a8:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <timer0_millis+0x1>
     8ac:	a0 91 e1 00 	lds	r26, 0x00E1	; 0x8000e1 <timer0_millis+0x2>
     8b0:	b0 91 e2 00 	lds	r27, 0x00E2	; 0x8000e2 <timer0_millis+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     8b4:	30 91 de 00 	lds	r19, 0x00DE	; 0x8000de <timer0_fract>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     8b8:	26 e0       	ldi	r18, 0x06	; 6
     8ba:	23 0f       	add	r18, r19
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     8bc:	2d 37       	cpi	r18, 0x7D	; 125
     8be:	68 f1       	brcs	.+90     	; 0x91a <__vector_9+0x8c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     8c0:	29 e8       	ldi	r18, 0x89	; 137
     8c2:	23 0f       	add	r18, r19
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     8c4:	03 96       	adiw	r24, 0x03	; 3
     8c6:	a1 1d       	adc	r26, r1
     8c8:	b1 1d       	adc	r27, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     8ca:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <timer0_fract>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     8ce:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <timer0_millis>
     8d2:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <timer0_millis+0x1>
     8d6:	a0 93 e1 00 	sts	0x00E1, r26	; 0x8000e1 <timer0_millis+0x2>
     8da:	b0 93 e2 00 	sts	0x00E2, r27	; 0x8000e2 <timer0_millis+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     8de:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <timer0_overflow_count>
     8e2:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <timer0_overflow_count+0x1>
     8e6:	a0 91 e5 00 	lds	r26, 0x00E5	; 0x8000e5 <timer0_overflow_count+0x2>
     8ea:	b0 91 e6 00 	lds	r27, 0x00E6	; 0x8000e6 <timer0_overflow_count+0x3>
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	a1 1d       	adc	r26, r1
     8f2:	b1 1d       	adc	r27, r1
     8f4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <timer0_overflow_count>
     8f8:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <timer0_overflow_count+0x1>
     8fc:	a0 93 e5 00 	sts	0x00E5, r26	; 0x8000e5 <timer0_overflow_count+0x2>
     900:	b0 93 e6 00 	sts	0x00E6, r27	; 0x8000e6 <timer0_overflow_count+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	3f 91       	pop	r19
     90e:	2f 91       	pop	r18
     910:	0f 90       	pop	r0
     912:	0f be       	out	0x3f, r0	; 63
     914:	0f 90       	pop	r0
     916:	1f 90       	pop	r1
     918:	18 95       	reti
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     91a:	02 96       	adiw	r24, 0x02	; 2
     91c:	a1 1d       	adc	r26, r1
     91e:	b1 1d       	adc	r27, r1
     920:	d4 cf       	rjmp	.-88     	; 0x8ca <__vector_9+0x3c>

00000922 <__vector_12>:
__vector_12():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	0f 92       	push	r0
     92a:	11 24       	eor	r1, r1
     92c:	2f 93       	push	r18
     92e:	3f 93       	push	r19
     930:	4f 93       	push	r20
     932:	5f 93       	push	r21
     934:	6f 93       	push	r22
     936:	7f 93       	push	r23
     938:	8f 93       	push	r24
     93a:	9f 93       	push	r25
     93c:	af 93       	push	r26
     93e:	bf 93       	push	r27
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     944:	87 ee       	ldi	r24, 0xE7	; 231
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	2a de       	rcall	.-940    	; 0x59e <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     94a:	ff 91       	pop	r31
     94c:	ef 91       	pop	r30
     94e:	bf 91       	pop	r27
     950:	af 91       	pop	r26
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	7f 91       	pop	r23
     958:	6f 91       	pop	r22
     95a:	5f 91       	pop	r21
     95c:	4f 91       	pop	r20
     95e:	3f 91       	pop	r19
     960:	2f 91       	pop	r18
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	0f 90       	pop	r0
     968:	1f 90       	pop	r1
     96a:	18 95       	reti

0000096c <__vector_11>:
__vector_11():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     96c:	1f 92       	push	r1
     96e:	0f 92       	push	r0
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	2f 93       	push	r18
     978:	8f 93       	push	r24
     97a:	9f 93       	push	r25
     97c:	ef 93       	push	r30
     97e:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     980:	e0 91 f7 00 	lds	r30, 0x00F7	; 0x8000f7 <Serial+0x10>
     984:	f0 91 f8 00 	lds	r31, 0x00F8	; 0x8000f8 <Serial+0x11>
     988:	80 81       	ld	r24, Z
     98a:	e0 91 fd 00 	lds	r30, 0x00FD	; 0x8000fd <Serial+0x16>
     98e:	f0 91 fe 00 	lds	r31, 0x00FE	; 0x8000fe <Serial+0x17>
     992:	82 fd       	sbrc	r24, 2
     994:	1b c0       	rjmp	.+54     	; 0x9cc <__vector_11+0x60>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     996:	90 81       	ld	r25, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     998:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Serial+0x19>
     99c:	8f 5f       	subi	r24, 0xFF	; 255
     99e:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     9a0:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Serial+0x1a>
     9a4:	82 17       	cp	r24, r18
     9a6:	41 f0       	breq	.+16     	; 0x9b8 <__vector_11+0x4c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     9a8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <Serial+0x19>
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	e9 51       	subi	r30, 0x19	; 25
     9b0:	ff 4f       	sbci	r31, 0xFF	; 255
     9b2:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     9b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Serial+0x19>
__vector_11():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     9b8:	ff 91       	pop	r31
     9ba:	ef 91       	pop	r30
     9bc:	9f 91       	pop	r25
     9be:	8f 91       	pop	r24
     9c0:	2f 91       	pop	r18
     9c2:	0f 90       	pop	r0
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	0f 90       	pop	r0
     9c8:	1f 90       	pop	r1
     9ca:	18 95       	reti
_rx_complete_irq():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9cc:	80 81       	ld	r24, Z
     9ce:	f4 cf       	rjmp	.-24     	; 0x9b8 <__vector_11+0x4c>

000009d0 <__vector_17>:
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
     9d0:	1f 92       	push	r1
     9d2:	0f 92       	push	r0
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	0f 92       	push	r0
     9d8:	11 24       	eor	r1, r1
     9da:	2f 93       	push	r18
     9dc:	3f 93       	push	r19
     9de:	4f 93       	push	r20
     9e0:	5f 93       	push	r21
     9e2:	6f 93       	push	r22
     9e4:	7f 93       	push	r23
     9e6:	8f 93       	push	r24
     9e8:	9f 93       	push	r25
     9ea:	af 93       	push	r26
     9ec:	bf 93       	push	r27
     9ee:	ef 93       	push	r30
     9f0:	ff 93       	push	r31
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  switch(TW_STATUS){
     9f2:	81 b1       	in	r24, 0x01	; 1
     9f4:	88 7f       	andi	r24, 0xF8	; 248
     9f6:	80 36       	cpi	r24, 0x60	; 96
     9f8:	09 f4       	brne	.+2      	; 0x9fc <__vector_17+0x2c>
     9fa:	49 c0       	rjmp	.+146    	; 0xa8e <__vector_17+0xbe>
     9fc:	e8 f5       	brcc	.+122    	; 0xa78 <__vector_17+0xa8>
     9fe:	88 32       	cpi	r24, 0x28	; 40
     a00:	09 f4       	brne	.+2      	; 0xa04 <__vector_17+0x34>
     a02:	a0 c0       	rjmp	.+320    	; 0xb44 <__vector_17+0x174>
     a04:	18 f5       	brcc	.+70     	; 0xa4c <__vector_17+0x7c>
     a06:	80 31       	cpi	r24, 0x10	; 16
     a08:	09 f4       	brne	.+2      	; 0xa0c <__vector_17+0x3c>
     a0a:	96 c0       	rjmp	.+300    	; 0xb38 <__vector_17+0x168>
     a0c:	b8 f4       	brcc	.+46     	; 0xa3c <__vector_17+0x6c>
     a0e:	88 23       	and	r24, r24
     a10:	09 f4       	brne	.+2      	; 0xa14 <__vector_17+0x44>
     a12:	e6 c0       	rjmp	.+460    	; 0xbe0 <__vector_17+0x210>
     a14:	88 30       	cpi	r24, 0x08	; 8
     a16:	09 f4       	brne	.+2      	; 0xa1a <__vector_17+0x4a>
     a18:	8f c0       	rjmp	.+286    	; 0xb38 <__vector_17+0x168>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     a1a:	ff 91       	pop	r31
     a1c:	ef 91       	pop	r30
     a1e:	bf 91       	pop	r27
     a20:	af 91       	pop	r26
     a22:	9f 91       	pop	r25
     a24:	8f 91       	pop	r24
     a26:	7f 91       	pop	r23
     a28:	6f 91       	pop	r22
     a2a:	5f 91       	pop	r21
     a2c:	4f 91       	pop	r20
     a2e:	3f 91       	pop	r19
     a30:	2f 91       	pop	r18
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     a3c:	88 31       	cpi	r24, 0x18	; 24
     a3e:	09 f4       	brne	.+2      	; 0xa42 <__vector_17+0x72>
     a40:	81 c0       	rjmp	.+258    	; 0xb44 <__vector_17+0x174>
     a42:	80 32       	cpi	r24, 0x20	; 32
     a44:	51 f7       	brne	.-44     	; 0xa1a <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     a46:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <twi_error>
     a4a:	14 c0       	rjmp	.+40     	; 0xa74 <__vector_17+0xa4>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     a4c:	80 34       	cpi	r24, 0x40	; 64
     a4e:	09 f4       	brne	.+2      	; 0xa52 <__vector_17+0x82>
     a50:	91 c0       	rjmp	.+290    	; 0xb74 <__vector_17+0x1a4>
     a52:	40 f4       	brcc	.+16     	; 0xa64 <__vector_17+0x94>
     a54:	80 33       	cpi	r24, 0x30	; 48
     a56:	b9 f3       	breq	.-18     	; 0xa46 <__vector_17+0x76>
     a58:	88 33       	cpi	r24, 0x38	; 56
     a5a:	f9 f6       	brne	.-66     	; 0xa1a <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     a5c:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <twi_error>
twi_reply():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     a60:	85 ec       	ldi	r24, 0xC5	; 197
     a62:	a1 c0       	rjmp	.+322    	; 0xba6 <__vector_17+0x1d6>
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     a64:	80 35       	cpi	r24, 0x50	; 80
     a66:	09 f4       	brne	.+2      	; 0xa6a <__vector_17+0x9a>
     a68:	7c c0       	rjmp	.+248    	; 0xb62 <__vector_17+0x192>
     a6a:	88 35       	cpi	r24, 0x58	; 88
     a6c:	09 f4       	brne	.+2      	; 0xa70 <__vector_17+0xa0>
     a6e:	8a c0       	rjmp	.+276    	; 0xb84 <__vector_17+0x1b4>
     a70:	88 34       	cpi	r24, 0x48	; 72
     a72:	99 f6       	brne	.-90     	; 0xa1a <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
     a74:	39 de       	rcall	.-910    	; 0x6e8 <twi_stop>
     a76:	d1 cf       	rjmp	.-94     	; 0xa1a <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     a78:	88 39       	cpi	r24, 0x98	; 152
     a7a:	09 f4       	brne	.+2      	; 0xa7e <__vector_17+0xae>
     a7c:	81 c0       	rjmp	.+258    	; 0xb80 <__vector_17+0x1b0>
     a7e:	30 f5       	brcc	.+76     	; 0xacc <__vector_17+0xfc>
     a80:	88 37       	cpi	r24, 0x78	; 120
     a82:	29 f0       	breq	.+10     	; 0xa8e <__vector_17+0xbe>
     a84:	50 f4       	brcc	.+20     	; 0xa9a <__vector_17+0xca>
     a86:	88 36       	cpi	r24, 0x68	; 104
     a88:	11 f0       	breq	.+4      	; 0xa8e <__vector_17+0xbe>
     a8a:	80 37       	cpi	r24, 0x70	; 112
     a8c:	31 f6       	brne	.-116    	; 0xa1a <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <twi_state>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     a94:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <twi_rxBufferIndex>
     a98:	52 c0       	rjmp	.+164    	; 0xb3e <__vector_17+0x16e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     a9a:	88 38       	cpi	r24, 0x88	; 136
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <__vector_17+0xd0>
     a9e:	70 c0       	rjmp	.+224    	; 0xb80 <__vector_17+0x1b0>
     aa0:	80 39       	cpi	r24, 0x90	; 144
     aa2:	19 f0       	breq	.+6      	; 0xaaa <__vector_17+0xda>
     aa4:	80 38       	cpi	r24, 0x80	; 128
     aa6:	09 f0       	breq	.+2      	; 0xaaa <__vector_17+0xda>
     aa8:	b8 cf       	rjmp	.-144    	; 0xa1a <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
     aaa:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <twi_rxBufferIndex>
     aae:	80 32       	cpi	r24, 0x20	; 32
     ab0:	08 f0       	brcs	.+2      	; 0xab4 <__vector_17+0xe4>
     ab2:	66 c0       	rjmp	.+204    	; 0xb80 <__vector_17+0x1b0>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     ab4:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <twi_rxBufferIndex>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	8e 0f       	add	r24, r30
     abc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <twi_rxBufferIndex>
     ac0:	83 b1       	in	r24, 0x03	; 3
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	e2 55       	subi	r30, 0x52	; 82
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	80 83       	st	Z, r24
     aca:	39 c0       	rjmp	.+114    	; 0xb3e <__vector_17+0x16e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     acc:	80 3b       	cpi	r24, 0xB0	; 176
     ace:	39 f0       	breq	.+14     	; 0xade <__vector_17+0x10e>
     ad0:	d0 f4       	brcc	.+52     	; 0xb06 <__vector_17+0x136>
     ad2:	80 3a       	cpi	r24, 0xA0	; 160
     ad4:	09 f4       	brne	.+2      	; 0xad8 <__vector_17+0x108>
     ad6:	6b c0       	rjmp	.+214    	; 0xbae <__vector_17+0x1de>
     ad8:	88 3a       	cpi	r24, 0xA8	; 168
     ada:	09 f0       	breq	.+2      	; 0xade <__vector_17+0x10e>
     adc:	9e cf       	rjmp	.-196    	; 0xa1a <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     ade:	84 e0       	ldi	r24, 0x04	; 4
     ae0:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <twi_state>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     ae4:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <twi_txBufferIndex>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     ae8:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <twi_txBufferLength>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	e0 e0       	ldi	r30, 0x00	; 0
     af0:	09 95       	icall
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     af2:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <twi_txBufferLength>
     af6:	81 11       	cpse	r24, r1
     af8:	0f c0       	rjmp	.+30     	; 0xb18 <__vector_17+0x148>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:665
        twi_txBufferLength = 1;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <twi_txBufferLength>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:666
        twi_txBuffer[0] = 0x00;
     b00:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <twi_txBuffer>
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__vector_17+0x148>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     b06:	80 3c       	cpi	r24, 0xC0	; 192
     b08:	09 f4       	brne	.+2      	; 0xb0c <__vector_17+0x13c>
     b0a:	aa cf       	rjmp	.-172    	; 0xa60 <__vector_17+0x90>
     b0c:	88 3c       	cpi	r24, 0xC8	; 200
     b0e:	09 f4       	brne	.+2      	; 0xb12 <__vector_17+0x142>
     b10:	a7 cf       	rjmp	.-178    	; 0xa60 <__vector_17+0x90>
     b12:	88 3b       	cpi	r24, 0xB8	; 184
     b14:	09 f0       	breq	.+2      	; 0xb18 <__vector_17+0x148>
     b16:	81 cf       	rjmp	.-254    	; 0xa1a <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     b18:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <twi_txBufferIndex>
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	8e 0f       	add	r24, r30
     b20:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <twi_txBufferIndex>
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	e4 57       	subi	r30, 0x74	; 116
     b28:	ff 4f       	sbci	r31, 0xFF	; 255
     b2a:	80 81       	ld	r24, Z
     b2c:	83 b9       	out	0x03, r24	; 3
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     b2e:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <twi_txBufferIndex>
     b32:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <twi_txBufferLength>
     b36:	22 c0       	rjmp	.+68     	; 0xb7c <__vector_17+0x1ac>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     b38:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <twi_slarw>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     b3c:	83 b9       	out	0x03, r24	; 3
twi_reply():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     b3e:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     b40:	86 bf       	out	0x36, r24	; 54
     b42:	6b cf       	rjmp	.-298    	; 0xa1a <__vector_17+0x4a>
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
     b44:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <twi_masterBufferIndex>
     b48:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <twi_masterBufferLength>
     b4c:	98 17       	cp	r25, r24
     b4e:	18 f5       	brcc	.+70     	; 0xb96 <__vector_17+0x1c6>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     b50:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <twi_masterBufferIndex>
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	8e 0f       	add	r24, r30
     b58:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <twi_masterBufferIndex>
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	ed cf       	rjmp	.-38     	; 0xb3c <__vector_17+0x16c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     b62:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <twi_masterBufferIndex>
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	8e 0f       	add	r24, r30
     b6a:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <twi_masterBufferIndex>
     b6e:	83 b1       	in	r24, 0x03	; 3
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     b74:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <twi_masterBufferIndex>
     b78:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <twi_masterBufferLength>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     b7c:	98 17       	cp	r25, r24
     b7e:	f8 f2       	brcs	.-66     	; 0xb3e <__vector_17+0x16e>
twi_reply():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     b80:	85 e8       	ldi	r24, 0x85	; 133
     b82:	de cf       	rjmp	.-68     	; 0xb40 <__vector_17+0x170>
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     b84:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <twi_masterBufferIndex>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	8e 0f       	add	r24, r30
     b8c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <twi_masterBufferIndex>
     b90:	83 b1       	in	r24, 0x03	; 3
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:594
  if (twi_sendStop)
     b96:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <twi_sendStop>
     b9a:	81 11       	cpse	r24, r1
     b9c:	6b cf       	rjmp	.-298    	; 0xa74 <__vector_17+0xa4>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <twi_inRepStart>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     ba4:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     ba6:	86 bf       	out	0x36, r24	; 54
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     ba8:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <twi_state>
     bac:	36 cf       	rjmp	.-404    	; 0xa1a <__vector_17+0x4a>
twi_releaseBus():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     bae:	85 ec       	ldi	r24, 0xC5	; 197
     bb0:	86 bf       	out	0x36, r24	; 54
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
     bb2:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <twi_state>
__vector_17():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:637
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
     bb6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <twi_rxBufferIndex>
     bba:	80 32       	cpi	r24, 0x20	; 32
     bbc:	30 f4       	brcc	.+12     	; 0xbca <__vector_17+0x1fa>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     bbe:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <twi_rxBufferIndex>
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	e2 55       	subi	r30, 0x52	; 82
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	10 82       	st	Z, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     bca:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <twi_rxBufferIndex>
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	8e ea       	ldi	r24, 0xAE	; 174
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	e0 e0       	ldi	r30, 0x00	; 0
     bd8:	09 95       	icall
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     bda:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <twi_rxBufferIndex>
     bde:	1d cf       	rjmp	.-454    	; 0xa1a <__vector_17+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\libraries\Wire\src\utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     be0:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <twi_error>
     be4:	47 cf       	rjmp	.-370    	; 0xa74 <__vector_17+0xa4>

00000be6 <__vector_6>:
__vector_6():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:81

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	2f 93       	push	r18
     bf2:	3f 93       	push	r19
     bf4:	4f 93       	push	r20
     bf6:	5f 93       	push	r21
     bf8:	6f 93       	push	r22
     bfa:	7f 93       	push	r23
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	ef 93       	push	r30
     c0a:	ff 93       	push	r31
handle_interrupts():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:54

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
     c0c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Channel>
     c10:	c0 91 e3 01 	lds	r28, 0x01E3	; 0x8001e3 <ServoCount>
     c14:	d0 e0       	ldi	r29, 0x00	; 0
     c16:	87 ff       	sbrs	r24, 7
     c18:	1e c0       	rjmp	.+60     	; 0xc56 <__vector_6+0x70>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:55
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
     c1a:	1d bc       	out	0x2d, r1	; 45
     c1c:	1c bc       	out	0x2c, r1	; 44
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:61
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
     c1e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Channel>
     c22:	8f 5f       	subi	r24, 0xFF	; 255
     c24:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Channel>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:62
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     c28:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Channel>
     c2c:	08 2e       	mov	r0, r24
     c2e:	00 0c       	add	r0, r0
     c30:	99 0b       	sbc	r25, r25
     c32:	8c 17       	cp	r24, r28
     c34:	9d 07       	cpc	r25, r29
     c36:	24 f4       	brge	.+8      	; 0xc40 <__vector_6+0x5a>
     c38:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Channel>
     c3c:	8c 30       	cpi	r24, 0x0C	; 12
     c3e:	9c f1       	brlt	.+102    	; 0xca6 <__vector_6+0xc0>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:69
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // it's an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     c40:	8c b5       	in	r24, 0x2c	; 44
     c42:	9d b5       	in	r25, 0x2d	; 45
     c44:	04 96       	adiw	r24, 0x04	; 4
     c46:	80 32       	cpi	r24, 0x20	; 32
     c48:	9e 44       	sbci	r25, 0x4E	; 78
     c4a:	08 f4       	brcc	.+2      	; 0xc4e <__vector_6+0x68>
     c4c:	72 c0       	rjmp	.+228    	; 0xd32 <__vector_6+0x14c>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:72
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     c4e:	8c b5       	in	r24, 0x2c	; 44
     c50:	9d b5       	in	r25, 0x2d	; 45
     c52:	04 96       	adiw	r24, 0x04	; 4
     c54:	70 c0       	rjmp	.+224    	; 0xd36 <__vector_6+0x150>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:57
static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
     c56:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Channel>
     c5a:	08 2e       	mov	r0, r24
     c5c:	00 0c       	add	r0, r0
     c5e:	99 0b       	sbc	r25, r25
     c60:	8c 17       	cp	r24, r28
     c62:	9d 07       	cpc	r25, r29
     c64:	e4 f6       	brge	.-72     	; 0xc1e <__vector_6+0x38>
     c66:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <Channel>
     c6a:	8e 2f       	mov	r24, r30
     c6c:	ee 0f       	add	r30, r30
     c6e:	99 0b       	sbc	r25, r25
     c70:	fc 01       	movw	r30, r24
     c72:	ee 0f       	add	r30, r30
     c74:	ff 1f       	adc	r31, r31
     c76:	e8 0f       	add	r30, r24
     c78:	f9 1f       	adc	r31, r25
     c7a:	e1 54       	subi	r30, 0x41	; 65
     c7c:	fe 4f       	sbci	r31, 0xFE	; 254
     c7e:	80 81       	ld	r24, Z
     c80:	86 ff       	sbrs	r24, 6
     c82:	cd cf       	rjmp	.-102    	; 0xc1e <__vector_6+0x38>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:58
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
     c84:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <Channel>
     c88:	8e 2f       	mov	r24, r30
     c8a:	ee 0f       	add	r30, r30
     c8c:	99 0b       	sbc	r25, r25
     c8e:	fc 01       	movw	r30, r24
     c90:	ee 0f       	add	r30, r30
     c92:	ff 1f       	adc	r31, r31
     c94:	e8 0f       	add	r30, r24
     c96:	f9 1f       	adc	r31, r25
     c98:	e1 54       	subi	r30, 0x41	; 65
     c9a:	fe 4f       	sbci	r31, 0xFE	; 254
     c9c:	80 81       	ld	r24, Z
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	8f 73       	andi	r24, 0x3F	; 63
     ca2:	43 db       	rcall	.-2426   	; 0x32a <digitalWrite>
     ca4:	bc cf       	rjmp	.-136    	; 0xc1e <__vector_6+0x38>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:63
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     ca6:	2c b5       	in	r18, 0x2c	; 44
     ca8:	3d b5       	in	r19, 0x2d	; 45
     caa:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <Channel>
     cae:	8e 2f       	mov	r24, r30
     cb0:	ee 0f       	add	r30, r30
     cb2:	99 0b       	sbc	r25, r25
     cb4:	fc 01       	movw	r30, r24
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	e8 0f       	add	r30, r24
     cbc:	f9 1f       	adc	r31, r25
     cbe:	e1 54       	subi	r30, 0x41	; 65
     cc0:	fe 4f       	sbci	r31, 0xFE	; 254
     cc2:	81 81       	ldd	r24, Z+1	; 0x01
     cc4:	92 81       	ldd	r25, Z+2	; 0x02
     cc6:	82 0f       	add	r24, r18
     cc8:	93 1f       	adc	r25, r19
     cca:	9b bd       	out	0x2b, r25	; 43
     ccc:	8a bd       	out	0x2a, r24	; 42
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:64
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     cce:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <Channel>
     cd2:	8e 2f       	mov	r24, r30
     cd4:	ee 0f       	add	r30, r30
     cd6:	99 0b       	sbc	r25, r25
     cd8:	fc 01       	movw	r30, r24
     cda:	ee 0f       	add	r30, r30
     cdc:	ff 1f       	adc	r31, r31
     cde:	e8 0f       	add	r30, r24
     ce0:	f9 1f       	adc	r31, r25
     ce2:	e1 54       	subi	r30, 0x41	; 65
     ce4:	fe 4f       	sbci	r31, 0xFE	; 254
     ce6:	80 81       	ld	r24, Z
     ce8:	86 ff       	sbrs	r24, 6
     cea:	10 c0       	rjmp	.+32     	; 0xd0c <__vector_6+0x126>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:65
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // it's an active channel so pulse it high
     cec:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <Channel>
     cf0:	8e 2f       	mov	r24, r30
     cf2:	ee 0f       	add	r30, r30
     cf4:	99 0b       	sbc	r25, r25
     cf6:	fc 01       	movw	r30, r24
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	e8 0f       	add	r30, r24
     cfe:	f9 1f       	adc	r31, r25
     d00:	e1 54       	subi	r30, 0x41	; 65
     d02:	fe 4f       	sbci	r31, 0xFE	; 254
     d04:	80 81       	ld	r24, Z
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	8f 73       	andi	r24, 0x3F	; 63
     d0a:	0f db       	rcall	.-2530   	; 0x32a <digitalWrite>
__vector_6():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:83
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
}
     d0c:	ff 91       	pop	r31
     d0e:	ef 91       	pop	r30
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	bf 91       	pop	r27
     d16:	af 91       	pop	r26
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	7f 91       	pop	r23
     d1e:	6f 91       	pop	r22
     d20:	5f 91       	pop	r21
     d22:	4f 91       	pop	r20
     d24:	3f 91       	pop	r19
     d26:	2f 91       	pop	r18
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti
handle_interrupts():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:70
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // it's an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
     d32:	80 e2       	ldi	r24, 0x20	; 32
     d34:	9e e4       	ldi	r25, 0x4E	; 78
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:72
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     d36:	9b bd       	out	0x2b, r25	; 43
     d38:	8a bd       	out	0x2a, r24	; 42
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:73
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Channel>
     d40:	e5 cf       	rjmp	.-54     	; 0xd0c <__vector_6+0x126>

00000d42 <global constructors keyed to 65535_0_mind_project_code.ino.cpp.o.2680>:
_GLOBAL__I_65535_0_mind_project_code.ino.cpp.o.2680():
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <Serial+0x3>
     d4e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <Serial+0x2>
     d52:	88 ee       	ldi	r24, 0xE8	; 232
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <Serial+0x4>
     d5e:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <Serial+0x5>
     d62:	a0 93 ed 00 	sts	0x00ED, r26	; 0x8000ed <Serial+0x6>
     d66:	b0 93 ee 00 	sts	0x00EE, r27	; 0x8000ee <Serial+0x7>
     d6a:	82 e7       	ldi	r24, 0x72	; 114
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <Serial+0x1>
     d72:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <Serial>
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <Serial+0xd>
     d7e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <Serial+0xc>
     d82:	29 e2       	ldi	r18, 0x29	; 41
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	30 93 f6 00 	sts	0x00F6, r19	; 0x8000f6 <Serial+0xf>
     d8a:	20 93 f5 00 	sts	0x00F5, r18	; 0x8000f5 <Serial+0xe>
     d8e:	2b e2       	ldi	r18, 0x2B	; 43
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	30 93 f8 00 	sts	0x00F8, r19	; 0x8000f8 <Serial+0x11>
     d96:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <Serial+0x10>
     d9a:	2a e2       	ldi	r18, 0x2A	; 42
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	30 93 fa 00 	sts	0x00FA, r19	; 0x8000fa <Serial+0x13>
     da2:	20 93 f9 00 	sts	0x00F9, r18	; 0x8000f9 <Serial+0x12>
     da6:	90 93 fc 00 	sts	0x00FC, r25	; 0x8000fc <Serial+0x15>
     daa:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <Serial+0x14>
     dae:	8c e2       	ldi	r24, 0x2C	; 44
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	90 93 fe 00 	sts	0x00FE, r25	; 0x8000fe <Serial+0x17>
     db6:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <Serial+0x16>
     dba:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Serial+0x19>
     dbe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Serial+0x1a>
     dc2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Serial+0x1b>
     dc6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Serial+0x1c>
     dca:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <pixels+0x1>
     dce:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <pixels+0x8>
     dd2:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <pixels+0xf>
     dd6:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <pixels+0x10>
     dda:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <pixels+0x11>
     dde:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <pixels+0x12>
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <pixels+0xe>
     de8:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <pixels+0xb>
     dec:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <pixels+0xc>
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <pixels+0xd>
     df6:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <pixels>
     dfa:	c8 e6       	ldi	r28, 0x68	; 104
     dfc:	d1 e0       	ldi	r29, 0x01	; 1
     dfe:	d0 93 ae 01 	sts	0x01AE, r29	; 0x8001ae <pixels+0x5>
     e02:	c0 93 ad 01 	sts	0x01AD, r28	; 0x8001ad <pixels+0x4>
     e06:	88 e6       	ldi	r24, 0x68	; 104
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	95 d6       	rcall	.+3370   	; 0x1b36 <malloc>
     e0c:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <pixels+0xa>
     e10:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <pixels+0x9>
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	09 f4       	brne	.+2      	; 0xe1a <global constructors keyed to 65535_0_mind_project_code.ino.cpp.o.2680+0xd8>
     e18:	94 c0       	rjmp	.+296    	; 0xf42 <global constructors keyed to 65535_0_mind_project_code.ino.cpp.o.2680+0x200>
     e1a:	fc 01       	movw	r30, r24
     e1c:	9e 01       	movw	r18, r28
     e1e:	11 92       	st	Z+, r1
     e20:	21 50       	subi	r18, 0x01	; 1
     e22:	30 40       	sbci	r19, 0x00	; 0
     e24:	e1 f7       	brne	.-8      	; 0xe1e <global constructors keyed to 65535_0_mind_project_code.ino.cpp.o.2680+0xdc>
     e26:	88 e7       	ldi	r24, 0x78	; 120
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <pixels+0x3>
     e2e:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <pixels+0x2>
     e32:	8d e0       	ldi	r24, 0x0D	; 13
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <pixels+0x7>
     e3a:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <pixels+0x6>
     e3e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <pixels+0x1>
     e42:	88 23       	and	r24, r24
     e44:	31 f0       	breq	.+12     	; 0xe52 <global constructors keyed to 65535_0_mind_project_code.ino.cpp.o.2680+0x110>
     e46:	61 e0       	ldi	r22, 0x01	; 1
     e48:	8d e0       	ldi	r24, 0x0D	; 13
     e4a:	9c da       	rcall	.-2760   	; 0x384 <pinMode>
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	8d e0       	ldi	r24, 0x0D	; 13
     e50:	6c da       	rcall	.-2856   	; 0x32a <digitalWrite>
     e52:	cc e9       	ldi	r28, 0x9C	; 156
     e54:	d1 e0       	ldi	r29, 0x01	; 1
     e56:	fe 01       	movw	r30, r28
     e58:	84 91       	lpm	r24, Z
     e5a:	e8 2f       	mov	r30, r24
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	ee 0f       	add	r30, r30
     e60:	ff 1f       	adc	r31, r31
     e62:	eb 57       	subi	r30, 0x7B	; 123
     e64:	fe 4f       	sbci	r31, 0xFE	; 254
     e66:	85 91       	lpm	r24, Z+
     e68:	94 91       	lpm	r25, Z
     e6a:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <pixels+0x14>
     e6e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <pixels+0x13>
     e72:	0b e7       	ldi	r16, 0x7B	; 123
     e74:	11 e0       	ldi	r17, 0x01	; 1
     e76:	f8 01       	movw	r30, r16
     e78:	84 91       	lpm	r24, Z
     e7a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <pixels+0x15>
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	8d e0       	ldi	r24, 0x0D	; 13
     e82:	80 da       	rcall	.-2816   	; 0x384 <pinMode>
     e84:	f8 01       	movw	r30, r16
     e86:	04 91       	lpm	r16, Z
     e88:	00 93 9b 01 	sts	0x019B, r16	; 0x80019b <oneWire>
     e8c:	fe 01       	movw	r30, r28
     e8e:	c4 91       	lpm	r28, Z
     e90:	ec 2f       	mov	r30, r28
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ec 59       	subi	r30, 0x9C	; 156
     e9a:	fe 4f       	sbci	r31, 0xFE	; 254
     e9c:	85 91       	lpm	r24, Z+
     e9e:	94 91       	lpm	r25, Z
     ea0:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <oneWire+0x2>
     ea4:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <oneWire+0x1>
     ea8:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <oneWire+0xb>
     eac:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <oneWire+0xd>
     eb0:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <oneWire+0xc>
     eb4:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <oneWire+0xa>
     eb8:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <oneWire+0x9>
     ebc:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <oneWire+0x8>
     ec0:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <oneWire+0x7>
     ec4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <oneWire+0x6>
     ec8:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <oneWire+0x5>
     ecc:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <oneWire+0x4>
     ed0:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <oneWire+0x3>
     ed4:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <sensors+0x16>
     ed8:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <sensors+0x15>
     edc:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <sensors+0x1>
     ee0:	8b e9       	ldi	r24, 0x9B	; 155
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <sensors+0xa>
     ee8:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <sensors+0x9>
     eec:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sensors+0x7>
     ef0:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sensors+0x8>
     ef4:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <sensors>
     ef8:	89 e0       	ldi	r24, 0x09	; 9
     efa:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <sensors+0x3>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sensors+0x4>
     f04:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <sensors+0x5>
     f08:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sensors+0x6>
     f0c:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <ServoCount>
     f10:	8c 30       	cpi	r24, 0x0C	; 12
     f12:	00 f5       	brcc	.+64     	; 0xf54 <global constructors keyed to 65535_0_mind_project_code.ino.cpp.o.2680+0x212>
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	98 0f       	add	r25, r24
     f18:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <ServoCount>
     f1c:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <myservo>
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	fc 01       	movw	r30, r24
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	e8 0f       	add	r30, r24
     f2a:	f9 1f       	adc	r31, r25
     f2c:	e1 54       	subi	r30, 0x41	; 65
     f2e:	fe 4f       	sbci	r31, 0xFE	; 254
     f30:	8c ed       	ldi	r24, 0xDC	; 220
     f32:	95 e0       	ldi	r25, 0x05	; 5
     f34:	92 83       	std	Z+2, r25	; 0x02
     f36:	81 83       	std	Z+1, r24	; 0x01
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	08 95       	ret
     f42:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <pixels+0x5>
     f46:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <pixels+0x4>
     f4a:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <pixels+0x3>
     f4e:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <pixels+0x2>
     f52:	6f cf       	rjmp	.-290    	; 0xe32 <global constructors keyed to 65535_0_mind_project_code.ino.cpp.o.2680+0xf0>
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <myservo>
     f5a:	ee cf       	rjmp	.-36     	; 0xf38 <global constructors keyed to 65535_0_mind_project_code.ino.cpp.o.2680+0x1f6>

00000f5c <main>:
main():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     f5c:	78 94       	sei
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
     f5e:	83 b7       	in	r24, 0x33	; 51
     f60:	83 60       	ori	r24, 0x03	; 3
     f62:	83 bf       	out	0x33, r24	; 51
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
     f64:	89 b7       	in	r24, 0x39	; 57
     f66:	81 60       	ori	r24, 0x01	; 1
     f68:	89 bf       	out	0x39, r24	; 57
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	9e bd       	out	0x2e, r25	; 46
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     f6e:	8e b5       	in	r24, 0x2e	; 46
     f70:	81 60       	ori	r24, 0x01	; 1
     f72:	8e bd       	out	0x2e, r24	; 46
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     f74:	8f b5       	in	r24, 0x2f	; 47
     f76:	81 60       	ori	r24, 0x01	; 1
     f78:	8f bd       	out	0x2f, r24	; 47
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
     f7a:	85 b5       	in	r24, 0x25	; 37
     f7c:	84 60       	ori	r24, 0x04	; 4
     f7e:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
     f80:	85 b5       	in	r24, 0x25	; 37
     f82:	80 64       	ori	r24, 0x40	; 64
     f84:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
     f86:	86 e8       	ldi	r24, 0x86	; 134
     f88:	86 b9       	out	0x06, r24	; 6
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
     f8a:	1a b8       	out	0x0a, r1	; 10
begin():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     f8c:	e0 91 f7 00 	lds	r30, 0x00F7	; 0x8000f7 <Serial+0x10>
     f90:	f0 91 f8 00 	lds	r31, 0x00F8	; 0x8000f8 <Serial+0x11>
     f94:	90 83       	st	Z, r25
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     f96:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <Serial+0xc>
     f9a:	f0 91 f4 00 	lds	r31, 0x00F4	; 0x8000f4 <Serial+0xd>
     f9e:	10 82       	st	Z, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     fa0:	e0 91 f5 00 	lds	r30, 0x00F5	; 0x8000f5 <Serial+0xe>
     fa4:	f0 91 f6 00 	lds	r31, 0x00F6	; 0x8000f6 <Serial+0xf>
     fa8:	97 e6       	ldi	r25, 0x67	; 103
     faa:	90 83       	st	Z, r25
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     fac:	10 92 ff 00 	sts	0x00FF, r1	; 0x8000ff <Serial+0x18>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     fb0:	e0 91 fb 00 	lds	r30, 0x00FB	; 0x8000fb <Serial+0x14>
     fb4:	f0 91 fc 00 	lds	r31, 0x00FC	; 0x8000fc <Serial+0x15>
     fb8:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     fba:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <Serial+0x12>
     fbe:	f0 91 fa 00 	lds	r31, 0x00FA	; 0x8000fa <Serial+0x13>
     fc2:	80 81       	ld	r24, Z
     fc4:	88 69       	ori	r24, 0x98	; 152
     fc6:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     fc8:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <Serial+0x12>
     fcc:	f0 91 fa 00 	lds	r31, 0x00FA	; 0x8000fa <Serial+0x13>
     fd0:	80 81       	ld	r24, Z
     fd2:	8f 7d       	andi	r24, 0xDF	; 223
     fd4:	80 83       	st	Z, r24
init_keypad():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:134
  { 'c', '0', '=', '+' }
};

void init_keypad() {
  for (int i = 0; i < row; i++) {
    pinMode(rowPins[i], INPUT_PULLUP);
     fd6:	62 e0       	ldi	r22, 0x02	; 2
     fd8:	8c e0       	ldi	r24, 0x0C	; 12
     fda:	d4 d9       	rcall	.-3160   	; 0x384 <pinMode>
     fdc:	62 e0       	ldi	r22, 0x02	; 2
     fde:	8d e0       	ldi	r24, 0x0D	; 13
     fe0:	d1 d9       	rcall	.-3166   	; 0x384 <pinMode>
     fe2:	62 e0       	ldi	r22, 0x02	; 2
     fe4:	84 e1       	ldi	r24, 0x14	; 20
     fe6:	ce d9       	rcall	.-3172   	; 0x384 <pinMode>
     fe8:	62 e0       	ldi	r22, 0x02	; 2
     fea:	85 e1       	ldi	r24, 0x15	; 21
     fec:	cb d9       	rcall	.-3178   	; 0x384 <pinMode>
     fee:	de e6       	ldi	r29, 0x6E	; 110
     ff0:	ed 2e       	mov	r14, r29
     ff2:	d0 e0       	ldi	r29, 0x00	; 0
     ff4:	fd 2e       	mov	r15, r29
     ff6:	ca e6       	ldi	r28, 0x6A	; 106
     ff8:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:137
  }
  for (int i = 0; i < col; i++) {
    pinMode(colPins[i], OUTPUT);
     ffa:	19 91       	ld	r17, Y+
     ffc:	61 e0       	ldi	r22, 0x01	; 1
     ffe:	81 2f       	mov	r24, r17
    1000:	c1 d9       	rcall	.-3198   	; 0x384 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:138
    digitalWrite(colPins[i], HIGH);  // Set all columns HIGH
    1002:	61 e0       	ldi	r22, 0x01	; 1
    1004:	81 2f       	mov	r24, r17
    1006:	91 d9       	rcall	.-3294   	; 0x32a <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:139
    delay(20);
    1008:	64 e1       	ldi	r22, 0x14	; 20
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	1b da       	rcall	.-3018   	; 0x448 <delay>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:136

void init_keypad() {
  for (int i = 0; i < row; i++) {
    pinMode(rowPins[i], INPUT_PULLUP);
  }
  for (int i = 0; i < col; i++) {
    1012:	ec 16       	cp	r14, r28
    1014:	fd 06       	cpc	r15, r29
    1016:	89 f7       	brne	.-30     	; 0xffa <main+0x9e>
init_ldr():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:43
  delay(3000);
}

// LDR System
void init_ldr() {
  pinMode(ldr, INPUT);
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	8e e0       	ldi	r24, 0x0E	; 14
    101c:	b3 d9       	rcall	.-3226   	; 0x384 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:44
  pinMode(led, OUTPUT);
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	89 e0       	ldi	r24, 0x09	; 9
    1022:	b0 d9       	rcall	.-3232   	; 0x384 <pinMode>
init_pir():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:10
#include "mind_project_lib.h"
#include <avr/pgmspace.h>

// PIR System
void init_pir() {
  pinMode(pirPin, INPUT);
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	87 e0       	ldi	r24, 0x07	; 7
    1028:	ad d9       	rcall	.-3238   	; 0x384 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:11
  pinMode(buzzerPin, OUTPUT);
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	86 e0       	ldi	r24, 0x06	; 6
    102e:	aa d9       	rcall	.-3244   	; 0x384 <pinMode>
attach():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:240
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
{
  if(this->servoIndex < MAX_SERVOS ) {
    1030:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <myservo>
    1034:	8c 30       	cpi	r24, 0x0C	; 12
    1036:	08 f0       	brcs	.+2      	; 0x103a <main+0xde>
    1038:	4b c0       	rjmp	.+150    	; 0x10d0 <main+0x174>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:241
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	8a e0       	ldi	r24, 0x0A	; 10
    103e:	a2 d9       	rcall	.-3260   	; 0x384 <pinMode>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:242
    servos[this->servoIndex].Pin.nbr = pin;
    1040:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <myservo>
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	f9 01       	movw	r30, r18
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	e2 0f       	add	r30, r18
    1050:	f3 1f       	adc	r31, r19
    1052:	e1 54       	subi	r30, 0x41	; 65
    1054:	fe 4f       	sbci	r31, 0xFE	; 254
    1056:	90 81       	ld	r25, Z
    1058:	90 7c       	andi	r25, 0xC0	; 192
    105a:	9a 60       	ori	r25, 0x0A	; 10
    105c:	90 83       	st	Z, r25
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:244
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 us
    105e:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <myservo+0x1>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:245
    this->max  = (MAX_PULSE_WIDTH - max)/4;
    1062:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <myservo+0x2>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:247
    // initialize the timer if it has not already been initialized
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    1066:	2c e0       	ldi	r18, 0x0C	; 12
    1068:	62 2f       	mov	r22, r18
    106a:	53 d5       	rcall	.+2726   	; 0x1b12 <__udivmodqi4>
isTimerActive():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:214

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
    106c:	82 9f       	mul	r24, r18
    106e:	b0 01       	movw	r22, r0
    1070:	11 24       	eor	r1, r1
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	ab 01       	movw	r20, r22
    1078:	42 0f       	add	r20, r18
    107a:	53 1f       	adc	r21, r19
    107c:	fa 01       	movw	r30, r20
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	e4 0f       	add	r30, r20
    1084:	f5 1f       	adc	r31, r21
    1086:	e1 54       	subi	r30, 0x41	; 65
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	90 81       	ld	r25, Z
    108c:	96 fd       	sbrc	r25, 6
    108e:	12 c0       	rjmp	.+36     	; 0x10b4 <main+0x158>
    1090:	2f 5f       	subi	r18, 0xFF	; 255
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:213
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    1094:	2c 30       	cpi	r18, 0x0C	; 12
    1096:	31 05       	cpc	r19, r1
    1098:	71 f7       	brne	.-36     	; 0x1076 <main+0x11a>
initISR():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:127


static void initISR(timer16_Sequence_t timer)
{
#if defined (_useTimer1)
  if(timer == _timer1) {
    109a:	81 11       	cpse	r24, r1
    109c:	0b c0       	rjmp	.+22     	; 0x10b4 <main+0x158>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:128
    TCCR1A = 0;             // normal counting mode
    109e:	1f bc       	out	0x2f, r1	; 47
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:129
    TCCR1B = _BV(CS11);     // set prescaler of 8
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	8e bd       	out	0x2e, r24	; 46
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:130
    TCNT1 = 0;              // clear the timer count
    10a4:	1d bc       	out	0x2d, r1	; 45
    10a6:	1c bc       	out	0x2c, r1	; 44
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:132
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts
    10a8:	88 b7       	in	r24, 0x38	; 56
    10aa:	80 61       	ori	r24, 0x10	; 16
    10ac:	88 bf       	out	0x38, r24	; 56
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:133
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt
    10ae:	89 b7       	in	r24, 0x39	; 57
    10b0:	80 61       	ori	r24, 0x10	; 16
    10b2:	89 bf       	out	0x39, r24	; 57
attach():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:250
    this->max  = (MAX_PULSE_WIDTH - max)/4;
    // initialize the timer if it has not already been initialized
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
    10b4:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <myservo>
    10b8:	8e 2f       	mov	r24, r30
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	fc 01       	movw	r30, r24
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	e8 0f       	add	r30, r24
    10c4:	f9 1f       	adc	r31, r25
    10c6:	e1 54       	subi	r30, 0x41	; 65
    10c8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ca:	80 81       	ld	r24, Z
    10cc:	80 64       	ori	r24, 0x40	; 64
    10ce:	80 83       	st	Z, r24
init_servo():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:27
// Door System (Servo)
Servo myservo;

void init_servo() {
  myservo.attach(servoPin);
  myservo.write(0);  // Initially close the door
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 d8       	rcall	.-3808   	; 0x1f6 <Servo::write(int) [clone .constprop.31]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:28
  pinMode(door_btn, INPUT_PULLUP);
    10d6:	62 e0       	ldi	r22, 0x02	; 2
    10d8:	83 e1       	ldi	r24, 0x13	; 19
    10da:	54 d9       	rcall	.-3416   	; 0x384 <pinMode>
init_temperature_sys():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:60
  }
}

// Temperature System
void init_temperature_sys() {
  pinMode(ntc_pin, INPUT);
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	8f e0       	ldi	r24, 0x0F	; 15
    10e0:	51 d9       	rcall	.-3422   	; 0x384 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:62

  pinMode(redPin, OUTPUT);
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	80 e1       	ldi	r24, 0x10	; 16
    10e6:	4e d9       	rcall	.-3428   	; 0x384 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:63
  pinMode(greenPin, OUTPUT);
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	81 e1       	ldi	r24, 0x11	; 17
    10ec:	4b d9       	rcall	.-3434   	; 0x384 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:64
  pinMode(bluePin, OUTPUT);
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	82 e1       	ldi	r24, 0x12	; 18
    10f2:	48 d9       	rcall	.-3440   	; 0x384 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:66

  pinMode(FAN, OUTPUT);
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	88 e0       	ldi	r24, 0x08	; 8
    10f8:	45 d9       	rcall	.-3446   	; 0x384 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:67
  pinMode(enable, OUTPUT);
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	8b e0       	ldi	r24, 0x0B	; 11
    10fe:	42 d9       	rcall	.-3452   	; 0x384 <pinMode>
setup():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:21
  init_keypad();
  init_ldr();
  init_pir();
  init_servo();
  init_temperature_sys();
  Serial.println(F("ENTER PASS:"));
    1100:	80 e8       	ldi	r24, 0x80	; 128
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	57 db       	rcall	.-2386   	; 0x7b4 <Print::println(__FlashStringHelper const*) [clone .constprop.33]>
analogRead():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    1106:	41 e4       	ldi	r20, 0x41	; 65
    1108:	74 2e       	mov	r7, r20
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:112
  {
    digitalWrite(pin, HIGH);
  }
  else
  {
    switch(digitalPinToTimer(pin))
    110a:	58 e5       	ldi	r21, 0x58	; 88
    110c:	25 2e       	mov	r2, r21
    110e:	51 e0       	ldi	r21, 0x01	; 1
    1110:	35 2e       	mov	r3, r21
analogRead():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    1112:	60 e4       	ldi	r22, 0x40	; 64
    1114:	66 2e       	mov	r6, r22
serialEventRun():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	a7 2e       	mov	r10, r23
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	b7 2e       	mov	r11, r23
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:89
          Serial.println(F("Password correct. Door opened."));
        } else {
          Serial.println(F("Password incorrect. Try again."));
        }

        memset(password, '\0', sizeof(password));  // Clear password array
    111e:	35 e0       	ldi	r19, 0x05	; 5
    1120:	53 2e       	mov	r5, r19
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:25
  init_temperature_sys();
  Serial.println(F("ENTER PASS:"));
}

void loop() {
  if (door_state) {
    1122:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <door_state>
    1126:	2a e6       	ldi	r18, 0x6A	; 106
    1128:	e2 2e       	mov	r14, r18
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	f2 2e       	mov	r15, r18
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:144
    delay(20);
  }
}

char getKey() {
  for (int c = 0; c < col; c++) {
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	00 e0       	ldi	r16, 0x00	; 0
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:25
    1132:	88 23       	and	r24, r24
    1134:	09 f4       	brne	.+2      	; 0x1138 <main+0x1dc>
    1136:	5b c1       	rjmp	.+694    	; 0x13ee <main+0x492>
servo_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:32
  myservo.write(0);  // Initially close the door
  pinMode(door_btn, INPUT_PULLUP);
}

void servo_sys_activate() {
  myservo.write(90);  // Open the door
    1138:	8a e5       	ldi	r24, 0x5A	; 90
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	5c d8       	rcall	.-3912   	; 0x1f6 <Servo::write(int) [clone .constprop.31]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:33
  delay(1000);        // Keep door open for 3 seconds
    113e:	68 ee       	ldi	r22, 0xE8	; 232
    1140:	73 e0       	ldi	r23, 0x03	; 3
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	80 d9       	rcall	.-3328   	; 0x448 <delay>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:28
    // Door open logic
    servo_sys_activate();
    Serial.println(F("Door is opened."));
    1148:	83 e3       	ldi	r24, 0x33	; 51
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	33 db       	rcall	.-2458   	; 0x7b4 <Print::println(__FlashStringHelper const*) [clone .constprop.33]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:30

    while (door_state) {
    114e:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <door_state>
    1152:	88 23       	and	r24, r24
    1154:	09 f4       	brne	.+2      	; 0x1158 <main+0x1fc>
    1156:	fd c0       	rjmp	.+506    	; 0x1352 <main+0x3f6>
    1158:	c5 e0       	ldi	r28, 0x05	; 5
    115a:	d0 e0       	ldi	r29, 0x00	; 0
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:71
  pinMode(FAN, OUTPUT);
  pinMode(enable, OUTPUT);
}

void temperature_sys_activate() {
  float average = 0;
    115c:	c1 2c       	mov	r12, r1
    115e:	d1 2c       	mov	r13, r1
    1160:	76 01       	movw	r14, r12
analogRead():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
    1162:	77 b8       	out	0x07, r7	; 7
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    1164:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    1166:	36 99       	sbic	0x06, 6	; 6
    1168:	fe cf       	rjmp	.-4      	; 0x1166 <main+0x20a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    116a:	64 b1       	in	r22, 0x04	; 4
    116c:	75 b1       	in	r23, 0x05	; 5
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:75
  int speed;

  for (int i = 0; i < samplingrate; i++) {
    average += analogRead(ntc_pin);
    116e:	07 2e       	mov	r0, r23
    1170:	00 0c       	add	r0, r0
    1172:	88 0b       	sbc	r24, r24
    1174:	99 0b       	sbc	r25, r25
    1176:	e8 d1       	rcall	.+976    	; 0x1548 <__floatsisf>
    1178:	9b 01       	movw	r18, r22
    117a:	ac 01       	movw	r20, r24
    117c:	c7 01       	movw	r24, r14
    117e:	b6 01       	movw	r22, r12
    1180:	4f d3       	rcall	.+1694   	; 0x1820 <__addsf3>
    1182:	6b 01       	movw	r12, r22
    1184:	7c 01       	movw	r14, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:76
    delay(10);  // Short delay for analog read
    1186:	6a e0       	ldi	r22, 0x0A	; 10
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	5c d9       	rcall	.-3400   	; 0x448 <delay>
    1190:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:74

void temperature_sys_activate() {
  float average = 0;
  int speed;

  for (int i = 0; i < samplingrate; i++) {
    1192:	39 f7       	brne	.-50     	; 0x1162 <main+0x206>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:79
    average += analogRead(ntc_pin);
    delay(10);  // Short delay for analog read
  }

  average /= samplingrate;
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 ea       	ldi	r20, 0xA0	; 160
    119a:	50 e4       	ldi	r21, 0x40	; 64
    119c:	c7 01       	movw	r24, r14
    119e:	b6 01       	movw	r22, r12
    11a0:	a3 d3       	rcall	.+1862   	; 0x18e8 <__divsf3>
    11a2:	9b 01       	movw	r18, r22
    11a4:	ac 01       	movw	r20, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:80
  average = (1023 / average - 1.0);
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 ec       	ldi	r23, 0xC0	; 192
    11aa:	8f e7       	ldi	r24, 0x7F	; 127
    11ac:	94 e4       	ldi	r25, 0x44	; 68
    11ae:	9c d3       	rcall	.+1848   	; 0x18e8 <__divsf3>
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e8       	ldi	r20, 0x80	; 128
    11b6:	5f e3       	ldi	r21, 0x3F	; 63
    11b8:	32 d3       	rcall	.+1636   	; 0x181e <__subsf3>
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:81
  average = Rref / average;
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	70 e4       	ldi	r23, 0x40	; 64
    11c2:	8c e1       	ldi	r24, 0x1C	; 28
    11c4:	96 e4       	ldi	r25, 0x46	; 70
    11c6:	90 d3       	rcall	.+1824   	; 0x18e8 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:83

  float temperature = average / nominal_resistance;
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e4       	ldi	r19, 0x40	; 64
    11cc:	4c e1       	ldi	r20, 0x1C	; 28
    11ce:	56 e4       	ldi	r21, 0x46	; 70
    11d0:	8b d3       	rcall	.+1814   	; 0x18e8 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:84
  temperature = log(temperature);
    11d2:	2c d4       	rcall	.+2136   	; 0x1a2c <log>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:85
  temperature /= beta;
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e4       	ldi	r19, 0x40	; 64
    11d8:	43 e5       	ldi	r20, 0x53	; 83
    11da:	55 e4       	ldi	r21, 0x45	; 69
    11dc:	85 d3       	rcall	.+1802   	; 0x18e8 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:86
  temperature += 1.0 / (nominal_temperature + 273.15);
    11de:	2f e0       	ldi	r18, 0x0F	; 15
    11e0:	3f ec       	ldi	r19, 0xCF	; 207
    11e2:	4b e5       	ldi	r20, 0x5B	; 91
    11e4:	5b e3       	ldi	r21, 0x3B	; 59
    11e6:	1c d3       	rcall	.+1592   	; 0x1820 <__addsf3>
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:87
  temperature = 1.0 / temperature;
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	80 e8       	ldi	r24, 0x80	; 128
    11f2:	9f e3       	ldi	r25, 0x3F	; 63
    11f4:	79 d3       	rcall	.+1778   	; 0x18e8 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:88
  temperature -= 273.15;
    11f6:	23 e3       	ldi	r18, 0x33	; 51
    11f8:	33 e9       	ldi	r19, 0x93	; 147
    11fa:	48 e8       	ldi	r20, 0x88	; 136
    11fc:	53 e4       	ldi	r21, 0x43	; 67
    11fe:	0f d3       	rcall	.+1566   	; 0x181e <__subsf3>
    1200:	6b 01       	movw	r12, r22
    1202:	7c 01       	movw	r14, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:91

  // Control fan and LEDs based on temperature
  if (temperature < 20) {
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 ea       	ldi	r20, 0xA0	; 160
    120a:	51 e4       	ldi	r21, 0x41	; 65
    120c:	97 d1       	rcall	.+814    	; 0x153c <__cmpsf2>
    120e:	87 ff       	sbrs	r24, 7
    1210:	11 c0       	rjmp	.+34     	; 0x1234 <main+0x2d8>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:92
    digitalWrite(FAN, LOW);  // Turn off fan
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	88 e0       	ldi	r24, 0x08	; 8
    1216:	89 d8       	rcall	.-3822   	; 0x32a <digitalWrite>
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	8b e0       	ldi	r24, 0x0B	; 11
    121c:	b3 d8       	rcall	.-3738   	; 0x384 <pinMode>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:104
  if (val == 0)
  {
    digitalWrite(pin, LOW);
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	8b e0       	ldi	r24, 0x0B	; 11
    1222:	83 d8       	rcall	.-3834   	; 0x32a <digitalWrite>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:94
    analogWrite(enable, 0);
    digitalWrite(redPin, LOW);
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	80 e1       	ldi	r24, 0x10	; 16
    1228:	80 d8       	rcall	.-3840   	; 0x32a <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:95
    digitalWrite(bluePin, HIGH);
    122a:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:108
    digitalWrite(greenPin, HIGH);
  } else if (temperature > 30) {
    digitalWrite(FAN, HIGH);   // Ensure fan is on
    analogWrite(enable, 255);  // Full speed
    digitalWrite(redPin, HIGH);
    digitalWrite(bluePin, LOW);
    122c:	82 e1       	ldi	r24, 0x12	; 18
    122e:	7d d8       	rcall	.-3846   	; 0x32a <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:109
    digitalWrite(greenPin, LOW);
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	3b c0       	rjmp	.+118    	; 0x12aa <main+0x34e>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:97
    digitalWrite(FAN, LOW);  // Turn off fan
    analogWrite(enable, 0);
    digitalWrite(redPin, LOW);
    digitalWrite(bluePin, HIGH);
    digitalWrite(greenPin, LOW);
  } else if (temperature >= 20 && temperature <= 30) {
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 ea       	ldi	r20, 0xA0	; 160
    123a:	51 e4       	ldi	r21, 0x41	; 65
    123c:	c7 01       	movw	r24, r14
    123e:	b6 01       	movw	r22, r12
    1240:	ec d3       	rcall	.+2008   	; 0x1a1a <__gesf2>
    1242:	87 fd       	sbrc	r24, 7
    1244:	b6 c0       	rjmp	.+364    	; 0x13b2 <main+0x456>
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 ef       	ldi	r20, 0xF0	; 240
    124c:	51 e4       	ldi	r21, 0x41	; 65
    124e:	c7 01       	movw	r24, r14
    1250:	b6 01       	movw	r22, r12
    1252:	74 d1       	rcall	.+744    	; 0x153c <__cmpsf2>
    1254:	18 16       	cp	r1, r24
    1256:	0c f4       	brge	.+2      	; 0x125a <main+0x2fe>
    1258:	ac c0       	rjmp	.+344    	; 0x13b2 <main+0x456>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:98
    digitalWrite(FAN, HIGH);     // Turn on fan
    125a:	61 e0       	ldi	r22, 0x01	; 1
    125c:	88 e0       	ldi	r24, 0x08	; 8
    125e:	65 d8       	rcall	.-3894   	; 0x32a <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:99
    speed = map(temperature, 20, 30, 0, 255);
    1260:	c7 01       	movw	r24, r14
    1262:	b6 01       	movw	r22, r12
    1264:	a9 d3       	rcall	.+1874   	; 0x19b8 <__fixsfsi>
map():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WMath.cpp:54
    1266:	9b 01       	movw	r18, r22
    1268:	ac 01       	movw	r20, r24
    126a:	24 51       	subi	r18, 0x14	; 20
    126c:	31 09       	sbc	r19, r1
    126e:	41 09       	sbc	r20, r1
    1270:	51 09       	sbc	r21, r1
    1272:	af ef       	ldi	r26, 0xFF	; 255
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	95 d2       	rcall	.+1322   	; 0x17a2 <__muluhisi3>
    1278:	2a e0       	ldi	r18, 0x0A	; 10
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	74 d2       	rcall	.+1256   	; 0x176a <__divmodsi4>
    1282:	12 2f       	mov	r17, r18
    1284:	03 2f       	mov	r16, r19
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:99
    1286:	c2 2f       	mov	r28, r18
    1288:	d3 2f       	mov	r29, r19
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	8b e0       	ldi	r24, 0x0B	; 11
    128e:	7a d8       	rcall	.-3852   	; 0x384 <pinMode>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:102
  if (val == 0)
    1290:	20 97       	sbiw	r28, 0x00	; 0
    1292:	09 f0       	breq	.+2      	; 0x1296 <main+0x33a>
    1294:	68 c0       	rjmp	.+208    	; 0x1366 <main+0x40a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:104
  {
    digitalWrite(pin, LOW);
    1296:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:108
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    1298:	8b e0       	ldi	r24, 0x0B	; 11
    129a:	47 d8       	rcall	.-3954   	; 0x32a <digitalWrite>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:101
    analogWrite(enable, speed);  // Adjust fan speed
    digitalWrite(redPin, LOW);
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	80 e1       	ldi	r24, 0x10	; 16
    12a0:	44 d8       	rcall	.-3960   	; 0x32a <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:102
    digitalWrite(bluePin, LOW);
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	82 e1       	ldi	r24, 0x12	; 18
    12a6:	41 d8       	rcall	.-3966   	; 0x32a <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:103
    digitalWrite(greenPin, HIGH);
    12a8:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:109
  } else if (temperature > 30) {
    digitalWrite(FAN, HIGH);   // Ensure fan is on
    analogWrite(enable, 255);  // Full speed
    digitalWrite(redPin, HIGH);
    digitalWrite(bluePin, LOW);
    digitalWrite(greenPin, LOW);
    12aa:	81 e1       	ldi	r24, 0x11	; 17
    12ac:	3e d8       	rcall	.-3972   	; 0x32a <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:111
  }
  Serial.print(F("Temp: "));
    12ae:	8f e8       	ldi	r24, 0x8F	; 143
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	e1 d9       	rcall	.-3134   	; 0x676 <Print::print(__FlashStringHelper const*) [clone .constprop.34]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:112
  Serial.print((int)temperature);
    12b4:	c7 01       	movw	r24, r14
    12b6:	b6 01       	movw	r22, r12
    12b8:	7f d3       	rcall	.+1790   	; 0x19b8 <__fixsfsi>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    12ba:	07 2e       	mov	r0, r23
    12bc:	00 0c       	add	r0, r0
    12be:	88 0b       	sbc	r24, r24
    12c0:	99 0b       	sbc	r25, r25
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    12c2:	97 ff       	sbrs	r25, 7
    12c4:	8e c0       	rjmp	.+284    	; 0x13e2 <main+0x486>
    12c6:	c4 da       	rcall	.-2680   	; 0x850 <Print::print(long, int) [clone .part.3] [clone .constprop.23]>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:113
  Serial.println(F("*C"));
    12c8:	8c e8       	ldi	r24, 0x8C	; 140
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	73 da       	rcall	.-2842   	; 0x7b4 <Print::println(__FlashStringHelper const*) [clone .constprop.33]>
analogRead():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    12ce:	67 b8       	out	0x07, r6	; 7
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    12d0:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
    12d2:	36 99       	sbic	0x06, 6	; 6
    12d4:	fe cf       	rjmp	.-4      	; 0x12d2 <main+0x376>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
    12d6:	c4 b1       	in	r28, 0x04	; 4
    12d8:	d5 b1       	in	r29, 0x05	; 5
ldr_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:49
  pinMode(led, OUTPUT);
}

void ldr_sys_activate() {
  int input = analogRead(ldr);
  Serial.print(F("light level:"));
    12da:	86 e9       	ldi	r24, 0x96	; 150
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	cb d9       	rcall	.-3178   	; 0x676 <Print::print(__FlashStringHelper const*) [clone .constprop.34]>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    12e0:	be 01       	movw	r22, r28
    12e2:	0d 2e       	mov	r0, r29
    12e4:	00 0c       	add	r0, r0
    12e6:	88 0b       	sbc	r24, r24
    12e8:	99 0b       	sbc	r25, r25
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    12ea:	97 ff       	sbrs	r25, 7
    12ec:	7d c0       	rjmp	.+250    	; 0x13e8 <main+0x48c>
    12ee:	b0 da       	rcall	.-2720   	; 0x850 <Print::print(long, int) [clone .part.3] [clone .constprop.23]>
write():
    12f0:	80 e8       	ldi	r24, 0x80	; 128
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	53 da       	rcall	.-2906   	; 0x79c <Print::write(char const*) [clone .part.2] [clone .constprop.36]>
ldr_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:52
  Serial.println(input);  // Print LDR value for debugging
  if (input < 500){
    digitalWrite(led, HIGH);
    12f6:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:51

void ldr_sys_activate() {
  int input = analogRead(ldr);
  Serial.print(F("light level:"));
  Serial.println(input);  // Print LDR value for debugging
  if (input < 500){
    12f8:	c4 3f       	cpi	r28, 0xF4	; 244
    12fa:	d1 40       	sbci	r29, 0x01	; 1
    12fc:	0c f0       	brlt	.+2      	; 0x1300 <main+0x3a4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:54
    digitalWrite(led, HIGH);
  }else{
    digitalWrite(led, LOW);
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	89 e0       	ldi	r24, 0x09	; 9
    1302:	13 d8       	rcall	.-4058   	; 0x32a <digitalWrite>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:35
      temperature_sys_activate();
      ldr_sys_activate();

      // Check for button press to close the door
      if (digitalRead(door_btn) == LOW) {
    1304:	83 e1       	ldi	r24, 0x13	; 19
    1306:	e9 d7       	rcall	.+4050   	; 0x22da <__TEXT_REGION_LENGTH__+0x2da>
    1308:	89 2b       	or	r24, r25
    130a:	09 f0       	breq	.+2      	; 0x130e <main+0x3b2>
    130c:	20 cf       	rjmp	.-448    	; 0x114e <main+0x1f2>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:36
        door_state = false;
    130e:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <door_state>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:39

        // Turn off the systems
        digitalWrite(FAN, LOW);
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	88 e0       	ldi	r24, 0x08	; 8
    1316:	09 d8       	rcall	.-4078   	; 0x32a <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:40
        digitalWrite(enable, LOW);
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	8b e0       	ldi	r24, 0x0B	; 11
    131c:	06 d8       	rcall	.-4084   	; 0x32a <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:41
        digitalWrite(redPin, LOW);
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	80 e1       	ldi	r24, 0x10	; 16
    1322:	03 d8       	rcall	.-4090   	; 0x32a <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:42
        digitalWrite(bluePin, LOW);
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	82 e1       	ldi	r24, 0x12	; 18
    1328:	00 d8       	rcall	.-4096   	; 0x32a <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:43
        digitalWrite(greenPin, LOW);
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	81 e1       	ldi	r24, 0x11	; 17
    132e:	fd d7       	rcall	.+4090   	; 0x232a <__TEXT_REGION_LENGTH__+0x32a>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:44
        digitalWrite(led, LOW);
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	89 e0       	ldi	r24, 0x09	; 9
    1334:	fa d7       	rcall	.+4084   	; 0x232a <__TEXT_REGION_LENGTH__+0x32a>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:46

        Serial.println(F("Door is closed."));
    1336:	83 e2       	ldi	r24, 0x23	; 35
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	3c da       	rcall	.-2952   	; 0x7b4 <Print::println(__FlashStringHelper const*) [clone .constprop.33]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:47
        Serial.println(F("ENTER PASS:"));
    133c:	87 e1       	ldi	r24, 0x17	; 23
    133e:	91 e0       	ldi	r25, 0x01	; 1
    1340:	39 da       	rcall	.-2958   	; 0x7b4 <Print::println(__FlashStringHelper const*) [clone .constprop.33]>
close_door():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:37
  myservo.write(90);  // Open the door
  delay(1000);        // Keep door open for 3 seconds
}

void close_door() {
  myservo.write(0);  // Close the door
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	57 d7       	rcall	.+3758   	; 0x21f6 <__TEXT_REGION_LENGTH__+0x1f6>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:38
  delay(3000);
    1348:	68 eb       	ldi	r22, 0xB8	; 184
    134a:	7b e0       	ldi	r23, 0x0B	; 11
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	7b d8       	rcall	.-3850   	; 0x448 <delay>
serialEventRun():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
    1352:	a1 14       	cp	r10, r1
    1354:	b1 04       	cpc	r11, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <main+0x3fe>
    1358:	e4 ce       	rjmp	.-568    	; 0x1122 <main+0x1c6>
    135a:	10 d9       	rcall	.-3552   	; 0x57c <Serial0_available()>
    135c:	88 23       	and	r24, r24
    135e:	09 f4       	brne	.+2      	; 0x1362 <main+0x406>
    1360:	e0 ce       	rjmp	.-576    	; 0x1122 <main+0x1c6>
    1362:	4e d6       	rcall	.+3228   	; 0x2000 <__TEXT_REGION_LENGTH__>
    1364:	dc ce       	rjmp	.-584    	; 0x111e <main+0x1c2>
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:106
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
    1366:	cf 3f       	cpi	r28, 0xFF	; 255
    1368:	d1 05       	cpc	r29, r1
    136a:	11 f4       	brne	.+4      	; 0x1370 <main+0x414>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, HIGH);
    136c:	61 e0       	ldi	r22, 0x01	; 1
    136e:	94 cf       	rjmp	.-216    	; 0x1298 <main+0x33c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:112
  }
  else
  {
    switch(digitalPinToTimer(pin))
    1370:	f1 01       	movw	r30, r2
    1372:	84 91       	lpm	r24, Z
    1374:	85 30       	cpi	r24, 0x05	; 5
    1376:	61 f0       	breq	.+24     	; 0x1390 <main+0x434>
    1378:	87 30       	cpi	r24, 0x07	; 7
    137a:	91 f0       	breq	.+36     	; 0x13a0 <main+0x444>
    137c:	84 30       	cpi	r24, 0x04	; 4
    137e:	a9 f4       	brne	.+42     	; 0x13aa <main+0x44e>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:148
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
    1380:	8f b5       	in	r24, 0x2f	; 47
    1382:	80 68       	ori	r24, 0x80	; 128
    1384:	8f bd       	out	0x2f, r24	; 47
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:149
        OCR1A = val; // set pwm duty
    1386:	81 2f       	mov	r24, r17
    1388:	90 2f       	mov	r25, r16
    138a:	9b bd       	out	0x2b, r25	; 43
    138c:	8a bd       	out	0x2a, r24	; 42
    138e:	86 cf       	rjmp	.-244    	; 0x129c <main+0x340>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:156
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
    1390:	8f b5       	in	r24, 0x2f	; 47
    1392:	80 62       	ori	r24, 0x20	; 32
    1394:	8f bd       	out	0x2f, r24	; 47
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:157
        OCR1B = val; // set pwm duty
    1396:	81 2f       	mov	r24, r17
    1398:	90 2f       	mov	r25, r16
    139a:	99 bd       	out	0x29, r25	; 41
    139c:	88 bd       	out	0x28, r24	; 40
    139e:	7e cf       	rjmp	.-260    	; 0x129c <main+0x340>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:172
      #endif

      #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        // connect pwm to pin on timer 2
        TCCR2 |= _BV(COM21);
    13a0:	85 b5       	in	r24, 0x25	; 37
    13a2:	80 62       	ori	r24, 0x20	; 32
    13a4:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:173
        OCR2 = val; // set pwm duty
    13a6:	13 bd       	out	0x23, r17	; 35
    13a8:	79 cf       	rjmp	.-270    	; 0x129c <main+0x340>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:292
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
    13aa:	c0 38       	cpi	r28, 0x80	; 128
    13ac:	d1 05       	cpc	r29, r1
    13ae:	f4 f6       	brge	.-68     	; 0x136c <main+0x410>
    13b0:	72 cf       	rjmp	.-284    	; 0x1296 <main+0x33a>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:104
    speed = map(temperature, 20, 30, 0, 255);
    analogWrite(enable, speed);  // Adjust fan speed
    digitalWrite(redPin, LOW);
    digitalWrite(bluePin, LOW);
    digitalWrite(greenPin, HIGH);
  } else if (temperature > 30) {
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 ef       	ldi	r20, 0xF0	; 240
    13b8:	51 e4       	ldi	r21, 0x41	; 65
    13ba:	c7 01       	movw	r24, r14
    13bc:	b6 01       	movw	r22, r12
    13be:	2d d3       	rcall	.+1626   	; 0x1a1a <__gesf2>
    13c0:	18 16       	cp	r1, r24
    13c2:	0c f0       	brlt	.+2      	; 0x13c6 <main+0x46a>
    13c4:	74 cf       	rjmp	.-280    	; 0x12ae <main+0x352>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:105
    digitalWrite(FAN, HIGH);   // Ensure fan is on
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	88 e0       	ldi	r24, 0x08	; 8
    13ca:	af d7       	rcall	.+3934   	; 0x232a <__TEXT_REGION_LENGTH__+0x32a>
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	8b e0       	ldi	r24, 0x0B	; 11
    13d0:	d9 d7       	rcall	.+4018   	; 0x2384 <__TEXT_REGION_LENGTH__+0x384>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	8b e0       	ldi	r24, 0x0B	; 11
    13d6:	a9 d7       	rcall	.+3922   	; 0x232a <__TEXT_REGION_LENGTH__+0x32a>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:107
    analogWrite(enable, 255);  // Full speed
    digitalWrite(redPin, HIGH);
    13d8:	61 e0       	ldi	r22, 0x01	; 1
    13da:	80 e1       	ldi	r24, 0x10	; 16
    13dc:	a6 d7       	rcall	.+3916   	; 0x232a <__TEXT_REGION_LENGTH__+0x32a>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:108
    digitalWrite(bluePin, LOW);
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	25 cf       	rjmp	.-438    	; 0x122c <main+0x2d0>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:97
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    13e2:	4a e0       	ldi	r20, 0x0A	; 10
    13e4:	f3 d9       	rcall	.-3098   	; 0x7cc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]>
    13e6:	70 cf       	rjmp	.-288    	; 0x12c8 <main+0x36c>
    13e8:	4a e0       	ldi	r20, 0x0A	; 10
    13ea:	f0 d9       	rcall	.-3104   	; 0x7cc <Print::printNumber(unsigned long, unsigned char) [clone .constprop.24]>
    13ec:	81 cf       	rjmp	.-254    	; 0x12f0 <main+0x394>
getKey():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:145
  }
}

char getKey() {
  for (int c = 0; c < col; c++) {
    digitalWrite(colPins[c], LOW);  // Pull column low
    13ee:	d7 01       	movw	r26, r14
    13f0:	4d 90       	ld	r4, X+
    13f2:	7d 01       	movw	r14, r26
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	84 2d       	mov	r24, r4
    13f8:	98 d7       	rcall	.+3888   	; 0x232a <__TEXT_REGION_LENGTH__+0x32a>
    13fa:	96 e6       	ldi	r25, 0x66	; 102
    13fc:	89 2e       	mov	r8, r25
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	99 2e       	mov	r9, r25
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:146
    for (int r = 0; r < row; r++) {
    1402:	d0 e0       	ldi	r29, 0x00	; 0
    1404:	c0 e0       	ldi	r28, 0x00	; 0
getKey():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:147
      if (!digitalRead(rowPins[r])) {    // Check if row is pulled low
    1406:	f4 01       	movw	r30, r8
    1408:	81 91       	ld	r24, Z+
    140a:	4f 01       	movw	r8, r30
    140c:	66 d7       	rcall	.+3788   	; 0x22da <__TEXT_REGION_LENGTH__+0x2da>
    140e:	89 2b       	or	r24, r25
    1410:	09 f0       	breq	.+2      	; 0x1414 <main+0x4b8>
    1412:	5e c0       	rjmp	.+188    	; 0x14d0 <main+0x574>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:148
        digitalWrite(colPins[c], HIGH);  // Reset column
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	84 2d       	mov	r24, r4
    1418:	88 d7       	rcall	.+3856   	; 0x232a <__TEXT_REGION_LENGTH__+0x32a>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:149
        delay(50);                       // Debounce delay
    141a:	62 e3       	ldi	r22, 0x32	; 50
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	12 d8       	rcall	.-4060   	; 0x448 <delay>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:151
        // Read keymap value from flash
        return pgm_read_byte(&(keymap[r][c])); 
    1424:	fe 01       	movw	r30, r28
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	e0 0f       	add	r30, r16
    1430:	f1 1f       	adc	r31, r17
    1432:	ed 55       	subi	r30, 0x5D	; 93
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	c4 91       	lpm	r28, Z
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:60
    if (face_rec) {
      door_state = true;
    } else {
      // Keypad input for password
      char key = getKey();
      delay(150);  // Debounce
    1438:	66 e9       	ldi	r22, 0x96	; 150
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	03 d8       	rcall	.-4090   	; 0x448 <delay>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:62

      if (key != '\0' && i < 4) {  // Ensure password index does not exceed
    1442:	cc 23       	and	r28, r28
    1444:	b9 f0       	breq	.+46     	; 0x1474 <main+0x518>
    1446:	e0 91 dc 00 	lds	r30, 0x00DC	; 0x8000dc <i>
    144a:	e4 30       	cpi	r30, 0x04	; 4
    144c:	98 f4       	brcc	.+38     	; 0x1474 <main+0x518>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:63
        password[i] = key;
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	e9 52       	subi	r30, 0x29	; 41
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	c0 83       	st	Z, r28
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:64
        Serial.print(F("Key Pressed: "));
    1456:	89 e0       	ldi	r24, 0x09	; 9
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	0d d9       	rcall	.-3558   	; 0x676 <Print::print(__FlashStringHelper const*) [clone .constprop.34]>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    145c:	6c 2f       	mov	r22, r28
    145e:	87 ee       	ldi	r24, 0xE7	; 231
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	be d8       	rcall	.-3716   	; 0x5e0 <HardwareSerial::write(unsigned char)>
write():
    1464:	80 e8       	ldi	r24, 0x80	; 128
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	99 d9       	rcall	.-3278   	; 0x79c <Print::write(char const*) [clone .part.2] [clone .constprop.36]>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:66
        Serial.println(key);
        i++;
    146a:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <i>
    146e:	8f 5f       	subi	r24, 0xFF	; 255
    1470:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <i>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:69
      }

      if (i == 4) {
    1474:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <i>
    1478:	84 30       	cpi	r24, 0x04	; 4
    147a:	09 f0       	breq	.+2      	; 0x147e <main+0x522>
    147c:	3f c0       	rjmp	.+126    	; 0x14fc <main+0x5a0>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:70
        password[4] = '\0';  // Null-terminate the string
    147e:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <password+0x4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:71
        Serial.print(F("Entered Password: "));
    1482:	86 ef       	ldi	r24, 0xF6	; 246
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	f7 d8       	rcall	.-3602   	; 0x676 <Print::print(__FlashStringHelper const*) [clone .constprop.34]>
write():
    1488:	87 ed       	ldi	r24, 0xD7	; 215
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	87 d9       	rcall	.-3314   	; 0x79c <Print::write(char const*) [clone .part.2] [clone .constprop.36]>
    148e:	80 e8       	ldi	r24, 0x80	; 128
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	84 d9       	rcall	.-3320   	; 0x79c <Print::write(char const*) [clone .part.2] [clone .constprop.36]>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:75
        Serial.println(password);

        // Compare entered password with saved password in flash memory
        if (strcmp_P(password, saved_pass) == 0) {  // Use strcmp_P to compare with PROGMEM
    1494:	61 ef       	ldi	r22, 0xF1	; 241
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	87 ed       	ldi	r24, 0xD7	; 215
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	46 d0       	rcall	.+140    	; 0x152a <strcmp_P>
    149e:	89 2b       	or	r24, r25
    14a0:	39 f5       	brne	.+78     	; 0x14f0 <main+0x594>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:76
          password_flag = true;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <password_flag>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:82
        } else {
          password_flag = false;
        }

        // Handle password check result
        if (password_flag) {
    14a8:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <password_flag>
    14ac:	88 23       	and	r24, r24
    14ae:	19 f1       	breq	.+70     	; 0x14f6 <main+0x59a>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:83
          door_state = true;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <door_state>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:84
          Serial.println(F("Password correct. Door opened."));
    14b6:	82 ed       	ldi	r24, 0xD2	; 210
    14b8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:86
        } else {
          Serial.println(F("Password incorrect. Try again."));
    14ba:	7c d9       	rcall	.-3336   	; 0x7b4 <Print::println(__FlashStringHelper const*) [clone .constprop.33]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:89
        }

        memset(password, '\0', sizeof(password));  // Clear password array
    14bc:	e7 ed       	ldi	r30, 0xD7	; 215
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	df 01       	movw	r26, r30
    14c2:	85 2d       	mov	r24, r5
    14c4:	1d 92       	st	X+, r1
    14c6:	8a 95       	dec	r24
    14c8:	e9 f7       	brne	.-6      	; 0x14c4 <main+0x568>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:90
        i = 0;                                     // Reset password input index
    14ca:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <i>
    14ce:	41 cf       	rjmp	.-382    	; 0x1352 <main+0x3f6>
getKey():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:146
}

char getKey() {
  for (int c = 0; c < col; c++) {
    digitalWrite(colPins[c], LOW);  // Pull column low
    for (int r = 0; r < row; r++) {
    14d0:	21 96       	adiw	r28, 0x01	; 1
    14d2:	c4 30       	cpi	r28, 0x04	; 4
    14d4:	d1 05       	cpc	r29, r1
    14d6:	09 f0       	breq	.+2      	; 0x14da <main+0x57e>
    14d8:	96 cf       	rjmp	.-212    	; 0x1406 <main+0x4aa>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:154
        delay(50);                       // Debounce delay
        // Read keymap value from flash
        return pgm_read_byte(&(keymap[r][c])); 
      }
    }
    digitalWrite(colPins[c], HIGH);  // Reset column
    14da:	61 e0       	ldi	r22, 0x01	; 1
    14dc:	84 2d       	mov	r24, r4
    14de:	25 d7       	rcall	.+3658   	; 0x232a <__TEXT_REGION_LENGTH__+0x32a>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:144
    delay(20);
  }
}

char getKey() {
  for (int c = 0; c < col; c++) {
    14e0:	0f 5f       	subi	r16, 0xFF	; 255
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
    14e4:	04 30       	cpi	r16, 0x04	; 4
    14e6:	11 05       	cpc	r17, r1
    14e8:	09 f0       	breq	.+2      	; 0x14ec <main+0x590>
    14ea:	81 cf       	rjmp	.-254    	; 0x13ee <main+0x492>
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:156
        return pgm_read_byte(&(keymap[r][c])); 
      }
    }
    digitalWrite(colPins[c], HIGH);  // Reset column
  }
  return '\0';  // No key pressed
    14ec:	c0 e0       	ldi	r28, 0x00	; 0
    14ee:	a4 cf       	rjmp	.-184    	; 0x1438 <main+0x4dc>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:78

        // Compare entered password with saved password in flash memory
        if (strcmp_P(password, saved_pass) == 0) {  // Use strcmp_P to compare with PROGMEM
          password_flag = true;
        } else {
          password_flag = false;
    14f0:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <password_flag>
    14f4:	d9 cf       	rjmp	.-78     	; 0x14a8 <main+0x54c>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:86
        // Handle password check result
        if (password_flag) {
          door_state = true;
          Serial.println(F("Password correct. Door opened."));
        } else {
          Serial.println(F("Password incorrect. Try again."));
    14f6:	83 eb       	ldi	r24, 0xB3	; 179
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	df cf       	rjmp	.-66     	; 0x14ba <main+0x55e>
pir_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:15
  pinMode(pirPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
}

void pir_sys_activate() {
  if (digitalRead(pirPin)) {
    14fc:	87 e0       	ldi	r24, 0x07	; 7
    14fe:	ed d6       	rcall	.+3546   	; 0x22da <__TEXT_REGION_LENGTH__+0x2da>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:16
    digitalWrite(buzzerPin, HIGH);  // Motion detected
    1500:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:15
  pinMode(pirPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
}

void pir_sys_activate() {
  if (digitalRead(pirPin)) {
    1502:	89 2b       	or	r24, r25
    1504:	09 f4       	brne	.+2      	; 0x1508 <main+0x5ac>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:18
    digitalWrite(buzzerPin, HIGH);  // Motion detected
  } else {
    digitalWrite(buzzerPin, LOW);  // No motion
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	86 e0       	ldi	r24, 0x06	; 6
    150a:	0f d7       	rcall	.+3614   	; 0x232a <__TEXT_REGION_LENGTH__+0x32a>
    150c:	22 cf       	rjmp	.-444    	; 0x1352 <main+0x3f6>

0000150e <_GLOBAL__sub_D__ZN4CingC2Ev>:
_GLOBAL__sub_D__ZN4CingC2Ev():
c:\Users\Lenovo\Documents\Arduino\libraries\Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:120

/*!
  @brief   Deallocate Adafruit_NeoPixel object, set data pin back to INPUT.
*/
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  free(pixels);
    150e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <pixels+0x9>
    1512:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <pixels+0xa>
    1516:	ab d3       	rcall	.+1878   	; 0x1c6e <free>
c:\Users\Lenovo\Documents\Arduino\libraries\Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:121
  if (pin >= 0)
    1518:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <pixels+0x6>
    151c:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <pixels+0x7>
    1520:	97 fd       	sbrc	r25, 7
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <_GLOBAL__sub_D__ZN4CingC2Ev+0x1a>
c:\Users\Lenovo\Documents\Arduino\libraries\Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:122
    pinMode(pin, INPUT);
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	2e c7       	rjmp	.+3676   	; 0x2384 <__TEXT_REGION_LENGTH__+0x384>
c:\Users\Lenovo\Documents\Arduino\libraries\Atmega8_IO\src/Atmega8_IO.cpp:296
			}
	}
void Cing::ShowLed()
	{
		pixels.show();
	}
    1528:	08 95       	ret

0000152a <strcmp_P>:
strcmp_P():
    152a:	fb 01       	movw	r30, r22
    152c:	dc 01       	movw	r26, r24
    152e:	8d 91       	ld	r24, X+
    1530:	05 90       	lpm	r0, Z+
    1532:	80 19       	sub	r24, r0
    1534:	01 10       	cpse	r0, r1
    1536:	d9 f3       	breq	.-10     	; 0x152e <strcmp_P+0x4>
    1538:	99 0b       	sbc	r25, r25
    153a:	08 95       	ret

0000153c <__cmpsf2>:
__cmpsf2():
    153c:	40 d0       	rcall	.+128    	; 0x15be <__fp_cmp>
    153e:	08 f4       	brcc	.+2      	; 0x1542 <__cmpsf2+0x6>
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	08 95       	ret

00001544 <__floatunsisf>:
__floatunsisf():
    1544:	e8 94       	clt
    1546:	09 c0       	rjmp	.+18     	; 0x155a <__floatsisf+0x12>

00001548 <__floatsisf>:
    1548:	97 fb       	bst	r25, 7
    154a:	3e f4       	brtc	.+14     	; 0x155a <__floatsisf+0x12>
    154c:	90 95       	com	r25
    154e:	80 95       	com	r24
    1550:	70 95       	com	r23
    1552:	61 95       	neg	r22
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	8f 4f       	sbci	r24, 0xFF	; 255
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	99 23       	and	r25, r25
    155c:	a9 f0       	breq	.+42     	; 0x1588 <__floatsisf+0x40>
    155e:	f9 2f       	mov	r31, r25
    1560:	96 e9       	ldi	r25, 0x96	; 150
    1562:	bb 27       	eor	r27, r27
    1564:	93 95       	inc	r25
    1566:	f6 95       	lsr	r31
    1568:	87 95       	ror	r24
    156a:	77 95       	ror	r23
    156c:	67 95       	ror	r22
    156e:	b7 95       	ror	r27
    1570:	f1 11       	cpse	r31, r1
    1572:	f8 cf       	rjmp	.-16     	; 0x1564 <__floatsisf+0x1c>
    1574:	fa f4       	brpl	.+62     	; 0x15b4 <__floatsisf+0x6c>
    1576:	bb 0f       	add	r27, r27
    1578:	11 f4       	brne	.+4      	; 0x157e <__floatsisf+0x36>
    157a:	60 ff       	sbrs	r22, 0
    157c:	1b c0       	rjmp	.+54     	; 0x15b4 <__floatsisf+0x6c>
    157e:	6f 5f       	subi	r22, 0xFF	; 255
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	8f 4f       	sbci	r24, 0xFF	; 255
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	16 c0       	rjmp	.+44     	; 0x15b4 <__floatsisf+0x6c>
    1588:	88 23       	and	r24, r24
    158a:	11 f0       	breq	.+4      	; 0x1590 <__floatsisf+0x48>
    158c:	96 e9       	ldi	r25, 0x96	; 150
    158e:	11 c0       	rjmp	.+34     	; 0x15b2 <__floatsisf+0x6a>
    1590:	77 23       	and	r23, r23
    1592:	21 f0       	breq	.+8      	; 0x159c <__floatsisf+0x54>
    1594:	9e e8       	ldi	r25, 0x8E	; 142
    1596:	87 2f       	mov	r24, r23
    1598:	76 2f       	mov	r23, r22
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <__floatsisf+0x5e>
    159c:	66 23       	and	r22, r22
    159e:	71 f0       	breq	.+28     	; 0x15bc <__floatsisf+0x74>
    15a0:	96 e8       	ldi	r25, 0x86	; 134
    15a2:	86 2f       	mov	r24, r22
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	2a f0       	brmi	.+10     	; 0x15b4 <__floatsisf+0x6c>
    15aa:	9a 95       	dec	r25
    15ac:	66 0f       	add	r22, r22
    15ae:	77 1f       	adc	r23, r23
    15b0:	88 1f       	adc	r24, r24
    15b2:	da f7       	brpl	.-10     	; 0x15aa <__floatsisf+0x62>
    15b4:	88 0f       	add	r24, r24
    15b6:	96 95       	lsr	r25
    15b8:	87 95       	ror	r24
    15ba:	97 f9       	bld	r25, 7
    15bc:	08 95       	ret

000015be <__fp_cmp>:
__fp_cmp():
    15be:	99 0f       	add	r25, r25
    15c0:	00 08       	sbc	r0, r0
    15c2:	55 0f       	add	r21, r21
    15c4:	aa 0b       	sbc	r26, r26
    15c6:	e0 e8       	ldi	r30, 0x80	; 128
    15c8:	fe ef       	ldi	r31, 0xFE	; 254
    15ca:	16 16       	cp	r1, r22
    15cc:	17 06       	cpc	r1, r23
    15ce:	e8 07       	cpc	r30, r24
    15d0:	f9 07       	cpc	r31, r25
    15d2:	c0 f0       	brcs	.+48     	; 0x1604 <__fp_cmp+0x46>
    15d4:	12 16       	cp	r1, r18
    15d6:	13 06       	cpc	r1, r19
    15d8:	e4 07       	cpc	r30, r20
    15da:	f5 07       	cpc	r31, r21
    15dc:	98 f0       	brcs	.+38     	; 0x1604 <__fp_cmp+0x46>
    15de:	62 1b       	sub	r22, r18
    15e0:	73 0b       	sbc	r23, r19
    15e2:	84 0b       	sbc	r24, r20
    15e4:	95 0b       	sbc	r25, r21
    15e6:	39 f4       	brne	.+14     	; 0x15f6 <__fp_cmp+0x38>
    15e8:	0a 26       	eor	r0, r26
    15ea:	61 f0       	breq	.+24     	; 0x1604 <__fp_cmp+0x46>
    15ec:	23 2b       	or	r18, r19
    15ee:	24 2b       	or	r18, r20
    15f0:	25 2b       	or	r18, r21
    15f2:	21 f4       	brne	.+8      	; 0x15fc <__fp_cmp+0x3e>
    15f4:	08 95       	ret
    15f6:	0a 26       	eor	r0, r26
    15f8:	09 f4       	brne	.+2      	; 0x15fc <__fp_cmp+0x3e>
    15fa:	a1 40       	sbci	r26, 0x01	; 1
    15fc:	a6 95       	lsr	r26
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	81 1d       	adc	r24, r1
    1602:	81 1d       	adc	r24, r1
    1604:	08 95       	ret
    1606:	69 d0       	rcall	.+210    	; 0x16da <__fp_pscA>
    1608:	28 f0       	brcs	.+10     	; 0x1614 <__fp_cmp+0x56>
    160a:	6e d0       	rcall	.+220    	; 0x16e8 <__fp_pscB>
    160c:	18 f0       	brcs	.+6      	; 0x1614 <__fp_cmp+0x56>
    160e:	95 23       	and	r25, r21
    1610:	09 f0       	breq	.+2      	; 0x1614 <__fp_cmp+0x56>
    1612:	5a c0       	rjmp	.+180    	; 0x16c8 <__fp_inf>
    1614:	5f c0       	rjmp	.+190    	; 0x16d4 <__fp_nan>
    1616:	11 24       	eor	r1, r1
    1618:	a2 c0       	rjmp	.+324    	; 0x175e <__fp_szero>

0000161a <__mulsf3x>:
__mulsf3x():
    161a:	7e d0       	rcall	.+252    	; 0x1718 <__fp_split3>
    161c:	a0 f3       	brcs	.-24     	; 0x1606 <__fp_cmp+0x48>

0000161e <__mulsf3_pse>:
    161e:	95 9f       	mul	r25, r21
    1620:	d1 f3       	breq	.-12     	; 0x1616 <__fp_cmp+0x58>
    1622:	95 0f       	add	r25, r21
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	55 1f       	adc	r21, r21
    1628:	62 9f       	mul	r22, r18
    162a:	f0 01       	movw	r30, r0
    162c:	72 9f       	mul	r23, r18
    162e:	bb 27       	eor	r27, r27
    1630:	f0 0d       	add	r31, r0
    1632:	b1 1d       	adc	r27, r1
    1634:	63 9f       	mul	r22, r19
    1636:	aa 27       	eor	r26, r26
    1638:	f0 0d       	add	r31, r0
    163a:	b1 1d       	adc	r27, r1
    163c:	aa 1f       	adc	r26, r26
    163e:	64 9f       	mul	r22, r20
    1640:	66 27       	eor	r22, r22
    1642:	b0 0d       	add	r27, r0
    1644:	a1 1d       	adc	r26, r1
    1646:	66 1f       	adc	r22, r22
    1648:	82 9f       	mul	r24, r18
    164a:	22 27       	eor	r18, r18
    164c:	b0 0d       	add	r27, r0
    164e:	a1 1d       	adc	r26, r1
    1650:	62 1f       	adc	r22, r18
    1652:	73 9f       	mul	r23, r19
    1654:	b0 0d       	add	r27, r0
    1656:	a1 1d       	adc	r26, r1
    1658:	62 1f       	adc	r22, r18
    165a:	83 9f       	mul	r24, r19
    165c:	a0 0d       	add	r26, r0
    165e:	61 1d       	adc	r22, r1
    1660:	22 1f       	adc	r18, r18
    1662:	74 9f       	mul	r23, r20
    1664:	33 27       	eor	r19, r19
    1666:	a0 0d       	add	r26, r0
    1668:	61 1d       	adc	r22, r1
    166a:	23 1f       	adc	r18, r19
    166c:	84 9f       	mul	r24, r20
    166e:	60 0d       	add	r22, r0
    1670:	21 1d       	adc	r18, r1
    1672:	82 2f       	mov	r24, r18
    1674:	76 2f       	mov	r23, r22
    1676:	6a 2f       	mov	r22, r26
    1678:	11 24       	eor	r1, r1
    167a:	9f 57       	subi	r25, 0x7F	; 127
    167c:	50 40       	sbci	r21, 0x00	; 0
    167e:	8a f0       	brmi	.+34     	; 0x16a2 <__mulsf3_pse+0x84>
    1680:	e1 f0       	breq	.+56     	; 0x16ba <__mulsf3_pse+0x9c>
    1682:	88 23       	and	r24, r24
    1684:	4a f0       	brmi	.+18     	; 0x1698 <__mulsf3_pse+0x7a>
    1686:	ee 0f       	add	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	bb 1f       	adc	r27, r27
    168c:	66 1f       	adc	r22, r22
    168e:	77 1f       	adc	r23, r23
    1690:	88 1f       	adc	r24, r24
    1692:	91 50       	subi	r25, 0x01	; 1
    1694:	50 40       	sbci	r21, 0x00	; 0
    1696:	a9 f7       	brne	.-22     	; 0x1682 <__mulsf3_pse+0x64>
    1698:	9e 3f       	cpi	r25, 0xFE	; 254
    169a:	51 05       	cpc	r21, r1
    169c:	70 f0       	brcs	.+28     	; 0x16ba <__mulsf3_pse+0x9c>
    169e:	14 c0       	rjmp	.+40     	; 0x16c8 <__fp_inf>
    16a0:	5e c0       	rjmp	.+188    	; 0x175e <__fp_szero>
    16a2:	5f 3f       	cpi	r21, 0xFF	; 255
    16a4:	ec f3       	brlt	.-6      	; 0x16a0 <__mulsf3_pse+0x82>
    16a6:	98 3e       	cpi	r25, 0xE8	; 232
    16a8:	dc f3       	brlt	.-10     	; 0x16a0 <__mulsf3_pse+0x82>
    16aa:	86 95       	lsr	r24
    16ac:	77 95       	ror	r23
    16ae:	67 95       	ror	r22
    16b0:	b7 95       	ror	r27
    16b2:	f7 95       	ror	r31
    16b4:	e7 95       	ror	r30
    16b6:	9f 5f       	subi	r25, 0xFF	; 255
    16b8:	c1 f7       	brne	.-16     	; 0x16aa <__mulsf3_pse+0x8c>
    16ba:	fe 2b       	or	r31, r30
    16bc:	88 0f       	add	r24, r24
    16be:	91 1d       	adc	r25, r1
    16c0:	96 95       	lsr	r25
    16c2:	87 95       	ror	r24
    16c4:	97 f9       	bld	r25, 7
    16c6:	08 95       	ret

000016c8 <__fp_inf>:
    16c8:	97 f9       	bld	r25, 7
    16ca:	9f 67       	ori	r25, 0x7F	; 127
    16cc:	80 e8       	ldi	r24, 0x80	; 128
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	08 95       	ret

000016d4 <__fp_nan>:
    16d4:	9f ef       	ldi	r25, 0xFF	; 255
    16d6:	80 ec       	ldi	r24, 0xC0	; 192
    16d8:	08 95       	ret

000016da <__fp_pscA>:
    16da:	00 24       	eor	r0, r0
__fp_pscA():
    16dc:	0a 94       	dec	r0
    16de:	16 16       	cp	r1, r22
    16e0:	17 06       	cpc	r1, r23
    16e2:	18 06       	cpc	r1, r24
    16e4:	09 06       	cpc	r0, r25
    16e6:	08 95       	ret

000016e8 <__fp_pscB>:
__fp_pscB():
    16e8:	00 24       	eor	r0, r0
    16ea:	0a 94       	dec	r0
    16ec:	12 16       	cp	r1, r18
    16ee:	13 06       	cpc	r1, r19
    16f0:	14 06       	cpc	r1, r20
    16f2:	05 06       	cpc	r0, r21
    16f4:	08 95       	ret

000016f6 <__fp_round>:
__fp_round():
    16f6:	09 2e       	mov	r0, r25
    16f8:	03 94       	inc	r0
    16fa:	00 0c       	add	r0, r0
    16fc:	11 f4       	brne	.+4      	; 0x1702 <__fp_round+0xc>
    16fe:	88 23       	and	r24, r24
    1700:	52 f0       	brmi	.+20     	; 0x1716 <__fp_round+0x20>
    1702:	bb 0f       	add	r27, r27
    1704:	40 f4       	brcc	.+16     	; 0x1716 <__fp_round+0x20>
    1706:	bf 2b       	or	r27, r31
    1708:	11 f4       	brne	.+4      	; 0x170e <__fp_round+0x18>
    170a:	60 ff       	sbrs	r22, 0
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <__fp_round+0x20>
    170e:	6f 5f       	subi	r22, 0xFF	; 255
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	8f 4f       	sbci	r24, 0xFF	; 255
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	08 95       	ret

00001718 <__fp_split3>:
__fp_split3():
    1718:	57 fd       	sbrc	r21, 7
    171a:	90 58       	subi	r25, 0x80	; 128
    171c:	44 0f       	add	r20, r20
    171e:	55 1f       	adc	r21, r21
    1720:	59 f0       	breq	.+22     	; 0x1738 <__fp_splitA+0x10>
    1722:	5f 3f       	cpi	r21, 0xFF	; 255
    1724:	71 f0       	breq	.+28     	; 0x1742 <__fp_splitA+0x1a>
    1726:	47 95       	ror	r20

00001728 <__fp_splitA>:
    1728:	88 0f       	add	r24, r24
    172a:	97 fb       	bst	r25, 7
    172c:	99 1f       	adc	r25, r25
    172e:	61 f0       	breq	.+24     	; 0x1748 <__fp_splitA+0x20>
    1730:	9f 3f       	cpi	r25, 0xFF	; 255
    1732:	79 f0       	breq	.+30     	; 0x1752 <__fp_splitA+0x2a>
    1734:	87 95       	ror	r24
    1736:	08 95       	ret
    1738:	12 16       	cp	r1, r18
    173a:	13 06       	cpc	r1, r19
    173c:	14 06       	cpc	r1, r20
    173e:	55 1f       	adc	r21, r21
    1740:	f2 cf       	rjmp	.-28     	; 0x1726 <__fp_split3+0xe>
    1742:	46 95       	lsr	r20
    1744:	f1 df       	rcall	.-30     	; 0x1728 <__fp_splitA>
    1746:	08 c0       	rjmp	.+16     	; 0x1758 <__fp_splitA+0x30>
    1748:	16 16       	cp	r1, r22
    174a:	17 06       	cpc	r1, r23
    174c:	18 06       	cpc	r1, r24
    174e:	99 1f       	adc	r25, r25
    1750:	f1 cf       	rjmp	.-30     	; 0x1734 <__fp_splitA+0xc>
    1752:	86 95       	lsr	r24
    1754:	71 05       	cpc	r23, r1
    1756:	61 05       	cpc	r22, r1
    1758:	08 94       	sec
    175a:	08 95       	ret

0000175c <__fp_zero>:
__fp_zero():
    175c:	e8 94       	clt

0000175e <__fp_szero>:
    175e:	bb 27       	eor	r27, r27
    1760:	66 27       	eor	r22, r22
    1762:	77 27       	eor	r23, r23
    1764:	cb 01       	movw	r24, r22
    1766:	97 f9       	bld	r25, 7
    1768:	08 95       	ret

0000176a <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    176a:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    176c:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    176e:	16 f4       	brtc	.+4      	; 0x1774 <__divmodsi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    1770:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    1772:	0f d0       	rcall	.+30     	; 0x1792 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    1774:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    1776:	05 d0       	rcall	.+10     	; 0x1782 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    1778:	24 d0       	rcall	.+72     	; 0x17c2 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    177a:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    177c:	02 d0       	rcall	.+4      	; 0x1782 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    177e:	46 f4       	brtc	.+16     	; 0x1790 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    1780:	08 c0       	rjmp	.+16     	; 0x1792 <__negsi2>

00001782 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    1782:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    1784:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    1786:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    1788:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    178c:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    178e:	5f 4f       	sbci	r21, 0xFF	; 255

00001790 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    1790:	08 95       	ret

00001792 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    1792:	90 95       	com	r25
    1794:	80 95       	com	r24
    1796:	70 95       	com	r23
    1798:	61 95       	neg	r22
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	8f 4f       	sbci	r24, 0xFF	; 255
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    17a0:	08 95       	ret

000017a2 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    17a2:	31 d0       	rcall	.+98     	; 0x1806 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    17a4:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    17a6:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    17a8:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    17aa:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    17ac:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    17ae:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    17b0:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    17b2:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    17b4:	08 95       	ret

000017b6 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    17b6:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    17b8:	f4 cf       	rjmp	.-24     	; 0x17a2 <__muluhisi3>

000017ba <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    17ba:	f3 df       	rcall	.-26     	; 0x17a2 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    17bc:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    17be:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    17c0:	08 95       	ret

000017c2 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    17c2:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    17c4:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    17c6:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    17c8:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    17ca:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    17cc:	0d c0       	rjmp	.+26     	; 0x17e8 <__udivmodsi4_ep>

000017ce <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    17ce:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    17d0:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    17d2:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    17d4:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    17d6:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    17d8:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    17da:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    17dc:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    17de:	20 f0       	brcs	.+8      	; 0x17e8 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    17e0:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    17e2:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    17e4:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    17e6:	f5 0b       	sbc	r31, r21

000017e8 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    17e8:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    17ea:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    17ec:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    17ee:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    17f0:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    17f2:	69 f7       	brne	.-38     	; 0x17ce <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    17f4:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    17f6:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    17f8:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    17fa:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    17fc:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    17fe:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1800:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1802:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1804:	08 95       	ret

00001806 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1806:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1808:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    180a:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    180c:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    180e:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:578
    1810:	01 d0       	rcall	.+2      	; 0x1814 <__umulhisi3+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1812:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1814:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1816:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1818:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    181a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    181c:	08 95       	ret

0000181e <__subsf3>:
__subsf3():
    181e:	50 58       	subi	r21, 0x80	; 128

00001820 <__addsf3>:
    1820:	bb 27       	eor	r27, r27
    1822:	aa 27       	eor	r26, r26
    1824:	0e d0       	rcall	.+28     	; 0x1842 <__addsf3x>
    1826:	67 cf       	rjmp	.-306    	; 0x16f6 <__fp_round>
__addsf3():
    1828:	58 df       	rcall	.-336    	; 0x16da <__fp_pscA>
    182a:	30 f0       	brcs	.+12     	; 0x1838 <__addsf3+0x18>
    182c:	5d df       	rcall	.-326    	; 0x16e8 <__fp_pscB>
    182e:	20 f0       	brcs	.+8      	; 0x1838 <__addsf3+0x18>
    1830:	31 f4       	brne	.+12     	; 0x183e <__addsf3+0x1e>
    1832:	9f 3f       	cpi	r25, 0xFF	; 255
    1834:	11 f4       	brne	.+4      	; 0x183a <__addsf3+0x1a>
    1836:	1e f4       	brtc	.+6      	; 0x183e <__addsf3+0x1e>
    1838:	4d cf       	rjmp	.-358    	; 0x16d4 <__fp_nan>
    183a:	0e f4       	brtc	.+2      	; 0x183e <__addsf3+0x1e>
    183c:	e0 95       	com	r30
    183e:	e7 fb       	bst	r30, 7
    1840:	43 cf       	rjmp	.-378    	; 0x16c8 <__fp_inf>

00001842 <__addsf3x>:
__addsf3x():
    1842:	e9 2f       	mov	r30, r25
    1844:	69 df       	rcall	.-302    	; 0x1718 <__fp_split3>
    1846:	80 f3       	brcs	.-32     	; 0x1828 <__addsf3+0x8>
    1848:	ba 17       	cp	r27, r26
    184a:	62 07       	cpc	r22, r18
    184c:	73 07       	cpc	r23, r19
    184e:	84 07       	cpc	r24, r20
    1850:	95 07       	cpc	r25, r21
    1852:	18 f0       	brcs	.+6      	; 0x185a <__addsf3x+0x18>
    1854:	71 f4       	brne	.+28     	; 0x1872 <__addsf3x+0x30>
    1856:	9e f5       	brtc	.+102    	; 0x18be <__addsf3x+0x7c>
    1858:	81 cf       	rjmp	.-254    	; 0x175c <__fp_zero>
    185a:	0e f4       	brtc	.+2      	; 0x185e <__addsf3x+0x1c>
    185c:	e0 95       	com	r30
    185e:	0b 2e       	mov	r0, r27
    1860:	ba 2f       	mov	r27, r26
    1862:	a0 2d       	mov	r26, r0
    1864:	0b 01       	movw	r0, r22
    1866:	b9 01       	movw	r22, r18
    1868:	90 01       	movw	r18, r0
    186a:	0c 01       	movw	r0, r24
    186c:	ca 01       	movw	r24, r20
    186e:	a0 01       	movw	r20, r0
    1870:	11 24       	eor	r1, r1
    1872:	ff 27       	eor	r31, r31
    1874:	59 1b       	sub	r21, r25
    1876:	99 f0       	breq	.+38     	; 0x189e <__addsf3x+0x5c>
    1878:	59 3f       	cpi	r21, 0xF9	; 249
    187a:	50 f4       	brcc	.+20     	; 0x1890 <__addsf3x+0x4e>
    187c:	50 3e       	cpi	r21, 0xE0	; 224
    187e:	68 f1       	brcs	.+90     	; 0x18da <__addsf3x+0x98>
    1880:	1a 16       	cp	r1, r26
    1882:	f0 40       	sbci	r31, 0x00	; 0
    1884:	a2 2f       	mov	r26, r18
    1886:	23 2f       	mov	r18, r19
    1888:	34 2f       	mov	r19, r20
    188a:	44 27       	eor	r20, r20
    188c:	58 5f       	subi	r21, 0xF8	; 248
    188e:	f3 cf       	rjmp	.-26     	; 0x1876 <__addsf3x+0x34>
    1890:	46 95       	lsr	r20
    1892:	37 95       	ror	r19
    1894:	27 95       	ror	r18
    1896:	a7 95       	ror	r26
    1898:	f0 40       	sbci	r31, 0x00	; 0
    189a:	53 95       	inc	r21
    189c:	c9 f7       	brne	.-14     	; 0x1890 <__addsf3x+0x4e>
    189e:	7e f4       	brtc	.+30     	; 0x18be <__addsf3x+0x7c>
    18a0:	1f 16       	cp	r1, r31
    18a2:	ba 0b       	sbc	r27, r26
    18a4:	62 0b       	sbc	r22, r18
    18a6:	73 0b       	sbc	r23, r19
    18a8:	84 0b       	sbc	r24, r20
    18aa:	ba f0       	brmi	.+46     	; 0x18da <__addsf3x+0x98>
    18ac:	91 50       	subi	r25, 0x01	; 1
    18ae:	a1 f0       	breq	.+40     	; 0x18d8 <__addsf3x+0x96>
    18b0:	ff 0f       	add	r31, r31
    18b2:	bb 1f       	adc	r27, r27
    18b4:	66 1f       	adc	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	88 1f       	adc	r24, r24
    18ba:	c2 f7       	brpl	.-16     	; 0x18ac <__addsf3x+0x6a>
    18bc:	0e c0       	rjmp	.+28     	; 0x18da <__addsf3x+0x98>
    18be:	ba 0f       	add	r27, r26
    18c0:	62 1f       	adc	r22, r18
    18c2:	73 1f       	adc	r23, r19
    18c4:	84 1f       	adc	r24, r20
    18c6:	48 f4       	brcc	.+18     	; 0x18da <__addsf3x+0x98>
    18c8:	87 95       	ror	r24
    18ca:	77 95       	ror	r23
    18cc:	67 95       	ror	r22
    18ce:	b7 95       	ror	r27
    18d0:	f7 95       	ror	r31
    18d2:	9e 3f       	cpi	r25, 0xFE	; 254
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <__addsf3x+0x96>
    18d6:	b3 cf       	rjmp	.-154    	; 0x183e <__addsf3+0x1e>
    18d8:	93 95       	inc	r25
    18da:	88 0f       	add	r24, r24
    18dc:	08 f0       	brcs	.+2      	; 0x18e0 <__addsf3x+0x9e>
    18de:	99 27       	eor	r25, r25
    18e0:	ee 0f       	add	r30, r30
    18e2:	97 95       	ror	r25
    18e4:	87 95       	ror	r24
    18e6:	08 95       	ret

000018e8 <__divsf3>:
    18e8:	0c d0       	rcall	.+24     	; 0x1902 <__divsf3x>
    18ea:	05 cf       	rjmp	.-502    	; 0x16f6 <__fp_round>
    18ec:	fd de       	rcall	.-518    	; 0x16e8 <__fp_pscB>
    18ee:	40 f0       	brcs	.+16     	; 0x1900 <__divsf3+0x18>
    18f0:	f4 de       	rcall	.-536    	; 0x16da <__fp_pscA>
    18f2:	30 f0       	brcs	.+12     	; 0x1900 <__divsf3+0x18>
    18f4:	21 f4       	brne	.+8      	; 0x18fe <__divsf3+0x16>
    18f6:	5f 3f       	cpi	r21, 0xFF	; 255
    18f8:	19 f0       	breq	.+6      	; 0x1900 <__divsf3+0x18>
    18fa:	e6 ce       	rjmp	.-564    	; 0x16c8 <__fp_inf>
    18fc:	51 11       	cpse	r21, r1
    18fe:	2f cf       	rjmp	.-418    	; 0x175e <__fp_szero>
    1900:	e9 ce       	rjmp	.-558    	; 0x16d4 <__fp_nan>

00001902 <__divsf3x>:
__divsf3x():
    1902:	0a df       	rcall	.-492    	; 0x1718 <__fp_split3>
    1904:	98 f3       	brcs	.-26     	; 0x18ec <__divsf3+0x4>

00001906 <__divsf3_pse>:
    1906:	99 23       	and	r25, r25
    1908:	c9 f3       	breq	.-14     	; 0x18fc <__divsf3+0x14>
    190a:	55 23       	and	r21, r21
    190c:	b1 f3       	breq	.-20     	; 0x18fa <__divsf3+0x12>
    190e:	95 1b       	sub	r25, r21
    1910:	55 0b       	sbc	r21, r21
    1912:	bb 27       	eor	r27, r27
    1914:	aa 27       	eor	r26, r26
    1916:	62 17       	cp	r22, r18
    1918:	73 07       	cpc	r23, r19
    191a:	84 07       	cpc	r24, r20
    191c:	38 f0       	brcs	.+14     	; 0x192c <__divsf3_pse+0x26>
    191e:	9f 5f       	subi	r25, 0xFF	; 255
    1920:	5f 4f       	sbci	r21, 0xFF	; 255
    1922:	22 0f       	add	r18, r18
    1924:	33 1f       	adc	r19, r19
    1926:	44 1f       	adc	r20, r20
    1928:	aa 1f       	adc	r26, r26
    192a:	a9 f3       	breq	.-22     	; 0x1916 <__divsf3_pse+0x10>
    192c:	33 d0       	rcall	.+102    	; 0x1994 <__divsf3_pse+0x8e>
    192e:	0e 2e       	mov	r0, r30
    1930:	3a f0       	brmi	.+14     	; 0x1940 <__divsf3_pse+0x3a>
    1932:	e0 e8       	ldi	r30, 0x80	; 128
    1934:	30 d0       	rcall	.+96     	; 0x1996 <__divsf3_pse+0x90>
    1936:	91 50       	subi	r25, 0x01	; 1
    1938:	50 40       	sbci	r21, 0x00	; 0
    193a:	e6 95       	lsr	r30
    193c:	00 1c       	adc	r0, r0
    193e:	ca f7       	brpl	.-14     	; 0x1932 <__divsf3_pse+0x2c>
    1940:	29 d0       	rcall	.+82     	; 0x1994 <__divsf3_pse+0x8e>
    1942:	fe 2f       	mov	r31, r30
    1944:	27 d0       	rcall	.+78     	; 0x1994 <__divsf3_pse+0x8e>
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	88 1f       	adc	r24, r24
    194c:	bb 1f       	adc	r27, r27
    194e:	26 17       	cp	r18, r22
    1950:	37 07       	cpc	r19, r23
    1952:	48 07       	cpc	r20, r24
    1954:	ab 07       	cpc	r26, r27
    1956:	b0 e8       	ldi	r27, 0x80	; 128
    1958:	09 f0       	breq	.+2      	; 0x195c <__divsf3_pse+0x56>
    195a:	bb 0b       	sbc	r27, r27
    195c:	80 2d       	mov	r24, r0
    195e:	bf 01       	movw	r22, r30
    1960:	ff 27       	eor	r31, r31
    1962:	93 58       	subi	r25, 0x83	; 131
    1964:	5f 4f       	sbci	r21, 0xFF	; 255
    1966:	2a f0       	brmi	.+10     	; 0x1972 <__divsf3_pse+0x6c>
    1968:	9e 3f       	cpi	r25, 0xFE	; 254
    196a:	51 05       	cpc	r21, r1
    196c:	68 f0       	brcs	.+26     	; 0x1988 <__divsf3_pse+0x82>
    196e:	ac ce       	rjmp	.-680    	; 0x16c8 <__fp_inf>
    1970:	f6 ce       	rjmp	.-532    	; 0x175e <__fp_szero>
    1972:	5f 3f       	cpi	r21, 0xFF	; 255
    1974:	ec f3       	brlt	.-6      	; 0x1970 <__divsf3_pse+0x6a>
    1976:	98 3e       	cpi	r25, 0xE8	; 232
    1978:	dc f3       	brlt	.-10     	; 0x1970 <__divsf3_pse+0x6a>
    197a:	86 95       	lsr	r24
    197c:	77 95       	ror	r23
    197e:	67 95       	ror	r22
    1980:	b7 95       	ror	r27
    1982:	f7 95       	ror	r31
    1984:	9f 5f       	subi	r25, 0xFF	; 255
    1986:	c9 f7       	brne	.-14     	; 0x197a <__divsf3_pse+0x74>
    1988:	88 0f       	add	r24, r24
    198a:	91 1d       	adc	r25, r1
    198c:	96 95       	lsr	r25
    198e:	87 95       	ror	r24
    1990:	97 f9       	bld	r25, 7
    1992:	08 95       	ret
    1994:	e1 e0       	ldi	r30, 0x01	; 1
    1996:	66 0f       	add	r22, r22
    1998:	77 1f       	adc	r23, r23
    199a:	88 1f       	adc	r24, r24
    199c:	bb 1f       	adc	r27, r27
    199e:	62 17       	cp	r22, r18
    19a0:	73 07       	cpc	r23, r19
    19a2:	84 07       	cpc	r24, r20
    19a4:	ba 07       	cpc	r27, r26
    19a6:	20 f0       	brcs	.+8      	; 0x19b0 <__divsf3_pse+0xaa>
    19a8:	62 1b       	sub	r22, r18
    19aa:	73 0b       	sbc	r23, r19
    19ac:	84 0b       	sbc	r24, r20
    19ae:	ba 0b       	sbc	r27, r26
    19b0:	ee 1f       	adc	r30, r30
    19b2:	88 f7       	brcc	.-30     	; 0x1996 <__divsf3_pse+0x90>
    19b4:	e0 95       	com	r30
    19b6:	08 95       	ret

000019b8 <__fixsfsi>:
    19b8:	04 d0       	rcall	.+8      	; 0x19c2 <__fixunssfsi>
    19ba:	68 94       	set
    19bc:	b1 11       	cpse	r27, r1
    19be:	cf ce       	rjmp	.-610    	; 0x175e <__fp_szero>
    19c0:	08 95       	ret

000019c2 <__fixunssfsi>:
    19c2:	b2 de       	rcall	.-668    	; 0x1728 <__fp_splitA>
    19c4:	88 f0       	brcs	.+34     	; 0x19e8 <__fixunssfsi+0x26>
    19c6:	9f 57       	subi	r25, 0x7F	; 127
    19c8:	90 f0       	brcs	.+36     	; 0x19ee <__fixunssfsi+0x2c>
    19ca:	b9 2f       	mov	r27, r25
    19cc:	99 27       	eor	r25, r25
__fixunssfsi():
    19ce:	b7 51       	subi	r27, 0x17	; 23
    19d0:	a0 f0       	brcs	.+40     	; 0x19fa <__fixunssfsi+0x38>
    19d2:	d1 f0       	breq	.+52     	; 0x1a08 <__fixunssfsi+0x46>
    19d4:	66 0f       	add	r22, r22
    19d6:	77 1f       	adc	r23, r23
    19d8:	88 1f       	adc	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	1a f0       	brmi	.+6      	; 0x19e4 <__fixunssfsi+0x22>
    19de:	ba 95       	dec	r27
    19e0:	c9 f7       	brne	.-14     	; 0x19d4 <__fixunssfsi+0x12>
    19e2:	12 c0       	rjmp	.+36     	; 0x1a08 <__fixunssfsi+0x46>
    19e4:	b1 30       	cpi	r27, 0x01	; 1
    19e6:	81 f0       	breq	.+32     	; 0x1a08 <__fixunssfsi+0x46>
    19e8:	b9 de       	rcall	.-654    	; 0x175c <__fp_zero>
    19ea:	b1 e0       	ldi	r27, 0x01	; 1
    19ec:	08 95       	ret
    19ee:	b6 ce       	rjmp	.-660    	; 0x175c <__fp_zero>
    19f0:	67 2f       	mov	r22, r23
    19f2:	78 2f       	mov	r23, r24
    19f4:	88 27       	eor	r24, r24
    19f6:	b8 5f       	subi	r27, 0xF8	; 248
    19f8:	39 f0       	breq	.+14     	; 0x1a08 <__fixunssfsi+0x46>
    19fa:	b9 3f       	cpi	r27, 0xF9	; 249
    19fc:	cc f3       	brlt	.-14     	; 0x19f0 <__fixunssfsi+0x2e>
    19fe:	86 95       	lsr	r24
    1a00:	77 95       	ror	r23
    1a02:	67 95       	ror	r22
    1a04:	b3 95       	inc	r27
    1a06:	d9 f7       	brne	.-10     	; 0x19fe <__fixunssfsi+0x3c>
    1a08:	3e f4       	brtc	.+14     	; 0x1a18 <__fixunssfsi+0x56>
    1a0a:	90 95       	com	r25
    1a0c:	80 95       	com	r24
    1a0e:	70 95       	com	r23
    1a10:	61 95       	neg	r22
    1a12:	7f 4f       	sbci	r23, 0xFF	; 255
    1a14:	8f 4f       	sbci	r24, 0xFF	; 255
    1a16:	9f 4f       	sbci	r25, 0xFF	; 255
    1a18:	08 95       	ret

00001a1a <__gesf2>:
__gesf2():
    1a1a:	d1 dd       	rcall	.-1118   	; 0x15be <__fp_cmp>
    1a1c:	08 f4       	brcc	.+2      	; 0x1a20 <__gesf2+0x6>
    1a1e:	8f ef       	ldi	r24, 0xFF	; 255
    1a20:	08 95       	ret
    1a22:	0e f0       	brts	.+2      	; 0x1a26 <__gesf2+0xc>
    1a24:	43 c0       	rjmp	.+134    	; 0x1aac <__fp_mpack>
    1a26:	56 ce       	rjmp	.-852    	; 0x16d4 <__fp_nan>
    1a28:	68 94       	set
    1a2a:	4e ce       	rjmp	.-868    	; 0x16c8 <__fp_inf>

00001a2c <log>:
log():
    1a2c:	7d de       	rcall	.-774    	; 0x1728 <__fp_splitA>
    1a2e:	c8 f3       	brcs	.-14     	; 0x1a22 <__gesf2+0x8>
    1a30:	99 23       	and	r25, r25
    1a32:	d1 f3       	breq	.-12     	; 0x1a28 <__gesf2+0xe>
    1a34:	c6 f3       	brts	.-16     	; 0x1a26 <__gesf2+0xc>
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	1f 93       	push	r17
    1a3c:	0f 93       	push	r16
    1a3e:	ff 92       	push	r15
    1a40:	c9 2f       	mov	r28, r25
    1a42:	dd 27       	eor	r29, r29
    1a44:	88 23       	and	r24, r24
    1a46:	2a f0       	brmi	.+10     	; 0x1a52 <log+0x26>
    1a48:	21 97       	sbiw	r28, 0x01	; 1
    1a4a:	66 0f       	add	r22, r22
    1a4c:	77 1f       	adc	r23, r23
    1a4e:	88 1f       	adc	r24, r24
    1a50:	da f7       	brpl	.-10     	; 0x1a48 <log+0x1c>
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f eb       	ldi	r21, 0xBF	; 191
    1a5a:	9f e3       	ldi	r25, 0x3F	; 63
    1a5c:	88 39       	cpi	r24, 0x98	; 152
    1a5e:	20 f0       	brcs	.+8      	; 0x1a68 <log+0x3c>
    1a60:	80 3e       	cpi	r24, 0xE0	; 224
    1a62:	30 f0       	brcs	.+12     	; 0x1a70 <log+0x44>
    1a64:	21 96       	adiw	r28, 0x01	; 1
    1a66:	8f 77       	andi	r24, 0x7F	; 127
    1a68:	db de       	rcall	.-586    	; 0x1820 <__addsf3>
    1a6a:	e6 e2       	ldi	r30, 0x26	; 38
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <log+0x4a>
    1a70:	d7 de       	rcall	.-594    	; 0x1820 <__addsf3>
    1a72:	e3 e5       	ldi	r30, 0x53	; 83
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	28 d0       	rcall	.+80     	; 0x1ac8 <__fp_powser>
    1a78:	8b 01       	movw	r16, r22
    1a7a:	be 01       	movw	r22, r28
    1a7c:	ec 01       	movw	r28, r24
    1a7e:	fb 2e       	mov	r15, r27
    1a80:	6f 57       	subi	r22, 0x7F	; 127
    1a82:	71 09       	sbc	r23, r1
    1a84:	75 95       	asr	r23
    1a86:	77 1f       	adc	r23, r23
    1a88:	88 0b       	sbc	r24, r24
    1a8a:	99 0b       	sbc	r25, r25
    1a8c:	5d dd       	rcall	.-1350   	; 0x1548 <__floatsisf>
    1a8e:	28 e1       	ldi	r18, 0x18	; 24
    1a90:	32 e7       	ldi	r19, 0x72	; 114
    1a92:	41 e3       	ldi	r20, 0x31	; 49
    1a94:	5f e3       	ldi	r21, 0x3F	; 63
    1a96:	c1 dd       	rcall	.-1150   	; 0x161a <__mulsf3x>
    1a98:	af 2d       	mov	r26, r15
    1a9a:	98 01       	movw	r18, r16
    1a9c:	ae 01       	movw	r20, r28
    1a9e:	ff 90       	pop	r15
    1aa0:	0f 91       	pop	r16
    1aa2:	1f 91       	pop	r17
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	cc de       	rcall	.-616    	; 0x1842 <__addsf3x>
    1aaa:	25 ce       	rjmp	.-950    	; 0x16f6 <__fp_round>

00001aac <__fp_mpack>:
    1aac:	9f 3f       	cpi	r25, 0xFF	; 255
    1aae:	31 f0       	breq	.+12     	; 0x1abc <__fp_mpack_finite+0xc>

00001ab0 <__fp_mpack_finite>:
    1ab0:	91 50       	subi	r25, 0x01	; 1
    1ab2:	20 f4       	brcc	.+8      	; 0x1abc <__fp_mpack_finite+0xc>
    1ab4:	87 95       	ror	r24
__fp_mpack_finite():
    1ab6:	77 95       	ror	r23
    1ab8:	67 95       	ror	r22
    1aba:	b7 95       	ror	r27
    1abc:	88 0f       	add	r24, r24
    1abe:	91 1d       	adc	r25, r1
    1ac0:	96 95       	lsr	r25
    1ac2:	87 95       	ror	r24
    1ac4:	97 f9       	bld	r25, 7
    1ac6:	08 95       	ret

00001ac8 <__fp_powser>:
__fp_powser():
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	1f 93       	push	r17
    1ace:	0f 93       	push	r16
    1ad0:	ff 92       	push	r15
    1ad2:	ef 92       	push	r14
    1ad4:	df 92       	push	r13
    1ad6:	7b 01       	movw	r14, r22
    1ad8:	8c 01       	movw	r16, r24
    1ada:	68 94       	set
    1adc:	05 c0       	rjmp	.+10     	; 0x1ae8 <__fp_powser+0x20>
    1ade:	da 2e       	mov	r13, r26
    1ae0:	ef 01       	movw	r28, r30
    1ae2:	9b dd       	rcall	.-1226   	; 0x161a <__mulsf3x>
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e8 94       	clt
    1ae8:	a5 91       	lpm	r26, Z+
    1aea:	25 91       	lpm	r18, Z+
    1aec:	35 91       	lpm	r19, Z+
    1aee:	45 91       	lpm	r20, Z+
    1af0:	55 91       	lpm	r21, Z+
    1af2:	ae f3       	brts	.-22     	; 0x1ade <__fp_powser+0x16>
    1af4:	ef 01       	movw	r28, r30
    1af6:	a5 de       	rcall	.-694    	; 0x1842 <__addsf3x>
    1af8:	fe 01       	movw	r30, r28
    1afa:	97 01       	movw	r18, r14
    1afc:	a8 01       	movw	r20, r16
    1afe:	da 94       	dec	r13
    1b00:	79 f7       	brne	.-34     	; 0x1ae0 <__fp_powser+0x18>
    1b02:	df 90       	pop	r13
    1b04:	ef 90       	pop	r14
    1b06:	ff 90       	pop	r15
    1b08:	0f 91       	pop	r16
    1b0a:	1f 91       	pop	r17
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    1b12:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    1b14:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <__udivmodqi4_ep>

00001b18 <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    1b18:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    1b1a:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    1b1c:	08 f0       	brcs	.+2      	; 0x1b20 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    1b1e:	96 1b       	sub	r25, r22

00001b20 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    1b20:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    1b22:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    1b24:	c9 f7       	brne	.-14     	; 0x1b18 <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    1b26:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    1b28:	08 95       	ret

00001b2a <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1b2a:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1b2c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1b2e:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1b30:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1b32:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1b34:	09 94       	ijmp

00001b36 <malloc>:
malloc():
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	82 30       	cpi	r24, 0x02	; 2
    1b40:	91 05       	cpc	r25, r1
    1b42:	10 f4       	brcc	.+4      	; 0x1b48 <malloc+0x12>
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <__flp>
    1b4c:	f0 91 ea 01 	lds	r31, 0x01EA	; 0x8001ea <__flp+0x1>
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	a0 e0       	ldi	r26, 0x00	; 0
    1b58:	30 97       	sbiw	r30, 0x00	; 0
    1b5a:	99 f4       	brne	.+38     	; 0x1b82 <malloc+0x4c>
    1b5c:	21 15       	cp	r18, r1
    1b5e:	31 05       	cpc	r19, r1
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <malloc+0x2e>
    1b62:	4a c0       	rjmp	.+148    	; 0x1bf8 <malloc+0xc2>
    1b64:	28 1b       	sub	r18, r24
    1b66:	39 0b       	sbc	r19, r25
    1b68:	24 30       	cpi	r18, 0x04	; 4
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	d8 f5       	brcc	.+118    	; 0x1be4 <malloc+0xae>
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	9b 81       	ldd	r25, Y+3	; 0x03
    1b72:	61 15       	cp	r22, r1
    1b74:	71 05       	cpc	r23, r1
    1b76:	89 f1       	breq	.+98     	; 0x1bda <malloc+0xa4>
    1b78:	fb 01       	movw	r30, r22
    1b7a:	93 83       	std	Z+3, r25	; 0x03
    1b7c:	82 83       	std	Z+2, r24	; 0x02
    1b7e:	fe 01       	movw	r30, r28
    1b80:	11 c0       	rjmp	.+34     	; 0x1ba4 <malloc+0x6e>
    1b82:	40 81       	ld	r20, Z
    1b84:	51 81       	ldd	r21, Z+1	; 0x01
    1b86:	02 81       	ldd	r16, Z+2	; 0x02
    1b88:	13 81       	ldd	r17, Z+3	; 0x03
    1b8a:	48 17       	cp	r20, r24
    1b8c:	59 07       	cpc	r21, r25
    1b8e:	e0 f0       	brcs	.+56     	; 0x1bc8 <malloc+0x92>
    1b90:	48 17       	cp	r20, r24
    1b92:	59 07       	cpc	r21, r25
    1b94:	99 f4       	brne	.+38     	; 0x1bbc <malloc+0x86>
    1b96:	10 97       	sbiw	r26, 0x00	; 0
    1b98:	61 f0       	breq	.+24     	; 0x1bb2 <malloc+0x7c>
    1b9a:	12 96       	adiw	r26, 0x02	; 2
    1b9c:	0c 93       	st	X, r16
    1b9e:	12 97       	sbiw	r26, 0x02	; 2
    1ba0:	13 96       	adiw	r26, 0x03	; 3
    1ba2:	1c 93       	st	X, r17
    1ba4:	32 96       	adiw	r30, 0x02	; 2
    1ba6:	cf 01       	movw	r24, r30
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	08 95       	ret
    1bb2:	00 93 e9 01 	sts	0x01E9, r16	; 0x8001e9 <__flp>
    1bb6:	10 93 ea 01 	sts	0x01EA, r17	; 0x8001ea <__flp+0x1>
    1bba:	f4 cf       	rjmp	.-24     	; 0x1ba4 <malloc+0x6e>
    1bbc:	21 15       	cp	r18, r1
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	51 f0       	breq	.+20     	; 0x1bd6 <malloc+0xa0>
    1bc2:	42 17       	cp	r20, r18
    1bc4:	53 07       	cpc	r21, r19
    1bc6:	38 f0       	brcs	.+14     	; 0x1bd6 <malloc+0xa0>
    1bc8:	a9 01       	movw	r20, r18
    1bca:	db 01       	movw	r26, r22
    1bcc:	9a 01       	movw	r18, r20
    1bce:	bd 01       	movw	r22, r26
    1bd0:	df 01       	movw	r26, r30
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	c1 cf       	rjmp	.-126    	; 0x1b58 <malloc+0x22>
    1bd6:	ef 01       	movw	r28, r30
    1bd8:	f9 cf       	rjmp	.-14     	; 0x1bcc <malloc+0x96>
    1bda:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <__flp+0x1>
    1bde:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <__flp>
    1be2:	cd cf       	rjmp	.-102    	; 0x1b7e <malloc+0x48>
    1be4:	fe 01       	movw	r30, r28
    1be6:	e2 0f       	add	r30, r18
    1be8:	f3 1f       	adc	r31, r19
    1bea:	81 93       	st	Z+, r24
    1bec:	91 93       	st	Z+, r25
    1bee:	22 50       	subi	r18, 0x02	; 2
    1bf0:	31 09       	sbc	r19, r1
    1bf2:	39 83       	std	Y+1, r19	; 0x01
    1bf4:	28 83       	st	Y, r18
    1bf6:	d7 cf       	rjmp	.-82     	; 0x1ba6 <malloc+0x70>
    1bf8:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <__brkval>
    1bfc:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <__brkval+0x1>
    1c00:	23 2b       	or	r18, r19
    1c02:	41 f4       	brne	.+16     	; 0x1c14 <malloc+0xde>
    1c04:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1c08:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1c0c:	30 93 e8 01 	sts	0x01E8, r19	; 0x8001e8 <__brkval+0x1>
    1c10:	20 93 e7 01 	sts	0x01E7, r18	; 0x8001e7 <__brkval>
    1c14:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1c18:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1c1c:	21 15       	cp	r18, r1
    1c1e:	31 05       	cpc	r19, r1
    1c20:	41 f4       	brne	.+16     	; 0x1c32 <malloc+0xfc>
    1c22:	2d b7       	in	r18, 0x3d	; 61
    1c24:	3e b7       	in	r19, 0x3e	; 62
    1c26:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1c2a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1c2e:	24 1b       	sub	r18, r20
    1c30:	35 0b       	sbc	r19, r21
    1c32:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <__brkval>
    1c36:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <__brkval+0x1>
    1c3a:	e2 17       	cp	r30, r18
    1c3c:	f3 07       	cpc	r31, r19
    1c3e:	a0 f4       	brcc	.+40     	; 0x1c68 <malloc+0x132>
    1c40:	2e 1b       	sub	r18, r30
    1c42:	3f 0b       	sbc	r19, r31
    1c44:	28 17       	cp	r18, r24
    1c46:	39 07       	cpc	r19, r25
    1c48:	78 f0       	brcs	.+30     	; 0x1c68 <malloc+0x132>
    1c4a:	ac 01       	movw	r20, r24
    1c4c:	4e 5f       	subi	r20, 0xFE	; 254
    1c4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c50:	24 17       	cp	r18, r20
    1c52:	35 07       	cpc	r19, r21
    1c54:	48 f0       	brcs	.+18     	; 0x1c68 <malloc+0x132>
    1c56:	4e 0f       	add	r20, r30
    1c58:	5f 1f       	adc	r21, r31
    1c5a:	50 93 e8 01 	sts	0x01E8, r21	; 0x8001e8 <__brkval+0x1>
    1c5e:	40 93 e7 01 	sts	0x01E7, r20	; 0x8001e7 <__brkval>
    1c62:	81 93       	st	Z+, r24
    1c64:	91 93       	st	Z+, r25
    1c66:	9f cf       	rjmp	.-194    	; 0x1ba6 <malloc+0x70>
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	e0 e0       	ldi	r30, 0x00	; 0
    1c6c:	9c cf       	rjmp	.-200    	; 0x1ba6 <malloc+0x70>

00001c6e <free>:
free():
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	e9 f0       	breq	.+58     	; 0x1cb0 <free+0x42>
    1c76:	fc 01       	movw	r30, r24
    1c78:	32 97       	sbiw	r30, 0x02	; 2
    1c7a:	13 82       	std	Z+3, r1	; 0x03
    1c7c:	12 82       	std	Z+2, r1	; 0x02
    1c7e:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <__flp>
    1c82:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <__flp+0x1>
    1c86:	ed 01       	movw	r28, r26
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	10 97       	sbiw	r26, 0x00	; 0
    1c8e:	a1 f4       	brne	.+40     	; 0x1cb8 <free+0x4a>
    1c90:	20 81       	ld	r18, Z
    1c92:	31 81       	ldd	r19, Z+1	; 0x01
    1c94:	82 0f       	add	r24, r18
    1c96:	93 1f       	adc	r25, r19
    1c98:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <__brkval>
    1c9c:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <__brkval+0x1>
    1ca0:	28 17       	cp	r18, r24
    1ca2:	39 07       	cpc	r19, r25
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <free+0x3a>
    1ca6:	61 c0       	rjmp	.+194    	; 0x1d6a <free+0xfc>
    1ca8:	f0 93 e8 01 	sts	0x01E8, r31	; 0x8001e8 <__brkval+0x1>
    1cac:	e0 93 e7 01 	sts	0x01E7, r30	; 0x8001e7 <__brkval>
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret
    1cb6:	ea 01       	movw	r28, r20
    1cb8:	ce 17       	cp	r28, r30
    1cba:	df 07       	cpc	r29, r31
    1cbc:	e8 f5       	brcc	.+122    	; 0x1d38 <free+0xca>
    1cbe:	4a 81       	ldd	r20, Y+2	; 0x02
    1cc0:	5b 81       	ldd	r21, Y+3	; 0x03
    1cc2:	9e 01       	movw	r18, r28
    1cc4:	41 15       	cp	r20, r1
    1cc6:	51 05       	cpc	r21, r1
    1cc8:	b1 f7       	brne	.-20     	; 0x1cb6 <free+0x48>
    1cca:	e9 01       	movw	r28, r18
    1ccc:	fb 83       	std	Y+3, r31	; 0x03
    1cce:	ea 83       	std	Y+2, r30	; 0x02
    1cd0:	49 91       	ld	r20, Y+
    1cd2:	59 91       	ld	r21, Y+
    1cd4:	c4 0f       	add	r28, r20
    1cd6:	d5 1f       	adc	r29, r21
    1cd8:	ec 17       	cp	r30, r28
    1cda:	fd 07       	cpc	r31, r29
    1cdc:	61 f4       	brne	.+24     	; 0x1cf6 <free+0x88>
    1cde:	80 81       	ld	r24, Z
    1ce0:	91 81       	ldd	r25, Z+1	; 0x01
    1ce2:	02 96       	adiw	r24, 0x02	; 2
    1ce4:	84 0f       	add	r24, r20
    1ce6:	95 1f       	adc	r25, r21
    1ce8:	e9 01       	movw	r28, r18
    1cea:	99 83       	std	Y+1, r25	; 0x01
    1cec:	88 83       	st	Y, r24
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	9b 83       	std	Y+3, r25	; 0x03
    1cf4:	8a 83       	std	Y+2, r24	; 0x02
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	e0 e0       	ldi	r30, 0x00	; 0
    1cfa:	12 96       	adiw	r26, 0x02	; 2
    1cfc:	8d 91       	ld	r24, X+
    1cfe:	9c 91       	ld	r25, X
    1d00:	13 97       	sbiw	r26, 0x03	; 3
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	b9 f5       	brne	.+110    	; 0x1d74 <free+0x106>
    1d06:	2d 91       	ld	r18, X+
    1d08:	3c 91       	ld	r19, X
    1d0a:	11 97       	sbiw	r26, 0x01	; 1
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	02 96       	adiw	r24, 0x02	; 2
    1d10:	82 0f       	add	r24, r18
    1d12:	93 1f       	adc	r25, r19
    1d14:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <__brkval>
    1d18:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <__brkval+0x1>
    1d1c:	28 17       	cp	r18, r24
    1d1e:	39 07       	cpc	r19, r25
    1d20:	39 f6       	brne	.-114    	; 0x1cb0 <free+0x42>
    1d22:	30 97       	sbiw	r30, 0x00	; 0
    1d24:	51 f5       	brne	.+84     	; 0x1d7a <free+0x10c>
    1d26:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <__flp+0x1>
    1d2a:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <__flp>
    1d2e:	b0 93 e8 01 	sts	0x01E8, r27	; 0x8001e8 <__brkval+0x1>
    1d32:	a0 93 e7 01 	sts	0x01E7, r26	; 0x8001e7 <__brkval>
    1d36:	bc cf       	rjmp	.-136    	; 0x1cb0 <free+0x42>
    1d38:	d3 83       	std	Z+3, r29	; 0x03
    1d3a:	c2 83       	std	Z+2, r28	; 0x02
    1d3c:	40 81       	ld	r20, Z
    1d3e:	51 81       	ldd	r21, Z+1	; 0x01
    1d40:	84 0f       	add	r24, r20
    1d42:	95 1f       	adc	r25, r21
    1d44:	c8 17       	cp	r28, r24
    1d46:	d9 07       	cpc	r29, r25
    1d48:	61 f4       	brne	.+24     	; 0x1d62 <free+0xf4>
    1d4a:	4e 5f       	subi	r20, 0xFE	; 254
    1d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4e:	88 81       	ld	r24, Y
    1d50:	99 81       	ldd	r25, Y+1	; 0x01
    1d52:	48 0f       	add	r20, r24
    1d54:	59 1f       	adc	r21, r25
    1d56:	51 83       	std	Z+1, r21	; 0x01
    1d58:	40 83       	st	Z, r20
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5e:	93 83       	std	Z+3, r25	; 0x03
    1d60:	82 83       	std	Z+2, r24	; 0x02
    1d62:	21 15       	cp	r18, r1
    1d64:	31 05       	cpc	r19, r1
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <free+0xfc>
    1d68:	b0 cf       	rjmp	.-160    	; 0x1cca <free+0x5c>
    1d6a:	f0 93 ea 01 	sts	0x01EA, r31	; 0x8001ea <__flp+0x1>
    1d6e:	e0 93 e9 01 	sts	0x01E9, r30	; 0x8001e9 <__flp>
    1d72:	9e cf       	rjmp	.-196    	; 0x1cb0 <free+0x42>
    1d74:	fd 01       	movw	r30, r26
    1d76:	dc 01       	movw	r26, r24
    1d78:	c0 cf       	rjmp	.-128    	; 0x1cfa <free+0x8c>
    1d7a:	13 82       	std	Z+3, r1	; 0x03
    1d7c:	12 82       	std	Z+2, r1	; 0x02
    1d7e:	d7 cf       	rjmp	.-82     	; 0x1d2e <free+0xc0>

00001d80 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1d80:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    1d82:	c4 ed       	ldi	r28, 0xD4	; 212
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    1d84:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    1d86:	03 c0       	rjmp	.+6      	; 0x1d8e <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    1d88:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    1d8a:	cf de       	rcall	.-610    	; 0x1b2a <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    1d8c:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    1d8e:	c5 3d       	cpi	r28, 0xD5	; 213
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1d90:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1d92:	d1 f7       	brne	.-12     	; 0x1d88 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1d94:	f8 94       	cli

00001d96 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1d96:	ff cf       	rjmp	.-2      	; 0x1d96 <__stop_program>
