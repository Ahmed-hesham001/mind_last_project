
C:\Users\Lenovo\AppData\Local\Temp\arduino\sketches\F57F6D0E75B2A2C07C77DAA0725859E4/mind_project_code.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	cb c0       	rjmp	.+406    	; 0x198 <__ctors_end>
       2:	ef c0       	rjmp	.+478    	; 0x1e2 <__bad_interrupt>
       4:	ee c0       	rjmp	.+476    	; 0x1e2 <__bad_interrupt>
       6:	ed c0       	rjmp	.+474    	; 0x1e2 <__bad_interrupt>
       8:	ec c0       	rjmp	.+472    	; 0x1e2 <__bad_interrupt>
       a:	eb c0       	rjmp	.+470    	; 0x1e2 <__bad_interrupt>
       c:	9c c4       	rjmp	.+2360   	; 0x946 <__vector_6>
       e:	e9 c0       	rjmp	.+466    	; 0x1e2 <__bad_interrupt>
      10:	e8 c0       	rjmp	.+464    	; 0x1e2 <__bad_interrupt>
      12:	f8 c3       	rjmp	.+2032   	; 0x804 <__vector_9>
      14:	e6 c0       	rjmp	.+460    	; 0x1e2 <__bad_interrupt>
      16:	65 c4       	rjmp	.+2250   	; 0x8e2 <__vector_11>
      18:	3f c4       	rjmp	.+2174   	; 0x898 <__vector_12>
      1a:	e3 c0       	rjmp	.+454    	; 0x1e2 <__bad_interrupt>
      1c:	e2 c0       	rjmp	.+452    	; 0x1e2 <__bad_interrupt>
      1e:	e1 c0       	rjmp	.+450    	; 0x1e2 <__bad_interrupt>
      20:	e0 c0       	rjmp	.+448    	; 0x1e2 <__bad_interrupt>
      22:	df c0       	rjmp	.+446    	; 0x1e2 <__bad_interrupt>
      24:	de c0       	rjmp	.+444    	; 0x1e2 <__bad_interrupt>
      26:	08 00       	.word	0x0008	; ????
      28:	00 00       	nop
      2a:	be 92       	st	-X, r11
      2c:	24 49       	sbci	r18, 0x94	; 148
      2e:	12 3e       	cpi	r17, 0xE2	; 226
      30:	ab aa       	std	Y+51, r10	; 0x33
      32:	aa 2a       	or	r10, r26
      34:	be cd       	rjmp	.-1156   	; 0xfffffbb2 <__eeprom_end+0xff7efbb2>
      36:	cc cc       	rjmp	.-1640   	; 0xfffff9d0 <__eeprom_end+0xff7ef9d0>
      38:	4c 3e       	cpi	r20, 0xEC	; 236
      3a:	00 00       	nop
      3c:	00 80       	ld	r0, Z
      3e:	be ab       	std	Y+54, r27	; 0x36
      40:	aa aa       	std	Y+50, r10	; 0x32
      42:	aa 3e       	cpi	r26, 0xEA	; 234
      44:	00 00       	nop
      46:	00 00       	nop
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	00 00       	nop
      50:	00 00       	nop
      52:	00 08       	sbc	r0, r0
      54:	41 78       	andi	r20, 0x81	; 129
      56:	d3 bb       	out	0x13, r29	; 19
      58:	43 87       	std	Z+11, r20	; 0x0b
      5a:	d1 13       	cpse	r29, r17
      5c:	3d 19       	sub	r19, r13
      5e:	0e 3c       	cpi	r16, 0xCE	; 206
      60:	c3 bd       	out	0x23, r28	; 35
      62:	42 82       	std	Z+2, r4	; 0x02
      64:	ad 2b       	or	r26, r29
      66:	3e 68       	ori	r19, 0x8E	; 142
      68:	ec 82       	std	Y+4, r14	; 0x04
      6a:	76 be       	out	0x36, r7	; 54
      6c:	d9 8f       	std	Y+25, r29	; 0x19
      6e:	e1 a9       	ldd	r30, Z+49	; 0x31
      70:	3e 4c       	sbci	r19, 0xCE	; 206
      72:	80 ef       	ldi	r24, 0xF0	; 240
      74:	ff be       	out	0x3f, r15	; 63
      76:	01 c4       	rjmp	.+2050   	; 0x87a <__vector_9+0x76>
      78:	ff 7f       	andi	r31, 0xFF	; 255
      7a:	3f 00       	.word	0x003f	; ????
      7c:	00 00       	nop
	...

00000080 <__trampolines_end>:
__trampolines_start():
      80:	45 4e       	sbci	r20, 0xE5	; 229
      82:	54 45       	sbci	r21, 0x54	; 84
      84:	52 20       	and	r5, r2
      86:	50 41       	sbci	r21, 0x10	; 16
      88:	53 53       	subi	r21, 0x33	; 51
      8a:	3a 00       	.word	0x003a	; ????

0000008c <temperature_sys_activate()::__c>:
      8c:	2a 43 00                                            *C.

0000008f <temperature_sys_activate()::__c>:
      8f:	54 65 6d 70 3a 20 00                                Temp: .

00000096 <ldr_sys_activate()::__c>:
      96:	6c 69 67 68 74 20 6c 65 76 65 6c 3a 00              light level:.

000000a3 <loop::__c>:
      a3:	50 61 73 73 77 6f 72 64 20 69 6e 63 6f 72 72 65     Password incorre
      b3:	63 74 2e 20 54 72 79 20 61 67 61 69 6e 2e 00        ct. Try again..

000000c2 <loop::__c>:
      c2:	50 61 73 73 77 6f 72 64 20 63 6f 72 72 65 63 74     Password correct
      d2:	2e 20 44 6f 6f 72 20 6f 70 65 6e 65 64 2e 00        . Door opened..

000000e1 <saved_pass>:
      e1:	34 35 34 35 00                                      4545.

000000e6 <loop::__c>:
      e6:	45 6e 74 65 72 65 64 20 50 61 73 73 77 6f 72 64     Entered Password
      f6:	3a 20 00                                            : .

000000f9 <loop::__c>:
      f9:	4b 65 79 20 50 72 65 73 73 65 64 3a 20 00           Key Pressed: .

00000107 <loop::__c>:
     107:	45 4e 54 45 52 20 50 41 53 53 3a 00                 ENTER PASS:.

00000113 <loop::__c>:
     113:	44 6f 6f 72 20 69 73 20 63 6c 6f 73 65 64 2e 00     Door is closed..

00000123 <loop::__c>:
     123:	44 6f 6f 72 20 69 73 20 6f 70 65 6e 65 64 2e 00     Door is opened..

00000133 <port_to_mode_PGM>:
     133:	00 00 00 00 37 00 34 00 31 00                       ....7.4.1.

0000013d <port_to_output_PGM>:
     13d:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

00000147 <port_to_input_PGM>:
     147:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

00000151 <digital_pin_to_port_PGM>:
     151:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     161:	03 03 03 03 02 02 03                                .......

00000168 <digital_pin_to_bit_mask_PGM>:
     168:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     178:	04 08 10 20 40 80 40                                ... @.@

0000017f <digital_pin_to_timer_PGM>:
	...
     187:	00 04 05 07 00 00 00 00 00 00 00 00 00 00 00        ...............

00000196 <__ctors_start>:
__ctors_start():
     196:	51 05       	cpc	r21, r1

00000198 <__ctors_end>:
__dtors_end():
     198:	11 24       	eor	r1, r1
     19a:	1f be       	out	0x3f, r1	; 63
     19c:	cf e5       	ldi	r28, 0x5F	; 95
     19e:	d4 e0       	ldi	r29, 0x04	; 4
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     1a4:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     1a6:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     1aa:	ea e1       	ldi	r30, 0x1A	; 26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     1ac:	f7 e1       	ldi	r31, 0x17	; 23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     1b0:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     1b2:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     1b4:	a6 37       	cpi	r26, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     1b6:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0xc>

000001ba <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1ba:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1bc:	a6 e7       	ldi	r26, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1be:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1c4:	ad 34       	cpi	r26, 0x4D	; 77
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1c6:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>

000001ca <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1ca:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1cc:	cc ec       	ldi	r28, 0xCC	; 204
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     1ce:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     1d2:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1d4:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1d6:	99 da       	rcall	.-2766   	; 0xfffff70a <__eeprom_end+0xff7ef70a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1d8:	cb 3c       	cpi	r28, 0xCB	; 203
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1da:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1dc:	d1 f7       	brne	.-12     	; 0x1d2 <__do_global_ctors+0x8>
     1de:	bc d4       	rcall	.+2424   	; 0xb58 <main>
     1e0:	9a ca       	rjmp	.-2764   	; 0xfffff716 <__eeprom_end+0xff7ef716>

000001e2 <__bad_interrupt>:
__vector_1():
     1e2:	0e cf       	rjmp	.-484    	; 0x0 <__vectors>

000001e4 <Servo::write(int) [clone .constprop.18]>:
_ZN5Servo5writeEi.constprop.18():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:264
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}

void Servo::write(int value)
     1e4:	8f 92       	push	r8
     1e6:	9f 92       	push	r9
     1e8:	af 92       	push	r10
     1ea:	bf 92       	push	r11
     1ec:	ff 92       	push	r15
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
writeMicroseconds():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:278
}

void Servo::writeMicroseconds(int value)
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     1f6:	f0 90 4a 01 	lds	r15, 0x014A	; 0x80014a <myservo>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:279
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     1fa:	2b e0       	ldi	r18, 0x0B	; 11
     1fc:	2f 15       	cp	r18, r15
     1fe:	08 f4       	brcc	.+2      	; 0x202 <Servo::write(int) [clone .constprop.18]+0x1e>
     200:	48 c0       	rjmp	.+144    	; 0x292 <Servo::write(int) [clone .constprop.18]+0xae>
_ZN5Servo5writeEi.constprop.18():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:270
{
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
     202:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <myservo+0x2>
     206:	08 e5       	ldi	r16, 0x58	; 88
     208:	12 e0       	ldi	r17, 0x02	; 2
     20a:	02 1b       	sub	r16, r18
     20c:	11 09       	sbc	r17, r1
     20e:	27 fd       	sbrc	r18, 7
     210:	13 95       	inc	r17
     212:	00 0f       	add	r16, r16
     214:	11 1f       	adc	r17, r17
     216:	00 0f       	add	r16, r16
     218:	11 1f       	adc	r17, r17
     21a:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <myservo+0x1>
     21e:	c8 e8       	ldi	r28, 0x88	; 136
     220:	d0 e0       	ldi	r29, 0x00	; 0
     222:	c2 1b       	sub	r28, r18
     224:	d1 09       	sbc	r29, r1
     226:	27 fd       	sbrc	r18, 7
     228:	d3 95       	inc	r29
     22a:	cc 0f       	add	r28, r28
     22c:	dd 1f       	adc	r29, r29
     22e:	cc 0f       	add	r28, r28
     230:	dd 1f       	adc	r29, r29
     232:	4e 01       	movw	r8, r28
     234:	0d 2e       	mov	r0, r29
     236:	00 0c       	add	r0, r0
     238:	aa 08       	sbc	r10, r10
     23a:	bb 08       	sbc	r11, r11
     23c:	98 01       	movw	r18, r16
     23e:	01 2e       	mov	r0, r17
     240:	00 0c       	add	r0, r0
     242:	44 0b       	sbc	r20, r20
     244:	55 0b       	sbc	r21, r21
map():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WMath.cpp:54
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     246:	28 19       	sub	r18, r8
     248:	39 09       	sbc	r19, r9
     24a:	4a 09       	sbc	r20, r10
     24c:	5b 09       	sbc	r21, r11
     24e:	dc 01       	movw	r26, r24
     250:	8b d7       	rcall	.+3862   	; 0x1168 <__mulshisi3>
     252:	24 eb       	ldi	r18, 0xB4	; 180
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	40 e0       	ldi	r20, 0x00	; 0
     258:	50 e0       	ldi	r21, 0x00	; 0
     25a:	60 d7       	rcall	.+3776   	; 0x111c <__divmodsi4>
     25c:	82 0e       	add	r8, r18
     25e:	93 1e       	adc	r9, r19
     260:	a4 1e       	adc	r10, r20
     262:	b5 1e       	adc	r11, r21
writeMicroseconds():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:281
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     264:	8c 16       	cp	r8, r28
     266:	9d 06       	cpc	r9, r29
     268:	2c f0       	brlt	.+10     	; 0x274 <Servo::write(int) [clone .constprop.18]+0x90>
     26a:	e8 01       	movw	r28, r16
     26c:	80 16       	cp	r8, r16
     26e:	91 06       	cpc	r9, r17
     270:	0c f4       	brge	.+2      	; 0x274 <Servo::write(int) [clone .constprop.18]+0x90>
     272:	e4 01       	movw	r28, r8
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:289
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009

    uint8_t oldSREG = SREG;
     274:	2f b7       	in	r18, 0x3f	; 63
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:290
    cli();
     276:	f8 94       	cli
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:291
    servos[channel].ticks = value;
     278:	8f 2d       	mov	r24, r15
     27a:	90 e0       	ldi	r25, 0x00	; 0
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:286
    if( value < SERVO_MIN() )          // ensure pulse width is valid
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
     27c:	22 97       	sbiw	r28, 0x02	; 2
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:291
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009

    uint8_t oldSREG = SREG;
    cli();
    servos[channel].ticks = value;
     27e:	fc 01       	movw	r30, r24
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	e8 0f       	add	r30, r24
     286:	f9 1f       	adc	r31, r25
     288:	eb 5d       	subi	r30, 0xDB	; 219
     28a:	fe 4f       	sbci	r31, 0xFE	; 254
     28c:	d2 83       	std	Z+2, r29	; 0x02
     28e:	c1 83       	std	Z+1, r28	; 0x01
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:292
    SREG = oldSREG;
     290:	2f bf       	out	0x3f, r18	; 63
_ZN5Servo5writeEi.constprop.18():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:273
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
}
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	1f 91       	pop	r17
     298:	0f 91       	pop	r16
     29a:	ff 90       	pop	r15
     29c:	bf 90       	pop	r11
     29e:	af 90       	pop	r10
     2a0:	9f 90       	pop	r9
     2a2:	8f 90       	pop	r8
     2a4:	08 95       	ret

000002a6 <turnOffPWM>:
turnOffPWM():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     2a6:	85 30       	cpi	r24, 0x05	; 5
     2a8:	41 f0       	breq	.+16     	; 0x2ba <turnOffPWM+0x14>
     2aa:	87 30       	cpi	r24, 0x07	; 7
     2ac:	49 f0       	breq	.+18     	; 0x2c0 <turnOffPWM+0x1a>
     2ae:	84 30       	cpi	r24, 0x04	; 4
     2b0:	51 f4       	brne	.+20     	; 0x2c6 <turnOffPWM+0x20>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     2b2:	8f b5       	in	r24, 0x2f	; 47
     2b4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     2b6:	8f bd       	out	0x2f, r24	; 47
     2b8:	08 95       	ret
     2ba:	8f b5       	in	r24, 0x2f	; 47
     2bc:	8f 7d       	andi	r24, 0xDF	; 223
     2be:	fb cf       	rjmp	.-10     	; 0x2b6 <turnOffPWM+0x10>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
     2c0:	85 b5       	in	r24, 0x25	; 37
     2c2:	8f 7d       	andi	r24, 0xDF	; 223
     2c4:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
     2c6:	08 95       	ret

000002c8 <digitalRead>:
digitalRead():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     2cc:	28 2f       	mov	r18, r24
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	f9 01       	movw	r30, r18
     2d2:	e1 58       	subi	r30, 0x81	; 129
     2d4:	fe 4f       	sbci	r31, 0xFE	; 254
     2d6:	84 91       	lpm	r24, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     2d8:	f9 01       	movw	r30, r18
     2da:	e8 59       	subi	r30, 0x98	; 152
     2dc:	fe 4f       	sbci	r31, 0xFE	; 254
     2de:	d4 91       	lpm	r29, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     2e0:	f9 01       	movw	r30, r18
     2e2:	ef 5a       	subi	r30, 0xAF	; 175
     2e4:	fe 4f       	sbci	r31, 0xFE	; 254
     2e6:	c4 91       	lpm	r28, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     2e8:	cc 23       	and	r28, r28
     2ea:	99 f0       	breq	.+38     	; 0x312 <digitalRead+0x4a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     2ec:	81 11       	cpse	r24, r1
     2ee:	db df       	rcall	.-74     	; 0x2a6 <turnOffPWM>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     2f0:	ec 2f       	mov	r30, r28
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	ee 0f       	add	r30, r30
     2f6:	ff 1f       	adc	r31, r31
     2f8:	e9 5b       	subi	r30, 0xB9	; 185
     2fa:	fe 4f       	sbci	r31, 0xFE	; 254
     2fc:	a5 91       	lpm	r26, Z+
     2fe:	b4 91       	lpm	r27, Z
     300:	ec 91       	ld	r30, X
     302:	ed 23       	and	r30, r29
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	09 f4       	brne	.+2      	; 0x30c <digitalRead+0x44>
     30a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	fa cf       	rjmp	.-12     	; 0x30c <digitalRead+0x44>

00000318 <digitalWrite>:
digitalWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     31e:	28 2f       	mov	r18, r24
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	f9 01       	movw	r30, r18
     324:	e1 58       	subi	r30, 0x81	; 129
     326:	fe 4f       	sbci	r31, 0xFE	; 254
     328:	84 91       	lpm	r24, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     32a:	f9 01       	movw	r30, r18
     32c:	e8 59       	subi	r30, 0x98	; 152
     32e:	fe 4f       	sbci	r31, 0xFE	; 254
     330:	d4 91       	lpm	r29, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     332:	f9 01       	movw	r30, r18
     334:	ef 5a       	subi	r30, 0xAF	; 175
     336:	fe 4f       	sbci	r31, 0xFE	; 254
     338:	c4 91       	lpm	r28, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     33a:	cc 23       	and	r28, r28
     33c:	a1 f0       	breq	.+40     	; 0x366 <digitalWrite+0x4e>
     33e:	16 2f       	mov	r17, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     340:	81 11       	cpse	r24, r1
     342:	b1 df       	rcall	.-158    	; 0x2a6 <turnOffPWM>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     344:	ec 2f       	mov	r30, r28
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	ee 0f       	add	r30, r30
     34a:	ff 1f       	adc	r31, r31
     34c:	e3 5c       	subi	r30, 0xC3	; 195
     34e:	fe 4f       	sbci	r31, 0xFE	; 254
     350:	a5 91       	lpm	r26, Z+
     352:	b4 91       	lpm	r27, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     354:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
     356:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     358:	ec 91       	ld	r30, X
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     35a:	11 11       	cpse	r17, r1
     35c:	08 c0       	rjmp	.+16     	; 0x36e <digitalWrite+0x56>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     35e:	d0 95       	com	r29
     360:	de 23       	and	r29, r30
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     362:	dc 93       	st	X, r29
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     364:	8f bf       	out	0x3f, r24	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:212
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     36e:	de 2b       	or	r29, r30
     370:	f8 cf       	rjmp	.-16     	; 0x362 <digitalWrite+0x4a>

00000372 <pinMode>:
pinMode():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	fc 01       	movw	r30, r24
     37a:	e8 59       	subi	r30, 0x98	; 152
     37c:	fe 4f       	sbci	r31, 0xFE	; 254
     37e:	24 91       	lpm	r18, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     380:	8f 5a       	subi	r24, 0xAF	; 175
     382:	9e 4f       	sbci	r25, 0xFE	; 254
     384:	fc 01       	movw	r30, r24
     386:	84 91       	lpm	r24, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     388:	88 23       	and	r24, r24
     38a:	c9 f0       	breq	.+50     	; 0x3be <pinMode+0x4c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	88 0f       	add	r24, r24
     390:	99 1f       	adc	r25, r25
     392:	fc 01       	movw	r30, r24
     394:	ed 5c       	subi	r30, 0xCD	; 205
     396:	fe 4f       	sbci	r31, 0xFE	; 254
     398:	a5 91       	lpm	r26, Z+
     39a:	b4 91       	lpm	r27, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     39c:	fc 01       	movw	r30, r24
     39e:	e3 5c       	subi	r30, 0xC3	; 195
     3a0:	fe 4f       	sbci	r31, 0xFE	; 254
     3a2:	c5 91       	lpm	r28, Z+
     3a4:	d4 91       	lpm	r29, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     3a6:	61 11       	cpse	r22, r1
     3a8:	0d c0       	rjmp	.+26     	; 0x3c4 <pinMode+0x52>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     3aa:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
     3ac:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     3ae:	8c 91       	ld	r24, X
     3b0:	20 95       	com	r18
     3b2:	82 23       	and	r24, r18
     3b4:	8c 93       	st	X, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     3b6:	88 81       	ld	r24, Y
     3b8:	28 23       	and	r18, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     3ba:	28 83       	st	Y, r18
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     3bc:	9f bf       	out	0x3f, r25	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     3c4:	62 30       	cpi	r22, 0x02	; 2
     3c6:	51 f4       	brne	.+20     	; 0x3dc <pinMode+0x6a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     3c8:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
     3ca:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     3cc:	3c 91       	ld	r19, X
     3ce:	82 2f       	mov	r24, r18
     3d0:	80 95       	com	r24
     3d2:	83 23       	and	r24, r19
     3d4:	8c 93       	st	X, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     3d6:	e8 81       	ld	r30, Y
     3d8:	2e 2b       	or	r18, r30
     3da:	ef cf       	rjmp	.-34     	; 0x3ba <pinMode+0x48>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     3dc:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
     3de:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     3e0:	ec 91       	ld	r30, X
     3e2:	2e 2b       	or	r18, r30
     3e4:	2c 93       	st	X, r18
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     3e6:	8f bf       	out	0x3f, r24	; 63
     3e8:	ea cf       	rjmp	.-44     	; 0x3be <pinMode+0x4c>

000003ea <analogRead>:
analogRead():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     3ea:	8e 50       	subi	r24, 0x0E	; 14
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     3ec:	80 64       	ori	r24, 0x40	; 64
     3ee:	87 b9       	out	0x07, r24	; 7
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     3f0:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
     3f2:	36 99       	sbic	0x06, 6	; 6
     3f4:	fe cf       	rjmp	.-4      	; 0x3f2 <analogRead+0x8>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
     3f6:	84 b1       	in	r24, 0x04	; 4
     3f8:	95 b1       	in	r25, 0x05	; 5
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:87
#else
  return 0;
#endif
}
     3fa:	08 95       	ret

000003fc <micros>:
micros():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     3fc:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     3fe:	f8 94       	cli
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     400:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <timer0_overflow_count>
     404:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <timer0_overflow_count+0x1>
     408:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <timer0_overflow_count+0x2>
     40c:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <timer0_overflow_count+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     410:	22 b7       	in	r18, 0x32	; 50
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
     412:	08 b6       	in	r0, 0x38	; 56
     414:	00 fe       	sbrs	r0, 0
     416:	05 c0       	rjmp	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     418:	2f 3f       	cpi	r18, 0xFF	; 255
     41a:	19 f0       	breq	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	a1 1d       	adc	r26, r1
     420:	b1 1d       	adc	r27, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     422:	3f bf       	out	0x3f, r19	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     424:	ba 2f       	mov	r27, r26
     426:	a9 2f       	mov	r26, r25
     428:	98 2f       	mov	r25, r24
     42a:	88 27       	eor	r24, r24
     42c:	bc 01       	movw	r22, r24
     42e:	cd 01       	movw	r24, r26
     430:	62 0f       	add	r22, r18
     432:	71 1d       	adc	r23, r1
     434:	81 1d       	adc	r24, r1
     436:	91 1d       	adc	r25, r1
     438:	43 e0       	ldi	r20, 0x03	; 3
     43a:	66 0f       	add	r22, r22
     43c:	77 1f       	adc	r23, r23
     43e:	88 1f       	adc	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	4a 95       	dec	r20
     444:	d1 f7       	brne	.-12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     446:	08 95       	ret

00000448 <delay>:
delay():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     448:	8f 92       	push	r8
     44a:	9f 92       	push	r9
     44c:	af 92       	push	r10
     44e:	bf 92       	push	r11
     450:	cf 92       	push	r12
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	4b 01       	movw	r8, r22
     45a:	5c 01       	movw	r10, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     45c:	cf df       	rcall	.-98     	; 0x3fc <micros>
     45e:	6b 01       	movw	r12, r22
     460:	7c 01       	movw	r14, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     462:	cc df       	rcall	.-104    	; 0x3fc <micros>
     464:	6c 19       	sub	r22, r12
     466:	7d 09       	sbc	r23, r13
     468:	8e 09       	sbc	r24, r14
     46a:	9f 09       	sbc	r25, r15
     46c:	68 3e       	cpi	r22, 0xE8	; 232
     46e:	73 40       	sbci	r23, 0x03	; 3
     470:	81 05       	cpc	r24, r1
     472:	91 05       	cpc	r25, r1
     474:	b0 f3       	brcs	.-20     	; 0x462 <__stack+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:402
      ms--;
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	82 1a       	sub	r8, r18
     47a:	91 08       	sbc	r9, r1
     47c:	a1 08       	sbc	r10, r1
     47e:	b1 08       	sbc	r11, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     480:	88 ee       	ldi	r24, 0xE8	; 232
     482:	c8 0e       	add	r12, r24
     484:	83 e0       	ldi	r24, 0x03	; 3
     486:	d8 1e       	adc	r13, r24
     488:	e1 1c       	adc	r14, r1
     48a:	f1 1c       	adc	r15, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     48c:	81 14       	cp	r8, r1
     48e:	91 04       	cpc	r9, r1
     490:	a1 04       	cpc	r10, r1
     492:	b1 04       	cpc	r11, r1
     494:	31 f7       	brne	.-52     	; 0x462 <__stack+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	df 90       	pop	r13
     49c:	cf 90       	pop	r12
     49e:	bf 90       	pop	r11
     4a0:	af 90       	pop	r10
     4a2:	9f 90       	pop	r9
     4a4:	8f 90       	pop	r8
     4a6:	08 95       	ret

000004a8 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     4a8:	af 92       	push	r10
     4aa:	bf 92       	push	r11
     4ac:	cf 92       	push	r12
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	6c 01       	movw	r12, r24
     4be:	7b 01       	movw	r14, r22
     4c0:	8b 01       	movw	r16, r22
     4c2:	04 0f       	add	r16, r20
     4c4:	15 1f       	adc	r17, r21
     4c6:	eb 01       	movw	r28, r22
     4c8:	5e 01       	movw	r10, r28
     4ca:	ae 18       	sub	r10, r14
     4cc:	bf 08       	sbc	r11, r15
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     4ce:	c0 17       	cp	r28, r16
     4d0:	d1 07       	cpc	r29, r17
     4d2:	59 f0       	breq	.+22     	; 0x4ea <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     4d4:	69 91       	ld	r22, Y+
     4d6:	d6 01       	movw	r26, r12
     4d8:	ed 91       	ld	r30, X+
     4da:	fc 91       	ld	r31, X
     4dc:	01 90       	ld	r0, Z+
     4de:	f0 81       	ld	r31, Z
     4e0:	e0 2d       	mov	r30, r0
     4e2:	c6 01       	movw	r24, r12
     4e4:	09 95       	icall
     4e6:	89 2b       	or	r24, r25
     4e8:	79 f7       	brne	.-34     	; 0x4c8 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     4ea:	c5 01       	movw	r24, r10
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	bf 90       	pop	r11
     4fe:	af 90       	pop	r10
     500:	08 95       	ret

00000502 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     502:	fc 01       	movw	r30, r24
     504:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     506:	44 8d       	ldd	r20, Z+28	; 0x1c
     508:	25 2f       	mov	r18, r21
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	84 2f       	mov	r24, r20
     50e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     510:	82 1b       	sub	r24, r18
     512:	93 0b       	sbc	r25, r19
     514:	54 17       	cp	r21, r20
     516:	10 f0       	brcs	.+4      	; 0x51c <HardwareSerial::availableForWrite()+0x1a>
     518:	cf 96       	adiw	r24, 0x3f	; 63
     51a:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     51c:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
     51e:	08 95       	ret

00000520 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     520:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     522:	91 8d       	ldd	r25, Z+25	; 0x19
     524:	82 8d       	ldd	r24, Z+26	; 0x1a
     526:	98 17       	cp	r25, r24
     528:	61 f0       	breq	.+24     	; 0x542 <HardwareSerial::read()+0x22>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     52a:	a2 8d       	ldd	r26, Z+26	; 0x1a
     52c:	ae 0f       	add	r26, r30
     52e:	bf 2f       	mov	r27, r31
     530:	b1 1d       	adc	r27, r1
     532:	5d 96       	adiw	r26, 0x1d	; 29
     534:	8c 91       	ld	r24, X
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     536:	92 8d       	ldd	r25, Z+26	; 0x1a
     538:	9f 5f       	subi	r25, 0xFF	; 255
     53a:	9f 73       	andi	r25, 0x3F	; 63
     53c:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     546:	08 95       	ret

00000548 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     548:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     54a:	91 8d       	ldd	r25, Z+25	; 0x19
     54c:	82 8d       	ldd	r24, Z+26	; 0x1a
     54e:	98 17       	cp	r25, r24
     550:	31 f0       	breq	.+12     	; 0x55e <HardwareSerial::peek()+0x16>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     552:	82 8d       	ldd	r24, Z+26	; 0x1a
     554:	e8 0f       	add	r30, r24
     556:	f1 1d       	adc	r31, r1
     558:	85 8d       	ldd	r24, Z+29	; 0x1d
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     55e:	8f ef       	ldi	r24, 0xFF	; 255
     560:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     562:	08 95       	ret

00000564 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     564:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     566:	91 8d       	ldd	r25, Z+25	; 0x19
     568:	22 8d       	ldd	r18, Z+26	; 0x1a
     56a:	89 2f       	mov	r24, r25
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	80 5c       	subi	r24, 0xC0	; 192
     570:	9f 4f       	sbci	r25, 0xFF	; 255
     572:	82 1b       	sub	r24, r18
     574:	91 09       	sbc	r25, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
     576:	8f 73       	andi	r24, 0x3F	; 63
     578:	99 27       	eor	r25, r25
     57a:	08 95       	ret

0000057c <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     57c:	88 e8       	ldi	r24, 0x88	; 136
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	f1 df       	rcall	.-30     	; 0x564 <HardwareSerial::available()>
     582:	21 e0       	ldi	r18, 0x01	; 1
     584:	89 2b       	or	r24, r25
     586:	09 f4       	brne	.+2      	; 0x58a <Serial0_available()+0xe>
     588:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
     58a:	82 2f       	mov	r24, r18
     58c:	08 95       	ret

0000058e <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	89 2b       	or	r24, r25
     594:	19 f0       	breq	.+6      	; 0x59c <serialEventRun()+0xe>
     596:	f2 df       	rcall	.-28     	; 0x57c <Serial0_available()>
     598:	81 11       	cpse	r24, r1
     59a:	32 cd       	rjmp	.-1436   	; 0x0 <__vectors>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     59c:	08 95       	ret

0000059e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     59e:	fc 01       	movw	r30, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     5a0:	a4 8d       	ldd	r26, Z+28	; 0x1c
     5a2:	a8 0f       	add	r26, r24
     5a4:	b9 2f       	mov	r27, r25
     5a6:	b1 1d       	adc	r27, r1
     5a8:	a3 5a       	subi	r26, 0xA3	; 163
     5aa:	bf 4f       	sbci	r27, 0xFF	; 255
     5ac:	2c 91       	ld	r18, X
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     5ae:	84 8d       	ldd	r24, Z+28	; 0x1c
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	8f 73       	andi	r24, 0x3F	; 63
     5b6:	99 27       	eor	r25, r25
     5b8:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     5ba:	a6 89       	ldd	r26, Z+22	; 0x16
     5bc:	b7 89       	ldd	r27, Z+23	; 0x17
     5be:	2c 93       	st	X, r18
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:106
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     5c0:	a0 89       	ldd	r26, Z+16	; 0x10
     5c2:	b1 89       	ldd	r27, Z+17	; 0x11
     5c4:	8c 91       	ld	r24, X
     5c6:	82 74       	andi	r24, 0x42	; 66
     5c8:	8c 93       	st	X, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     5ca:	93 8d       	ldd	r25, Z+27	; 0x1b
     5cc:	84 8d       	ldd	r24, Z+28	; 0x1c
     5ce:	98 13       	cpse	r25, r24
     5d0:	06 c0       	rjmp	.+12     	; 0x5de <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     5d2:	02 88       	ldd	r0, Z+18	; 0x12
     5d4:	f3 89       	ldd	r31, Z+19	; 0x13
     5d6:	e0 2d       	mov	r30, r0
     5d8:	80 81       	ld	r24, Z
     5da:	8f 7d       	andi	r24, 0xDF	; 223
     5dc:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     5de:	08 95       	ret

000005e0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     5e0:	ef 92       	push	r14
     5e2:	ff 92       	push	r15
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	ec 01       	movw	r28, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     5f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5f6:	98 13       	cpse	r25, r24
     5f8:	19 c0       	rjmp	.+50     	; 0x62c <HardwareSerial::write(unsigned char)+0x4c>
     5fa:	e8 89       	ldd	r30, Y+16	; 0x10
     5fc:	f9 89       	ldd	r31, Y+17	; 0x11
     5fe:	80 81       	ld	r24, Z
     600:	85 ff       	sbrs	r24, 5
     602:	14 c0       	rjmp	.+40     	; 0x62c <HardwareSerial::write(unsigned char)+0x4c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     604:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\lenovo\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     606:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     608:	ee 89       	ldd	r30, Y+22	; 0x16
     60a:	ff 89       	ldd	r31, Y+23	; 0x17
     60c:	60 83       	st	Z, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:243
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
      #else
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     60e:	e8 89       	ldd	r30, Y+16	; 0x10
     610:	f9 89       	ldd	r31, Y+17	; 0x11
     612:	80 81       	ld	r24, Z
     614:	82 74       	andi	r24, 0x42	; 66
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     616:	80 83       	st	Z, r24
__iRestore():
c:\users\lenovo\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     618:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	08 95       	ret
     62c:	f6 2e       	mov	r15, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     62e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     630:	10 e0       	ldi	r17, 0x00	; 0
     632:	0f 5f       	subi	r16, 0xFF	; 255
     634:	1f 4f       	sbci	r17, 0xFF	; 255
     636:	0f 73       	andi	r16, 0x3F	; 63
     638:	11 27       	eor	r17, r17
     63a:	e0 2e       	mov	r14, r16
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     63c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     63e:	8e 11       	cpse	r24, r14
     640:	0b c0       	rjmp	.+22     	; 0x658 <HardwareSerial::write(unsigned char)+0x78>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	07 fc       	sbrc	r0, 7
     646:	fa cf       	rjmp	.-12     	; 0x63c <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     648:	e8 89       	ldd	r30, Y+16	; 0x10
     64a:	f9 89       	ldd	r31, Y+17	; 0x11
     64c:	80 81       	ld	r24, Z
     64e:	85 ff       	sbrs	r24, 5
     650:	f5 cf       	rjmp	.-22     	; 0x63c <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     652:	ce 01       	movw	r24, r28
     654:	a4 df       	rcall	.-184    	; 0x59e <HardwareSerial::_tx_udr_empty_irq()>
     656:	f2 cf       	rjmp	.-28     	; 0x63c <HardwareSerial::write(unsigned char)+0x5c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     658:	eb 8d       	ldd	r30, Y+27	; 0x1b
     65a:	ec 0f       	add	r30, r28
     65c:	fd 2f       	mov	r31, r29
     65e:	f1 1d       	adc	r31, r1
     660:	e3 5a       	subi	r30, 0xA3	; 163
     662:	ff 4f       	sbci	r31, 0xFF	; 255
     664:	f0 82       	st	Z, r15
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     666:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\lenovo\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     668:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     66a:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     66c:	ea 89       	ldd	r30, Y+18	; 0x12
     66e:	fb 89       	ldd	r31, Y+19	; 0x13
     670:	80 81       	ld	r24, Z
     672:	80 62       	ori	r24, 0x20	; 32
     674:	d0 cf       	rjmp	.-96     	; 0x616 <HardwareSerial::write(unsigned char)+0x36>

00000676 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>:
_ZN5Print5printEPK19__FlashStringHelper.constprop.21():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:44

size_t Print::print(const __FlashStringHelper *ifsh)
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	8c 01       	movw	r16, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:47
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     680:	d0 e0       	ldi	r29, 0x00	; 0
     682:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     684:	f8 01       	movw	r30, r16
     686:	ec 0f       	add	r30, r28
     688:	fd 1f       	adc	r31, r29
     68a:	64 91       	lpm	r22, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
     68c:	66 23       	and	r22, r22
     68e:	39 f0       	breq	.+14     	; 0x69e <Print::print(__FlashStringHelper const*) [clone .constprop.21]+0x28>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
     690:	88 e8       	ldi	r24, 0x88	; 136
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	a5 df       	rcall	.-182    	; 0x5e0 <HardwareSerial::write(unsigned char)>
     696:	89 2b       	or	r24, r25
     698:	11 f0       	breq	.+4      	; 0x69e <Print::print(__FlashStringHelper const*) [clone .constprop.21]+0x28>
     69a:	21 96       	adiw	r28, 0x01	; 1
     69c:	f3 cf       	rjmp	.-26     	; 0x684 <Print::print(__FlashStringHelper const*) [clone .constprop.21]+0xe>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
     69e:	ce 01       	movw	r24, r28
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     6b0:	88 8d       	ldd	r24, Y+24	; 0x18
     6b2:	88 23       	and	r24, r24
     6b4:	b1 f0       	breq	.+44     	; 0x6e2 <HardwareSerial::flush()+0x38>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     6b6:	aa 89       	ldd	r26, Y+18	; 0x12
     6b8:	bb 89       	ldd	r27, Y+19	; 0x13
     6ba:	e8 89       	ldd	r30, Y+16	; 0x10
     6bc:	f9 89       	ldd	r31, Y+17	; 0x11
     6be:	8c 91       	ld	r24, X
     6c0:	85 fd       	sbrc	r24, 5
     6c2:	03 c0       	rjmp	.+6      	; 0x6ca <HardwareSerial::flush()+0x20>
     6c4:	80 81       	ld	r24, Z
     6c6:	86 fd       	sbrc	r24, 6
     6c8:	0c c0       	rjmp	.+24     	; 0x6e2 <HardwareSerial::flush()+0x38>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	07 fc       	sbrc	r0, 7
     6ce:	f7 cf       	rjmp	.-18     	; 0x6be <HardwareSerial::flush()+0x14>
     6d0:	8c 91       	ld	r24, X
     6d2:	85 ff       	sbrs	r24, 5
     6d4:	f2 cf       	rjmp	.-28     	; 0x6ba <HardwareSerial::flush()+0x10>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     6d6:	80 81       	ld	r24, Z
     6d8:	85 ff       	sbrs	r24, 5
     6da:	ed cf       	rjmp	.-38     	; 0x6b6 <HardwareSerial::flush()+0xc>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     6dc:	ce 01       	movw	r24, r28
     6de:	5f df       	rcall	.-322    	; 0x59e <HardwareSerial::_tx_udr_empty_irq()>
     6e0:	ea cf       	rjmp	.-44     	; 0x6b6 <HardwareSerial::flush()+0xc>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <Print::write(char const*) [clone .part.2] [clone .constprop.23]>:
_ZN5Print5writeEPKc.part.2.constprop.23():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     6e8:	fc 01       	movw	r30, r24
     6ea:	01 90       	ld	r0, Z+
     6ec:	00 20       	and	r0, r0
     6ee:	e9 f7       	brne	.-6      	; 0x6ea <Print::write(char const*) [clone .part.2] [clone .constprop.23]+0x2>
     6f0:	31 97       	sbiw	r30, 0x01	; 1
     6f2:	af 01       	movw	r20, r30
     6f4:	48 1b       	sub	r20, r24
     6f6:	59 0b       	sbc	r21, r25
     6f8:	bc 01       	movw	r22, r24
     6fa:	88 e8       	ldi	r24, 0x88	; 136
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	d4 ce       	rjmp	.-600    	; 0x4a8 <Print::write(unsigned char const*, unsigned int)>

00000700 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>:
_ZN5Print7printlnEPK19__FlashStringHelper.constprop.20():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:114
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:116
{
  size_t n = print(ifsh);
     704:	b8 df       	rcall	.-144    	; 0x676 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
     706:	ec 01       	movw	r28, r24
write():
     708:	82 e7       	ldi	r24, 0x72	; 114
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	ed df       	rcall	.-38     	; 0x6e8 <Print::write(char const*) [clone .part.2] [clone .constprop.23]>
_ZN5Print7printlnEPK19__FlashStringHelper.constprop.20():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:119
  n += println();
  return n;
}
     70e:	8c 0f       	add	r24, r28
     710:	9d 1f       	adc	r25, r29
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	08 95       	ret

00000718 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.11]>:
_ZN5Print11printNumberEmh.constprop.11():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     718:	8f 92       	push	r8
     71a:	9f 92       	push	r9
     71c:	af 92       	push	r10
     71e:	bf 92       	push	r11
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	a1 97       	sbiw	r28, 0x21	; 33
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     738:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     73a:	42 30       	cpi	r20, 0x02	; 2
     73c:	08 f4       	brcc	.+2      	; 0x740 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.11]+0x28>
     73e:	4a e0       	ldi	r20, 0x0A	; 10
     740:	8e 01       	movw	r16, r28
     742:	0f 5d       	subi	r16, 0xDF	; 223
     744:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
     746:	84 2e       	mov	r8, r20
     748:	91 2c       	mov	r9, r1
     74a:	b1 2c       	mov	r11, r1
     74c:	a1 2c       	mov	r10, r1
     74e:	a5 01       	movw	r20, r10
     750:	94 01       	movw	r18, r8
     752:	10 d5       	rcall	.+2592   	; 0x1174 <__udivmodsi4>
     754:	e6 2f       	mov	r30, r22
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
     756:	b9 01       	movw	r22, r18
     758:	ca 01       	movw	r24, r20
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     75a:	ea 30       	cpi	r30, 0x0A	; 10
     75c:	ec f4       	brge	.+58     	; 0x798 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.11]+0x80>
     75e:	e0 5d       	subi	r30, 0xD0	; 208
     760:	d8 01       	movw	r26, r16
     762:	ee 93       	st	-X, r30
     764:	8d 01       	movw	r16, r26
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:247
  } while(n);
     766:	23 2b       	or	r18, r19
     768:	24 2b       	or	r18, r20
     76a:	25 2b       	or	r18, r21
     76c:	81 f7       	brne	.-32     	; 0x74e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.11]+0x36>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	80 e0       	ldi	r24, 0x00	; 0
write():
     772:	10 97       	sbiw	r26, 0x00	; 0
     774:	11 f0       	breq	.+4      	; 0x77a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.11]+0x62>
     776:	cd 01       	movw	r24, r26
     778:	b7 df       	rcall	.-146    	; 0x6e8 <Print::write(char const*) [clone .part.2] [clone .constprop.23]>
_ZN5Print11printNumberEmh.constprop.11():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
     77a:	a1 96       	adiw	r28, 0x21	; 33
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	bf 90       	pop	r11
     790:	af 90       	pop	r10
     792:	9f 90       	pop	r9
     794:	8f 90       	pop	r8
     796:	08 95       	ret
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     798:	e9 5c       	subi	r30, 0xC9	; 201
     79a:	e2 cf       	rjmp	.-60     	; 0x760 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.11]+0x48>

0000079c <Print::print(long, int) [clone .part.3] [clone .constprop.10]>:
_ZN5Print5printEli.part.3.constprop.10():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:87
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
     79c:	cf 92       	push	r12
     79e:	df 92       	push	r13
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	6b 01       	movw	r12, r22
     7aa:	7c 01       	movw	r14, r24
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     7ac:	6d e2       	ldi	r22, 0x2D	; 45
     7ae:	88 e8       	ldi	r24, 0x88	; 136
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	16 df       	rcall	.-468    	; 0x5e0 <HardwareSerial::write(unsigned char)>
     7b4:	ec 01       	movw	r28, r24
_ZN5Print5printEli.part.3.constprop.10():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
     7b6:	66 27       	eor	r22, r22
     7b8:	77 27       	eor	r23, r23
     7ba:	cb 01       	movw	r24, r22
     7bc:	6c 19       	sub	r22, r12
     7be:	7d 09       	sbc	r23, r13
     7c0:	8e 09       	sbc	r24, r14
     7c2:	9f 09       	sbc	r25, r15
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
     7c4:	4a e0       	ldi	r20, 0x0A	; 10
     7c6:	a8 df       	rcall	.-176    	; 0x718 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.11]>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:101
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     7c8:	8c 0f       	add	r24, r28
     7ca:	9d 1f       	adc	r25, r29
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	08 95       	ret

000007da <Print::println(int, int) [clone .constprop.7]>:
_ZN5Print7printlnEii.constprop.7():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:159
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     7de:	bc 01       	movw	r22, r24
     7e0:	99 0f       	add	r25, r25
     7e2:	88 0b       	sbc	r24, r24
     7e4:	99 0b       	sbc	r25, r25
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     7e6:	97 ff       	sbrs	r25, 7
     7e8:	0a c0       	rjmp	.+20     	; 0x7fe <Print::println(int, int) [clone .constprop.7]+0x24>
     7ea:	d8 df       	rcall	.-80     	; 0x79c <Print::print(long, int) [clone .part.3] [clone .constprop.10]>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:97
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     7ec:	ec 01       	movw	r28, r24
write():
     7ee:	82 e7       	ldi	r24, 0x72	; 114
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	7a df       	rcall	.-268    	; 0x6e8 <Print::write(char const*) [clone .part.2] [clone .constprop.23]>
_ZN5Print7printlnEii.constprop.7():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:164
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     7f4:	8c 0f       	add	r24, r28
     7f6:	9d 1f       	adc	r25, r29
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     7fe:	4a e0       	ldi	r20, 0x0A	; 10
     800:	8b df       	rcall	.-234    	; 0x718 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.11]>
     802:	f4 cf       	rjmp	.-24     	; 0x7ec <Print::println(int, int) [clone .constprop.7]+0x12>

00000804 <__vector_9>:
__vector_9():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	0f 92       	push	r0
     80c:	11 24       	eor	r1, r1
     80e:	2f 93       	push	r18
     810:	3f 93       	push	r19
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     81a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <timer0_millis>
     81e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <timer0_millis+0x1>
     822:	a0 91 82 00 	lds	r26, 0x0082	; 0x800082 <timer0_millis+0x2>
     826:	b0 91 83 00 	lds	r27, 0x0083	; 0x800083 <timer0_millis+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     82a:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <timer0_fract>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     82e:	26 e0       	ldi	r18, 0x06	; 6
     830:	23 0f       	add	r18, r19
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     832:	2d 37       	cpi	r18, 0x7D	; 125
     834:	68 f1       	brcs	.+90     	; 0x890 <__vector_9+0x8c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     836:	29 e8       	ldi	r18, 0x89	; 137
     838:	23 0f       	add	r18, r19
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     83a:	03 96       	adiw	r24, 0x03	; 3
     83c:	a1 1d       	adc	r26, r1
     83e:	b1 1d       	adc	r27, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     840:	20 93 7f 00 	sts	0x007F, r18	; 0x80007f <timer0_fract>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     844:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <timer0_millis>
     848:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <timer0_millis+0x1>
     84c:	a0 93 82 00 	sts	0x0082, r26	; 0x800082 <timer0_millis+0x2>
     850:	b0 93 83 00 	sts	0x0083, r27	; 0x800083 <timer0_millis+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     854:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <timer0_overflow_count>
     858:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <timer0_overflow_count+0x1>
     85c:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <timer0_overflow_count+0x2>
     860:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <timer0_overflow_count+0x3>
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	a1 1d       	adc	r26, r1
     868:	b1 1d       	adc	r27, r1
     86a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <timer0_overflow_count>
     86e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <timer0_overflow_count+0x1>
     872:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <timer0_overflow_count+0x2>
     876:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <timer0_overflow_count+0x3>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:213
#endif
}
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	3f 91       	pop	r19
     884:	2f 91       	pop	r18
     886:	0f 90       	pop	r0
     888:	0f be       	out	0x3f, r0	; 63
     88a:	0f 90       	pop	r0
     88c:	1f 90       	pop	r1
     88e:	18 95       	reti
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     890:	02 96       	adiw	r24, 0x02	; 2
     892:	a1 1d       	adc	r26, r1
     894:	b1 1d       	adc	r27, r1
     896:	d4 cf       	rjmp	.-88     	; 0x840 <__vector_9+0x3c>

00000898 <__vector_12>:
__vector_12():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	ef 93       	push	r30
     8b8:	ff 93       	push	r31
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     8ba:	88 e8       	ldi	r24, 0x88	; 136
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	6f de       	rcall	.-802    	; 0x59e <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
     8c0:	ff 91       	pop	r31
     8c2:	ef 91       	pop	r30
     8c4:	bf 91       	pop	r27
     8c6:	af 91       	pop	r26
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	7f 91       	pop	r23
     8ce:	6f 91       	pop	r22
     8d0:	5f 91       	pop	r21
     8d2:	4f 91       	pop	r20
     8d4:	3f 91       	pop	r19
     8d6:	2f 91       	pop	r18
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti

000008e2 <__vector_11>:
__vector_11():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     8e2:	1f 92       	push	r1
     8e4:	0f 92       	push	r0
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	0f 92       	push	r0
     8ea:	11 24       	eor	r1, r1
     8ec:	2f 93       	push	r18
     8ee:	8f 93       	push	r24
     8f0:	9f 93       	push	r25
     8f2:	ef 93       	push	r30
     8f4:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     8f6:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <Serial+0x10>
     8fa:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <Serial+0x11>
     8fe:	80 81       	ld	r24, Z
     900:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <Serial+0x16>
     904:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <Serial+0x17>
     908:	82 fd       	sbrc	r24, 2
     90a:	1b c0       	rjmp	.+54     	; 0x942 <__vector_11+0x60>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     90c:	90 81       	ld	r25, Z
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     90e:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <Serial+0x19>
     912:	8f 5f       	subi	r24, 0xFF	; 255
     914:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     916:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <Serial+0x1a>
     91a:	82 17       	cp	r24, r18
     91c:	41 f0       	breq	.+16     	; 0x92e <__vector_11+0x4c>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     91e:	e0 91 a1 00 	lds	r30, 0x00A1	; 0x8000a1 <Serial+0x19>
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	e8 57       	subi	r30, 0x78	; 120
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     92a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <Serial+0x19>
__vector_11():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     92e:	ff 91       	pop	r31
     930:	ef 91       	pop	r30
     932:	9f 91       	pop	r25
     934:	8f 91       	pop	r24
     936:	2f 91       	pop	r18
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	0f 90       	pop	r0
     93e:	1f 90       	pop	r1
     940:	18 95       	reti
_rx_complete_irq():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     942:	80 81       	ld	r24, Z
     944:	f4 cf       	rjmp	.-24     	; 0x92e <__vector_11+0x4c>

00000946 <__vector_6>:
__vector_6():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:81

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	5f 93       	push	r21
     958:	6f 93       	push	r22
     95a:	7f 93       	push	r23
     95c:	8f 93       	push	r24
     95e:	9f 93       	push	r25
     960:	af 93       	push	r26
     962:	bf 93       	push	r27
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	ef 93       	push	r30
     96a:	ff 93       	push	r31
handle_interrupts():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:54

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
     96c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     970:	c0 91 49 01 	lds	r28, 0x0149	; 0x800149 <ServoCount>
     974:	d0 e0       	ldi	r29, 0x00	; 0
     976:	87 ff       	sbrs	r24, 7
     978:	1e c0       	rjmp	.+60     	; 0x9b6 <__vector_6+0x70>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:55
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
     97a:	1d bc       	out	0x2d, r1	; 45
     97c:	1c bc       	out	0x2c, r1	; 44
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:61
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
  }

  Channel[timer]++;    // increment to the next channel
     97e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     982:	8f 5f       	subi	r24, 0xFF	; 255
     984:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:62
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     988:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     98c:	08 2e       	mov	r0, r24
     98e:	00 0c       	add	r0, r0
     990:	99 0b       	sbc	r25, r25
     992:	8c 17       	cp	r24, r28
     994:	9d 07       	cpc	r25, r29
     996:	24 f4       	brge	.+8      	; 0x9a0 <__vector_6+0x5a>
     998:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     99c:	8c 30       	cpi	r24, 0x0C	; 12
     99e:	9c f1       	brlt	.+102    	; 0xa06 <__vector_6+0xc0>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:69
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // it's an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     9a0:	8c b5       	in	r24, 0x2c	; 44
     9a2:	9d b5       	in	r25, 0x2d	; 45
     9a4:	04 96       	adiw	r24, 0x04	; 4
     9a6:	80 32       	cpi	r24, 0x20	; 32
     9a8:	9e 44       	sbci	r25, 0x4E	; 78
     9aa:	08 f4       	brcc	.+2      	; 0x9ae <__vector_6+0x68>
     9ac:	72 c0       	rjmp	.+228    	; 0xa92 <__vector_6+0x14c>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:72
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     9ae:	8c b5       	in	r24, 0x2c	; 44
     9b0:	9d b5       	in	r25, 0x2d	; 45
     9b2:	04 96       	adiw	r24, 0x04	; 4
     9b4:	70 c0       	rjmp	.+224    	; 0xa96 <__vector_6+0x150>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:57
static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )
     9b6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     9ba:	08 2e       	mov	r0, r24
     9bc:	00 0c       	add	r0, r0
     9be:	99 0b       	sbc	r25, r25
     9c0:	8c 17       	cp	r24, r28
     9c2:	9d 07       	cpc	r25, r29
     9c4:	e4 f6       	brge	.-72     	; 0x97e <__vector_6+0x38>
     9c6:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
     9ca:	8e 2f       	mov	r24, r30
     9cc:	ee 0f       	add	r30, r30
     9ce:	99 0b       	sbc	r25, r25
     9d0:	fc 01       	movw	r30, r24
     9d2:	ee 0f       	add	r30, r30
     9d4:	ff 1f       	adc	r31, r31
     9d6:	e8 0f       	add	r30, r24
     9d8:	f9 1f       	adc	r31, r25
     9da:	eb 5d       	subi	r30, 0xDB	; 219
     9dc:	fe 4f       	sbci	r31, 0xFE	; 254
     9de:	80 81       	ld	r24, Z
     9e0:	86 ff       	sbrs	r24, 6
     9e2:	cd cf       	rjmp	.-102    	; 0x97e <__vector_6+0x38>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:58
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated
     9e4:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
     9e8:	8e 2f       	mov	r24, r30
     9ea:	ee 0f       	add	r30, r30
     9ec:	99 0b       	sbc	r25, r25
     9ee:	fc 01       	movw	r30, r24
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	e8 0f       	add	r30, r24
     9f6:	f9 1f       	adc	r31, r25
     9f8:	eb 5d       	subi	r30, 0xDB	; 219
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	80 81       	ld	r24, Z
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	8f 73       	andi	r24, 0x3F	; 63
     a02:	8a dc       	rcall	.-1772   	; 0x318 <digitalWrite>
     a04:	bc cf       	rjmp	.-136    	; 0x97e <__vector_6+0x38>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:63
  }

  Channel[timer]++;    // increment to the next channel
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     a06:	2c b5       	in	r18, 0x2c	; 44
     a08:	3d b5       	in	r19, 0x2d	; 45
     a0a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
     a0e:	8e 2f       	mov	r24, r30
     a10:	ee 0f       	add	r30, r30
     a12:	99 0b       	sbc	r25, r25
     a14:	fc 01       	movw	r30, r24
     a16:	ee 0f       	add	r30, r30
     a18:	ff 1f       	adc	r31, r31
     a1a:	e8 0f       	add	r30, r24
     a1c:	f9 1f       	adc	r31, r25
     a1e:	eb 5d       	subi	r30, 0xDB	; 219
     a20:	fe 4f       	sbci	r31, 0xFE	; 254
     a22:	81 81       	ldd	r24, Z+1	; 0x01
     a24:	92 81       	ldd	r25, Z+2	; 0x02
     a26:	82 0f       	add	r24, r18
     a28:	93 1f       	adc	r25, r19
     a2a:	9b bd       	out	0x2b, r25	; 43
     a2c:	8a bd       	out	0x2a, r24	; 42
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:64
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     a2e:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
     a32:	8e 2f       	mov	r24, r30
     a34:	ee 0f       	add	r30, r30
     a36:	99 0b       	sbc	r25, r25
     a38:	fc 01       	movw	r30, r24
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	e8 0f       	add	r30, r24
     a40:	f9 1f       	adc	r31, r25
     a42:	eb 5d       	subi	r30, 0xDB	; 219
     a44:	fe 4f       	sbci	r31, 0xFE	; 254
     a46:	80 81       	ld	r24, Z
     a48:	86 ff       	sbrs	r24, 6
     a4a:	10 c0       	rjmp	.+32     	; 0xa6c <__vector_6+0x126>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:65
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // it's an active channel so pulse it high
     a4c:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
     a50:	8e 2f       	mov	r24, r30
     a52:	ee 0f       	add	r30, r30
     a54:	99 0b       	sbc	r25, r25
     a56:	fc 01       	movw	r30, r24
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	e8 0f       	add	r30, r24
     a5e:	f9 1f       	adc	r31, r25
     a60:	eb 5d       	subi	r30, 0xDB	; 219
     a62:	fe 4f       	sbci	r31, 0xFE	; 254
     a64:	80 81       	ld	r24, Z
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	8f 73       	andi	r24, 0x3F	; 63
     a6a:	56 dc       	rcall	.-1876   	; 0x318 <digitalWrite>
__vector_6():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:83
// Interrupt handlers for Arduino
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect)
{
  handle_interrupts(_timer1, &TCNT1, &OCR1A);
}
     a6c:	ff 91       	pop	r31
     a6e:	ef 91       	pop	r30
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	bf 91       	pop	r27
     a76:	af 91       	pop	r26
     a78:	9f 91       	pop	r25
     a7a:	8f 91       	pop	r24
     a7c:	7f 91       	pop	r23
     a7e:	6f 91       	pop	r22
     a80:	5f 91       	pop	r21
     a82:	4f 91       	pop	r20
     a84:	3f 91       	pop	r19
     a86:	2f 91       	pop	r18
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti
handle_interrupts():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:70
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // it's an active channel so pulse it high
  }
  else {
    // finished all channels so wait for the refresh period to expire before starting over
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);
     a92:	80 e2       	ldi	r24, 0x20	; 32
     a94:	9e e4       	ldi	r25, 0x4E	; 78
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:72
    else
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     a96:	9b bd       	out	0x2b, r25	; 43
     a98:	8a bd       	out	0x2a, r24	; 42
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:73
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
     aa0:	e5 cf       	rjmp	.-54     	; 0xa6c <__vector_6+0x126>

00000aa2 <global constructors keyed to 65535_0_mind_project_code.ino.cpp.o.1970>:
_GLOBAL__I_65535_0_mind_project_code.ino.cpp.o.1970():
     aa2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <Serial+0x3>
     aa6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <Serial+0x2>
     aaa:	88 ee       	ldi	r24, 0xE8	; 232
     aac:	93 e0       	ldi	r25, 0x03	; 3
     aae:	a0 e0       	ldi	r26, 0x00	; 0
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <Serial+0x4>
     ab6:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <Serial+0x5>
     aba:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <Serial+0x6>
     abe:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <Serial+0x7>
     ac2:	84 e6       	ldi	r24, 0x64	; 100
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <Serial+0x1>
     aca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <Serial>
     ace:	80 e4       	ldi	r24, 0x40	; 64
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <Serial+0xd>
     ad6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <Serial+0xc>
     ada:	29 e2       	ldi	r18, 0x29	; 41
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <Serial+0xf>
     ae2:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <Serial+0xe>
     ae6:	2b e2       	ldi	r18, 0x2B	; 43
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <Serial+0x11>
     aee:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <Serial+0x10>
     af2:	2a e2       	ldi	r18, 0x2A	; 42
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	30 93 9b 00 	sts	0x009B, r19	; 0x80009b <Serial+0x13>
     afa:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <Serial+0x12>
     afe:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <Serial+0x15>
     b02:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <Serial+0x14>
     b06:	8c e2       	ldi	r24, 0x2C	; 44
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <Serial+0x17>
     b0e:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <Serial+0x16>
     b12:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <Serial+0x19>
     b16:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <Serial+0x1a>
     b1a:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <Serial+0x1b>
     b1e:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <Serial+0x1c>
     b22:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <ServoCount>
     b26:	8c 30       	cpi	r24, 0x0C	; 12
     b28:	98 f4       	brcc	.+38     	; 0xb50 <global constructors keyed to 65535_0_mind_project_code.ino.cpp.o.1970+0xae>
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	98 0f       	add	r25, r24
     b2e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <ServoCount>
     b32:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <myservo>
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	fc 01       	movw	r30, r24
     b3a:	ee 0f       	add	r30, r30
     b3c:	ff 1f       	adc	r31, r31
     b3e:	e8 0f       	add	r30, r24
     b40:	f9 1f       	adc	r31, r25
     b42:	eb 5d       	subi	r30, 0xDB	; 219
     b44:	fe 4f       	sbci	r31, 0xFE	; 254
     b46:	8c ed       	ldi	r24, 0xDC	; 220
     b48:	95 e0       	ldi	r25, 0x05	; 5
     b4a:	92 83       	std	Z+2, r25	; 0x02
     b4c:	81 83       	std	Z+1, r24	; 0x01
     b4e:	08 95       	ret
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <myservo>
     b56:	08 95       	ret

00000b58 <main>:
main():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     b58:	78 94       	sei
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
     b5a:	83 b7       	in	r24, 0x33	; 51
     b5c:	83 60       	ori	r24, 0x03	; 3
     b5e:	83 bf       	out	0x33, r24	; 51
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
     b60:	89 b7       	in	r24, 0x39	; 57
     b62:	81 60       	ori	r24, 0x01	; 1
     b64:	89 bf       	out	0x39, r24	; 57
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	9e bd       	out	0x2e, r25	; 46
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     b6a:	8e b5       	in	r24, 0x2e	; 46
     b6c:	81 60       	ori	r24, 0x01	; 1
     b6e:	8e bd       	out	0x2e, r24	; 46
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     b70:	8f b5       	in	r24, 0x2f	; 47
     b72:	81 60       	ori	r24, 0x01	; 1
     b74:	8f bd       	out	0x2f, r24	; 47
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
     b76:	85 b5       	in	r24, 0x25	; 37
     b78:	84 60       	ori	r24, 0x04	; 4
     b7a:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
     b7c:	85 b5       	in	r24, 0x25	; 37
     b7e:	80 64       	ori	r24, 0x40	; 64
     b80:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
     b82:	86 e8       	ldi	r24, 0x86	; 134
     b84:	86 b9       	out	0x06, r24	; 6
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
     b86:	1a b8       	out	0x0a, r1	; 10
begin():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     b88:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <Serial+0x10>
     b8c:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <Serial+0x11>
     b90:	90 83       	st	Z, r25
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b92:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <Serial+0xc>
     b96:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <Serial+0xd>
     b9a:	10 82       	st	Z, r1
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     b9c:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <Serial+0xe>
     ba0:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <Serial+0xf>
     ba4:	97 e6       	ldi	r25, 0x67	; 103
     ba6:	90 83       	st	Z, r25
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     ba8:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <Serial+0x18>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     bac:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <Serial+0x14>
     bb0:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <Serial+0x15>
     bb4:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     bb6:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <Serial+0x12>
     bba:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <Serial+0x13>
     bbe:	80 81       	ld	r24, Z
     bc0:	88 69       	ori	r24, 0x98	; 152
     bc2:	80 83       	st	Z, r24
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     bc4:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <Serial+0x12>
     bc8:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <Serial+0x13>
     bcc:	80 81       	ld	r24, Z
     bce:	8f 7d       	andi	r24, 0xDF	; 223
     bd0:	80 83       	st	Z, r24
init_keypad():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:160
//   }
//   return '\0';  // No key pressed
// }

void init_keypad() {
  pinMode(Keypad_pin, INPUT);
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	83 e1       	ldi	r24, 0x13	; 19
     bd6:	cd db       	rcall	.-2150   	; 0x372 <pinMode>
init_ldr():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:43
  delay(3000);
}

// LDR System
void init_ldr() {
  pinMode(ldr, INPUT);
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	8e e0       	ldi	r24, 0x0E	; 14
     bdc:	ca db       	rcall	.-2156   	; 0x372 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:44
  pinMode(led, OUTPUT);
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	89 e0       	ldi	r24, 0x09	; 9
     be2:	c7 db       	rcall	.-2162   	; 0x372 <pinMode>
init_pir():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:10
#include "mind_project_lib.h"
#include <avr/pgmspace.h>

// PIR System
void init_pir() {
  pinMode(pirPin, INPUT);
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	87 e0       	ldi	r24, 0x07	; 7
     be8:	c4 db       	rcall	.-2168   	; 0x372 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:11
  pinMode(buzzerPin, OUTPUT);
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	86 e0       	ldi	r24, 0x06	; 6
     bee:	c1 db       	rcall	.-2174   	; 0x372 <pinMode>
attach():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:240
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
{
  if(this->servoIndex < MAX_SERVOS ) {
     bf0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <myservo>
     bf4:	8c 30       	cpi	r24, 0x0C	; 12
     bf6:	08 f0       	brcs	.+2      	; 0xbfa <main+0xa2>
     bf8:	4b c0       	rjmp	.+150    	; 0xc90 <main+0x138>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:241
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	8a e0       	ldi	r24, 0x0A	; 10
     bfe:	b9 db       	rcall	.-2190   	; 0x372 <pinMode>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:242
    servos[this->servoIndex].Pin.nbr = pin;
     c00:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <myservo>
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	f9 01       	movw	r30, r18
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	e2 0f       	add	r30, r18
     c10:	f3 1f       	adc	r31, r19
     c12:	eb 5d       	subi	r30, 0xDB	; 219
     c14:	fe 4f       	sbci	r31, 0xFE	; 254
     c16:	90 81       	ld	r25, Z
     c18:	90 7c       	andi	r25, 0xC0	; 192
     c1a:	9a 60       	ori	r25, 0x0A	; 10
     c1c:	90 83       	st	Z, r25
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:244
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 us
     c1e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <myservo+0x1>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:245
    this->max  = (MAX_PULSE_WIDTH - max)/4;
     c22:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <myservo+0x2>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:247
    // initialize the timer if it has not already been initialized
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
     c26:	2c e0       	ldi	r18, 0x0C	; 12
     c28:	62 2f       	mov	r22, r18
     c2a:	63 d5       	rcall	.+2758   	; 0x16f2 <__udivmodqi4>
isTimerActive():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:214

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
     c2c:	82 9f       	mul	r24, r18
     c2e:	b0 01       	movw	r22, r0
     c30:	11 24       	eor	r1, r1
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	ab 01       	movw	r20, r22
     c38:	42 0f       	add	r20, r18
     c3a:	53 1f       	adc	r21, r19
     c3c:	fa 01       	movw	r30, r20
     c3e:	ee 0f       	add	r30, r30
     c40:	ff 1f       	adc	r31, r31
     c42:	e4 0f       	add	r30, r20
     c44:	f5 1f       	adc	r31, r21
     c46:	eb 5d       	subi	r30, 0xDB	; 219
     c48:	fe 4f       	sbci	r31, 0xFE	; 254
     c4a:	90 81       	ld	r25, Z
     c4c:	96 fd       	sbrc	r25, 6
     c4e:	12 c0       	rjmp	.+36     	; 0xc74 <main+0x11c>
     c50:	2f 5f       	subi	r18, 0xFF	; 255
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:213
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
     c54:	2c 30       	cpi	r18, 0x0C	; 12
     c56:	31 05       	cpc	r19, r1
     c58:	71 f7       	brne	.-36     	; 0xc36 <main+0xde>
initISR():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:127


static void initISR(timer16_Sequence_t timer)
{
#if defined (_useTimer1)
  if(timer == _timer1) {
     c5a:	81 11       	cpse	r24, r1
     c5c:	0b c0       	rjmp	.+22     	; 0xc74 <main+0x11c>
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:128
    TCCR1A = 0;             // normal counting mode
     c5e:	1f bc       	out	0x2f, r1	; 47
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:129
    TCCR1B = _BV(CS11);     // set prescaler of 8
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	8e bd       	out	0x2e, r24	; 46
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:130
    TCNT1 = 0;              // clear the timer count
     c64:	1d bc       	out	0x2d, r1	; 45
     c66:	1c bc       	out	0x2c, r1	; 44
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:132
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts
     c68:	88 b7       	in	r24, 0x38	; 56
     c6a:	80 61       	ori	r24, 0x10	; 16
     c6c:	88 bf       	out	0x38, r24	; 56
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:133
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt
     c6e:	89 b7       	in	r24, 0x39	; 57
     c70:	80 61       	ori	r24, 0x10	; 16
     c72:	89 bf       	out	0x39, r24	; 57
attach():
c:\Users\Lenovo\Documents\Arduino\libraries\Servo\src\avr/Servo.cpp:250
    this->max  = (MAX_PULSE_WIDTH - max)/4;
    // initialize the timer if it has not already been initialized
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
     c74:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <myservo>
     c78:	8e 2f       	mov	r24, r30
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	fc 01       	movw	r30, r24
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	e8 0f       	add	r30, r24
     c84:	f9 1f       	adc	r31, r25
     c86:	eb 5d       	subi	r30, 0xDB	; 219
     c88:	fe 4f       	sbci	r31, 0xFE	; 254
     c8a:	80 81       	ld	r24, Z
     c8c:	80 64       	ori	r24, 0x40	; 64
     c8e:	80 83       	st	Z, r24
init_servo():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:27
// Door System (Servo)
Servo myservo;

void init_servo() {
  myservo.attach(servoPin);
  myservo.write(0);  // Initially close the door
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	a7 da       	rcall	.-2738   	; 0x1e4 <Servo::write(int) [clone .constprop.18]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:28
  pinMode(door_btn, INPUT_PULLUP);
     c96:	62 e0       	ldi	r22, 0x02	; 2
     c98:	8d e0       	ldi	r24, 0x0D	; 13
     c9a:	6b db       	rcall	.-2346   	; 0x372 <pinMode>
init_temperature_sys():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:60
  }
}

// Temperature System
void init_temperature_sys() {
  pinMode(ntc_pin, INPUT);
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	8f e0       	ldi	r24, 0x0F	; 15
     ca0:	68 db       	rcall	.-2352   	; 0x372 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:62

  pinMode(redPin, OUTPUT);
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	80 e1       	ldi	r24, 0x10	; 16
     ca6:	65 db       	rcall	.-2358   	; 0x372 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:63
  pinMode(greenPin, OUTPUT);
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	81 e1       	ldi	r24, 0x11	; 17
     cac:	62 db       	rcall	.-2364   	; 0x372 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:64
  pinMode(bluePin, OUTPUT);
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	82 e1       	ldi	r24, 0x12	; 18
     cb2:	5f db       	rcall	.-2370   	; 0x372 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:66

  pinMode(FAN, OUTPUT);
     cb4:	61 e0       	ldi	r22, 0x01	; 1
     cb6:	88 e0       	ldi	r24, 0x08	; 8
     cb8:	5c db       	rcall	.-2376   	; 0x372 <pinMode>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:67
  pinMode(enable, OUTPUT);
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	8b e0       	ldi	r24, 0x0B	; 11
     cbe:	59 db       	rcall	.-2382   	; 0x372 <pinMode>
setup():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:19
  init_keypad();
  init_ldr();
  init_pir();
  init_servo();
  init_temperature_sys();
  Serial.println(F("ENTER PASS:"));
     cc0:	80 e8       	ldi	r24, 0x80	; 128
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	1d dd       	rcall	.-1478   	; 0x700 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:87
          Serial.println(F("Password correct. Door opened."));
        } else {
          Serial.println(F("Password incorrect. Try again."));
        }

        memset(password, '\0', sizeof(password));  // Clear password array
     cc6:	85 e0       	ldi	r24, 0x05	; 5
     cc8:	d8 2e       	mov	r13, r24
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:112
  {
    digitalWrite(pin, HIGH);
  }
  else
  {
    switch(digitalPinToTimer(pin))
     cca:	0a e8       	ldi	r16, 0x8A	; 138
     ccc:	11 e0       	ldi	r17, 0x01	; 1
serialEventRun():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	e9 2e       	mov	r14, r25
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	f9 2e       	mov	r15, r25
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:23
  init_temperature_sys();
  Serial.println(F("ENTER PASS:"));
}

void loop() {
  if (door_state) {
     cd6:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <door_state>
     cda:	88 23       	and	r24, r24
     cdc:	09 f4       	brne	.+2      	; 0xce0 <main+0x188>
     cde:	48 c1       	rjmp	.+656    	; 0xf70 <main+0x418>
servo_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:32
  myservo.write(0);  // Initially close the door
  pinMode(door_btn, INPUT_PULLUP);
}

void servo_sys_activate() {
  myservo.write(90);  // Open the door
     ce0:	8a e5       	ldi	r24, 0x5A	; 90
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	7f da       	rcall	.-2818   	; 0x1e4 <Servo::write(int) [clone .constprop.18]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:33
  delay(1000);        // Keep door open for 3 seconds
     ce6:	68 ee       	ldi	r22, 0xE8	; 232
     ce8:	73 e0       	ldi	r23, 0x03	; 3
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	ac db       	rcall	.-2216   	; 0x448 <delay>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:26
    // Door open logic
    servo_sys_activate();
    Serial.println(F("Door is opened."));
     cf0:	83 e2       	ldi	r24, 0x23	; 35
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	05 dd       	rcall	.-1526   	; 0x700 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:28

    while (door_state) {
     cf6:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <door_state>
     cfa:	88 23       	and	r24, r24
     cfc:	09 f4       	brne	.+2      	; 0xd00 <main+0x1a8>
     cfe:	ed c0       	rjmp	.+474    	; 0xeda <main+0x382>
     d00:	c5 e0       	ldi	r28, 0x05	; 5
     d02:	d0 e0       	ldi	r29, 0x00	; 0
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:71
  pinMode(FAN, OUTPUT);
  pinMode(enable, OUTPUT);
}

void temperature_sys_activate() {
  float average = 0;
     d04:	81 2c       	mov	r8, r1
     d06:	91 2c       	mov	r9, r1
     d08:	54 01       	movw	r10, r8
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:75
  int speed;

  for (int i = 0; i < samplingrate; i++) {
    average += analogRead(ntc_pin);
     d0a:	8f e0       	ldi	r24, 0x0F	; 15
     d0c:	6e db       	rcall	.-2340   	; 0x3ea <analogRead>
     d0e:	bc 01       	movw	r22, r24
     d10:	99 0f       	add	r25, r25
     d12:	88 0b       	sbc	r24, r24
     d14:	99 0b       	sbc	r25, r25
     d16:	60 d3       	rcall	.+1728   	; 0x13d8 <__floatsisf>
     d18:	9b 01       	movw	r18, r22
     d1a:	ac 01       	movw	r20, r24
     d1c:	c5 01       	movw	r24, r10
     d1e:	b4 01       	movw	r22, r8
     d20:	58 d2       	rcall	.+1200   	; 0x11d2 <__addsf3>
     d22:	4b 01       	movw	r8, r22
     d24:	5c 01       	movw	r10, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:76
    delay(10);  // Short delay for analog read
     d26:	6a e0       	ldi	r22, 0x0A	; 10
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	8c db       	rcall	.-2280   	; 0x448 <delay>
     d30:	21 97       	sbiw	r28, 0x01	; 1
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:74

void temperature_sys_activate() {
  float average = 0;
  int speed;

  for (int i = 0; i < samplingrate; i++) {
     d32:	59 f7       	brne	.-42     	; 0xd0a <main+0x1b2>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:79
    average += analogRead(ntc_pin);
    delay(10);  // Short delay for analog read
  }

  average /= samplingrate;
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 ea       	ldi	r20, 0xA0	; 160
     d3a:	50 e4       	ldi	r21, 0x40	; 64
     d3c:	c5 01       	movw	r24, r10
     d3e:	b4 01       	movw	r22, r8
     d40:	b0 d2       	rcall	.+1376   	; 0x12a2 <__divsf3>
     d42:	9b 01       	movw	r18, r22
     d44:	ac 01       	movw	r20, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:80
  average = (1023 / average - 1.0);
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 ec       	ldi	r23, 0xC0	; 192
     d4a:	8f e7       	ldi	r24, 0x7F	; 127
     d4c:	94 e4       	ldi	r25, 0x44	; 68
     d4e:	a9 d2       	rcall	.+1362   	; 0x12a2 <__divsf3>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e8       	ldi	r20, 0x80	; 128
     d56:	5f e3       	ldi	r21, 0x3F	; 63
     d58:	3b d2       	rcall	.+1142   	; 0x11d0 <__subsf3>
     d5a:	9b 01       	movw	r18, r22
     d5c:	ac 01       	movw	r20, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:81
  average = Rref / average;
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e4       	ldi	r23, 0x40	; 64
     d62:	8c e1       	ldi	r24, 0x1C	; 28
     d64:	96 e4       	ldi	r25, 0x46	; 70
     d66:	9d d2       	rcall	.+1338   	; 0x12a2 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:83

  float temperature = average / nominal_resistance;
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e4       	ldi	r19, 0x40	; 64
     d6c:	4c e1       	ldi	r20, 0x1C	; 28
     d6e:	56 e4       	ldi	r21, 0x46	; 70
     d70:	98 d2       	rcall	.+1328   	; 0x12a2 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:84
  temperature = log(temperature);
     d72:	eb d3       	rcall	.+2006   	; 0x154a <log>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:85
  temperature /= beta;
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e4       	ldi	r19, 0x40	; 64
     d78:	43 e5       	ldi	r20, 0x53	; 83
     d7a:	55 e4       	ldi	r21, 0x45	; 69
     d7c:	92 d2       	rcall	.+1316   	; 0x12a2 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:86
  temperature += 1.0 / (nominal_temperature + 273.15);
     d7e:	2f e0       	ldi	r18, 0x0F	; 15
     d80:	3f ec       	ldi	r19, 0xCF	; 207
     d82:	4b e5       	ldi	r20, 0x5B	; 91
     d84:	5b e3       	ldi	r21, 0x3B	; 59
     d86:	25 d2       	rcall	.+1098   	; 0x11d2 <__addsf3>
     d88:	9b 01       	movw	r18, r22
     d8a:	ac 01       	movw	r20, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:87
  temperature = 1.0 / temperature;
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	80 e8       	ldi	r24, 0x80	; 128
     d92:	9f e3       	ldi	r25, 0x3F	; 63
     d94:	86 d2       	rcall	.+1292   	; 0x12a2 <__divsf3>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:88
  temperature -= 273.15;
     d96:	23 e3       	ldi	r18, 0x33	; 51
     d98:	33 e9       	ldi	r19, 0x93	; 147
     d9a:	48 e8       	ldi	r20, 0x88	; 136
     d9c:	53 e4       	ldi	r21, 0x43	; 67
     d9e:	18 d2       	rcall	.+1072   	; 0x11d0 <__subsf3>
     da0:	4b 01       	movw	r8, r22
     da2:	5c 01       	movw	r10, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:91

  // Control fan and LEDs based on temperature
  if (temperature < 20) {
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 ea       	ldi	r20, 0xA0	; 160
     daa:	51 e4       	ldi	r21, 0x41	; 65
     dac:	76 d2       	rcall	.+1260   	; 0x129a <__cmpsf2>
     dae:	87 ff       	sbrs	r24, 7
     db0:	11 c0       	rjmp	.+34     	; 0xdd4 <main+0x27c>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:92
    digitalWrite(FAN, LOW);  // Turn off fan
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	88 e0       	ldi	r24, 0x08	; 8
     db6:	b0 da       	rcall	.-2720   	; 0x318 <digitalWrite>
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	8b e0       	ldi	r24, 0x0B	; 11
     dbc:	da da       	rcall	.-2636   	; 0x372 <pinMode>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:104
  if (val == 0)
  {
    digitalWrite(pin, LOW);
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	8b e0       	ldi	r24, 0x0B	; 11
     dc2:	aa da       	rcall	.-2732   	; 0x318 <digitalWrite>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:94
    analogWrite(enable, 0);
    digitalWrite(redPin, LOW);
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	80 e1       	ldi	r24, 0x10	; 16
     dc8:	a7 da       	rcall	.-2738   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:95
    digitalWrite(bluePin, HIGH);
     dca:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:108
    digitalWrite(greenPin, HIGH);
  } else if (temperature > 30) {
    digitalWrite(FAN, HIGH);   // Ensure fan is on
    analogWrite(enable, 255);  // Full speed
    digitalWrite(redPin, HIGH);
    digitalWrite(bluePin, LOW);
     dcc:	82 e1       	ldi	r24, 0x12	; 18
     dce:	a4 da       	rcall	.-2744   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:109
    digitalWrite(greenPin, LOW);
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	3b c0       	rjmp	.+118    	; 0xe4a <main+0x2f2>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:97
    digitalWrite(FAN, LOW);  // Turn off fan
    analogWrite(enable, 0);
    digitalWrite(redPin, LOW);
    digitalWrite(bluePin, HIGH);
    digitalWrite(greenPin, LOW);
  } else if (temperature >= 20 && temperature <= 30) {
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 ea       	ldi	r20, 0xA0	; 160
     dda:	51 e4       	ldi	r21, 0x41	; 65
     ddc:	c5 01       	movw	r24, r10
     dde:	b4 01       	movw	r22, r8
     de0:	ab d3       	rcall	.+1878   	; 0x1538 <__gesf2>
     de2:	87 fd       	sbrc	r24, 7
     de4:	aa c0       	rjmp	.+340    	; 0xf3a <main+0x3e2>
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 ef       	ldi	r20, 0xF0	; 240
     dec:	51 e4       	ldi	r21, 0x41	; 65
     dee:	c5 01       	movw	r24, r10
     df0:	b4 01       	movw	r22, r8
     df2:	53 d2       	rcall	.+1190   	; 0x129a <__cmpsf2>
     df4:	18 16       	cp	r1, r24
     df6:	0c f4       	brge	.+2      	; 0xdfa <main+0x2a2>
     df8:	a0 c0       	rjmp	.+320    	; 0xf3a <main+0x3e2>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:98
    digitalWrite(FAN, HIGH);  // Turn on fan
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	88 e0       	ldi	r24, 0x08	; 8
     dfe:	8c da       	rcall	.-2792   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:99
    speed = map(temperature, 20, 30, 0, 255);
     e00:	c5 01       	movw	r24, r10
     e02:	b4 01       	movw	r22, r8
     e04:	b6 d2       	rcall	.+1388   	; 0x1372 <__fixsfsi>
map():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/WMath.cpp:54
     e06:	9b 01       	movw	r18, r22
     e08:	ac 01       	movw	r20, r24
     e0a:	24 51       	subi	r18, 0x14	; 20
     e0c:	31 09       	sbc	r19, r1
     e0e:	41 09       	sbc	r20, r1
     e10:	51 09       	sbc	r21, r1
     e12:	af ef       	ldi	r26, 0xFF	; 255
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	9e d1       	rcall	.+828    	; 0x1154 <__muluhisi3>
     e18:	2a e0       	ldi	r18, 0x0A	; 10
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	7d d1       	rcall	.+762    	; 0x111c <__divmodsi4>
     e22:	c2 2e       	mov	r12, r18
     e24:	73 2e       	mov	r7, r19
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:99
     e26:	c2 2f       	mov	r28, r18
     e28:	d3 2f       	mov	r29, r19
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	8b e0       	ldi	r24, 0x0B	; 11
     e2e:	a1 da       	rcall	.-2750   	; 0x372 <pinMode>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:102
  if (val == 0)
     e30:	20 97       	sbiw	r28, 0x00	; 0
     e32:	09 f0       	breq	.+2      	; 0xe36 <main+0x2de>
     e34:	5c c0       	rjmp	.+184    	; 0xeee <main+0x396>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:104
  {
    digitalWrite(pin, LOW);
     e36:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:108
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
     e38:	8b e0       	ldi	r24, 0x0B	; 11
     e3a:	6e da       	rcall	.-2852   	; 0x318 <digitalWrite>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:101
    analogWrite(enable, speed);  // Adjust fan speed
    digitalWrite(redPin, LOW);
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	80 e1       	ldi	r24, 0x10	; 16
     e40:	6b da       	rcall	.-2858   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:102
    digitalWrite(bluePin, LOW);
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	82 e1       	ldi	r24, 0x12	; 18
     e46:	68 da       	rcall	.-2864   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:103
    digitalWrite(greenPin, HIGH);
     e48:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:109
  } else if (temperature > 30) {
    digitalWrite(FAN, HIGH);   // Ensure fan is on
    analogWrite(enable, 255);  // Full speed
    digitalWrite(redPin, HIGH);
    digitalWrite(bluePin, LOW);
    digitalWrite(greenPin, LOW);
     e4a:	81 e1       	ldi	r24, 0x11	; 17
     e4c:	65 da       	rcall	.-2870   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:111
  }
  Serial.print(F("Temp: "));
     e4e:	8f e8       	ldi	r24, 0x8F	; 143
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	11 dc       	rcall	.-2014   	; 0x676 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:112
  Serial.print((int)temperature);
     e54:	c5 01       	movw	r24, r10
     e56:	b4 01       	movw	r22, r8
     e58:	8c d2       	rcall	.+1304   	; 0x1372 <__fixsfsi>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:79
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     e5a:	07 2e       	mov	r0, r23
     e5c:	00 0c       	add	r0, r0
     e5e:	88 0b       	sbc	r24, r24
     e60:	99 0b       	sbc	r25, r25
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     e62:	97 ff       	sbrs	r25, 7
     e64:	82 c0       	rjmp	.+260    	; 0xf6a <main+0x412>
     e66:	9a dc       	rcall	.-1740   	; 0x79c <Print::print(long, int) [clone .part.3] [clone .constprop.10]>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:113
  Serial.println(F("*C"));
     e68:	8c e8       	ldi	r24, 0x8C	; 140
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	49 dc       	rcall	.-1902   	; 0x700 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
ldr_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:48
  pinMode(ldr, INPUT);
  pinMode(led, OUTPUT);
}

void ldr_sys_activate() {
  int input = analogRead(ldr);
     e6e:	8e e0       	ldi	r24, 0x0E	; 14
     e70:	bc da       	rcall	.-2696   	; 0x3ea <analogRead>
     e72:	ec 01       	movw	r28, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:49
  Serial.print(F("light level:"));
     e74:	86 e9       	ldi	r24, 0x96	; 150
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	fe db       	rcall	.-2052   	; 0x676 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:50
  Serial.println(input);  // Print LDR value for debugging
     e7a:	ce 01       	movw	r24, r28
     e7c:	ae dc       	rcall	.-1700   	; 0x7da <Print::println(int, int) [clone .constprop.7]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:52
  if (input < 500) {
    digitalWrite(led, HIGH);
     e7e:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:51

void ldr_sys_activate() {
  int input = analogRead(ldr);
  Serial.print(F("light level:"));
  Serial.println(input);  // Print LDR value for debugging
  if (input < 500) {
     e80:	c4 3f       	cpi	r28, 0xF4	; 244
     e82:	d1 40       	sbci	r29, 0x01	; 1
     e84:	0c f0       	brlt	.+2      	; 0xe88 <main+0x330>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:54
    digitalWrite(led, HIGH);
  } else {
    digitalWrite(led, LOW);
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	89 e0       	ldi	r24, 0x09	; 9
     e8a:	46 da       	rcall	.-2932   	; 0x318 <digitalWrite>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:33
      temperature_sys_activate();
      ldr_sys_activate();

      // Check for button press to close the door
      if (digitalRead(door_btn) == LOW) {
     e8c:	8d e0       	ldi	r24, 0x0D	; 13
     e8e:	1c da       	rcall	.-3016   	; 0x2c8 <digitalRead>
     e90:	89 2b       	or	r24, r25
     e92:	09 f0       	breq	.+2      	; 0xe96 <main+0x33e>
     e94:	30 cf       	rjmp	.-416    	; 0xcf6 <main+0x19e>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:34
        door_state = false;
     e96:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <door_state>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:37

        // Turn off the systems
        digitalWrite(FAN, LOW);
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	88 e0       	ldi	r24, 0x08	; 8
     e9e:	3c da       	rcall	.-2952   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:38
        digitalWrite(enable, LOW);
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	8b e0       	ldi	r24, 0x0B	; 11
     ea4:	39 da       	rcall	.-2958   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:39
        digitalWrite(redPin, LOW);
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	80 e1       	ldi	r24, 0x10	; 16
     eaa:	36 da       	rcall	.-2964   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:40
        digitalWrite(bluePin, LOW);
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	82 e1       	ldi	r24, 0x12	; 18
     eb0:	33 da       	rcall	.-2970   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:41
        digitalWrite(greenPin, LOW);
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	81 e1       	ldi	r24, 0x11	; 17
     eb6:	30 da       	rcall	.-2976   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:42
        digitalWrite(led, LOW);
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	89 e0       	ldi	r24, 0x09	; 9
     ebc:	2d da       	rcall	.-2982   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:44

        Serial.println(F("Door is closed."));
     ebe:	83 e1       	ldi	r24, 0x13	; 19
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	1e dc       	rcall	.-1988   	; 0x700 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:45
        Serial.println(F("ENTER PASS:"));
     ec4:	87 e0       	ldi	r24, 0x07	; 7
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	1b dc       	rcall	.-1994   	; 0x700 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
close_door():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:37
  myservo.write(90);  // Open the door
  delay(1000);        // Keep door open for 3 seconds
}

void close_door() {
  myservo.write(0);  // Close the door
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	8a d9       	rcall	.-3308   	; 0x1e4 <Servo::write(int) [clone .constprop.18]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:38
  delay(3000);
     ed0:	68 eb       	ldi	r22, 0xB8	; 184
     ed2:	7b e0       	ldi	r23, 0x0B	; 11
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	b7 da       	rcall	.-2706   	; 0x448 <delay>
serialEventRun():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/HardwareSerial.cpp:67
     eda:	e1 14       	cp	r14, r1
     edc:	f1 04       	cpc	r15, r1
     ede:	09 f4       	brne	.+2      	; 0xee2 <main+0x38a>
     ee0:	fa ce       	rjmp	.-524    	; 0xcd6 <main+0x17e>
     ee2:	4c db       	rcall	.-2408   	; 0x57c <Serial0_available()>
     ee4:	88 23       	and	r24, r24
     ee6:	09 f4       	brne	.+2      	; 0xeea <main+0x392>
     ee8:	f6 ce       	rjmp	.-532    	; 0xcd6 <main+0x17e>
     eea:	8a d8       	rcall	.-3820   	; 0x0 <__vectors>
     eec:	f4 ce       	rjmp	.-536    	; 0xcd6 <main+0x17e>
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:106
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
     eee:	cf 3f       	cpi	r28, 0xFF	; 255
     ef0:	d1 05       	cpc	r29, r1
     ef2:	11 f4       	brne	.+4      	; 0xef8 <main+0x3a0>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, HIGH);
     ef4:	61 e0       	ldi	r22, 0x01	; 1
     ef6:	a0 cf       	rjmp	.-192    	; 0xe38 <main+0x2e0>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:112
  }
  else
  {
    switch(digitalPinToTimer(pin))
     ef8:	f8 01       	movw	r30, r16
     efa:	84 91       	lpm	r24, Z
     efc:	85 30       	cpi	r24, 0x05	; 5
     efe:	61 f0       	breq	.+24     	; 0xf18 <main+0x3c0>
     f00:	87 30       	cpi	r24, 0x07	; 7
     f02:	91 f0       	breq	.+36     	; 0xf28 <main+0x3d0>
     f04:	84 30       	cpi	r24, 0x04	; 4
     f06:	a9 f4       	brne	.+42     	; 0xf32 <main+0x3da>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:148
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
     f08:	8f b5       	in	r24, 0x2f	; 47
     f0a:	80 68       	ori	r24, 0x80	; 128
     f0c:	8f bd       	out	0x2f, r24	; 47
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:149
        OCR1A = val; // set pwm duty
     f0e:	8c 2d       	mov	r24, r12
     f10:	97 2d       	mov	r25, r7
     f12:	9b bd       	out	0x2b, r25	; 43
     f14:	8a bd       	out	0x2a, r24	; 42
     f16:	92 cf       	rjmp	.-220    	; 0xe3c <main+0x2e4>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:156
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
     f18:	8f b5       	in	r24, 0x2f	; 47
     f1a:	80 62       	ori	r24, 0x20	; 32
     f1c:	8f bd       	out	0x2f, r24	; 47
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:157
        OCR1B = val; // set pwm duty
     f1e:	8c 2d       	mov	r24, r12
     f20:	97 2d       	mov	r25, r7
     f22:	99 bd       	out	0x29, r25	; 41
     f24:	88 bd       	out	0x28, r24	; 40
     f26:	8a cf       	rjmp	.-236    	; 0xe3c <main+0x2e4>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:172
      #endif

      #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        // connect pwm to pin on timer 2
        TCCR2 |= _BV(COM21);
     f28:	85 b5       	in	r24, 0x25	; 37
     f2a:	80 62       	ori	r24, 0x20	; 32
     f2c:	85 bd       	out	0x25, r24	; 37
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:173
        OCR2 = val; // set pwm duty
     f2e:	c3 bc       	out	0x23, r12	; 35
     f30:	85 cf       	rjmp	.-246    	; 0xe3c <main+0x2e4>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:292
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
     f32:	c0 38       	cpi	r28, 0x80	; 128
     f34:	d1 05       	cpc	r29, r1
     f36:	f4 f6       	brge	.-68     	; 0xef4 <main+0x39c>
     f38:	7e cf       	rjmp	.-260    	; 0xe36 <main+0x2de>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:104
    speed = map(temperature, 20, 30, 0, 255);
    analogWrite(enable, speed);  // Adjust fan speed
    digitalWrite(redPin, LOW);
    digitalWrite(bluePin, LOW);
    digitalWrite(greenPin, HIGH);
  } else if (temperature > 30) {
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 ef       	ldi	r20, 0xF0	; 240
     f40:	51 e4       	ldi	r21, 0x41	; 65
     f42:	c5 01       	movw	r24, r10
     f44:	b4 01       	movw	r22, r8
     f46:	f8 d2       	rcall	.+1520   	; 0x1538 <__gesf2>
     f48:	18 16       	cp	r1, r24
     f4a:	0c f0       	brlt	.+2      	; 0xf4e <main+0x3f6>
     f4c:	80 cf       	rjmp	.-256    	; 0xe4e <main+0x2f6>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:105
    digitalWrite(FAN, HIGH);   // Ensure fan is on
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	88 e0       	ldi	r24, 0x08	; 8
     f52:	e2 d9       	rcall	.-3132   	; 0x318 <digitalWrite>
analogWrite():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	8b e0       	ldi	r24, 0x0B	; 11
     f58:	0c da       	rcall	.-3048   	; 0x372 <pinMode>
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	8b e0       	ldi	r24, 0x0B	; 11
     f5e:	dc d9       	rcall	.-3144   	; 0x318 <digitalWrite>
temperature_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:107
    analogWrite(enable, 255);  // Full speed
    digitalWrite(redPin, HIGH);
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	80 e1       	ldi	r24, 0x10	; 16
     f64:	d9 d9       	rcall	.-3150   	; 0x318 <digitalWrite>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:108
    digitalWrite(bluePin, LOW);
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	31 cf       	rjmp	.-414    	; 0xdcc <main+0x274>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:97
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     f6a:	4a e0       	ldi	r20, 0x0A	; 10
     f6c:	d5 db       	rcall	.-2134   	; 0x718 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.11]>
     f6e:	7c cf       	rjmp	.-264    	; 0xe68 <main+0x310>
getKey():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:164
void init_keypad() {
  pinMode(Keypad_pin, INPUT);
}

char getKey() {
  int reading = analogRead(Keypad_pin);
     f70:	83 e1       	ldi	r24, 0x13	; 19
     f72:	3b da       	rcall	.-2954   	; 0x3ea <analogRead>
     f74:	ec 01       	movw	r28, r24
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:165
  Serial.println(reading);
     f76:	31 dc       	rcall	.-1950   	; 0x7da <Print::println(int, int) [clone .constprop.7]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:167

  switch (reading) {
     f78:	c3 37       	cpi	r28, 0x73	; 115
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	d8 07       	cpc	r29, r24
     f7e:	6c f5       	brge	.+90     	; 0xfda <main+0x482>
     f80:	c5 35       	cpi	r28, 0x55	; 85
     f82:	a1 e0       	ldi	r26, 0x01	; 1
     f84:	da 07       	cpc	r29, r26
     f86:	0c f0       	brlt	.+2      	; 0xf8a <main+0x432>
     f88:	a3 c0       	rjmp	.+326    	; 0x10d0 <main+0x578>
     f8a:	cc 3b       	cpi	r28, 0xBC	; 188
     f8c:	d1 05       	cpc	r29, r1
     f8e:	ac f4       	brge	.+42     	; 0xfba <main+0x462>
     f90:	cb 3a       	cpi	r28, 0xAB	; 171
     f92:	d1 05       	cpc	r29, r1
     f94:	0c f0       	brlt	.+2      	; 0xf98 <main+0x440>
     f96:	96 c0       	rjmp	.+300    	; 0x10c4 <main+0x56c>
     f98:	ce 34       	cpi	r28, 0x4E	; 78
     f9a:	d1 05       	cpc	r29, r1
     f9c:	4c f4       	brge	.+18     	; 0xfb0 <main+0x458>
     f9e:	c9 33       	cpi	r28, 0x39	; 57
     fa0:	d1 05       	cpc	r29, r1
     fa2:	0c f0       	brlt	.+2      	; 0xfa6 <main+0x44e>
     fa4:	a1 c0       	rjmp	.+322    	; 0x10e8 <main+0x590>
     fa6:	6f 97       	sbiw	r28, 0x1f	; 31
     fa8:	08 f4       	brcc	.+2      	; 0xfac <main+0x454>
     faa:	3f c0       	rjmp	.+126    	; 0x102a <main+0x4d2>
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:201
    case 526 ... 540:
      return '3';
    case 541 ... 560:
      return 'A';
    default:
      return '\0';
     fac:	c0 e0       	ldi	r28, 0x00	; 0
     fae:	3e c0       	rjmp	.+124    	; 0x102c <main+0x4d4>
getKey():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:167

char getKey() {
  int reading = analogRead(Keypad_pin);
  Serial.println(reading);

  switch (reading) {
     fb0:	ce 36       	cpi	r28, 0x6E	; 110
     fb2:	d1 05       	cpc	r29, r1
     fb4:	dc f3       	brlt	.-10     	; 0xfac <main+0x454>
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:173
    case 0 ... 30:
      return '*';
    case 57 ... 77:
      return '0';
    case 110 ... 170:
      return '#';
     fb6:	c3 e2       	ldi	r28, 0x23	; 35
     fb8:	39 c0       	rjmp	.+114    	; 0x102c <main+0x4d4>
getKey():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:167

char getKey() {
  int reading = analogRead(Keypad_pin);
  Serial.println(reading);

  switch (reading) {
     fba:	cd 32       	cpi	r28, 0x2D	; 45
     fbc:	b1 e0       	ldi	r27, 0x01	; 1
     fbe:	db 07       	cpc	r29, r27
     fc0:	0c f0       	brlt	.+2      	; 0xfc4 <main+0x46c>
     fc2:	84 c0       	rjmp	.+264    	; 0x10cc <main+0x574>
     fc4:	ce 30       	cpi	r28, 0x0E	; 14
     fc6:	e1 e0       	ldi	r30, 0x01	; 1
     fc8:	de 07       	cpc	r29, r30
     fca:	0c f0       	brlt	.+2      	; 0xfce <main+0x476>
     fcc:	7d c0       	rjmp	.+250    	; 0x10c8 <main+0x570>
     fce:	c0 5f       	subi	r28, 0xF0	; 240
     fd0:	d1 09       	sbc	r29, r1
     fd2:	65 97       	sbiw	r28, 0x15	; 21
     fd4:	58 f7       	brcc	.-42     	; 0xfac <main+0x454>
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:177
    case 110 ... 170:
      return '#';
    case 171 ... 187:
      return 'D';
    case 240 ... 260:
      return '7';
     fd6:	c7 e3       	ldi	r28, 0x37	; 55
     fd8:	29 c0       	rjmp	.+82     	; 0x102c <main+0x4d4>
getKey():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:167

char getKey() {
  int reading = analogRead(Keypad_pin);
  Serial.println(reading);

  switch (reading) {
     fda:	c1 3e       	cpi	r28, 0xE1	; 225
     fdc:	f1 e0       	ldi	r31, 0x01	; 1
     fde:	df 07       	cpc	r29, r31
     fe0:	84 f4       	brge	.+32     	; 0x1002 <main+0x4aa>
     fe2:	cd 3c       	cpi	r28, 0xCD	; 205
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	d8 07       	cpc	r29, r24
     fe8:	0c f0       	brlt	.+2      	; 0xfec <main+0x494>
     fea:	78 c0       	rjmp	.+240    	; 0x10dc <main+0x584>
     fec:	c9 3b       	cpi	r28, 0xB9	; 185
     fee:	a1 e0       	ldi	r26, 0x01	; 1
     ff0:	da 07       	cpc	r29, r26
     ff2:	0c f0       	brlt	.+2      	; 0xff6 <main+0x49e>
     ff4:	71 c0       	rjmp	.+226    	; 0x10d8 <main+0x580>
     ff6:	cb 39       	cpi	r28, 0x9B	; 155
     ff8:	d1 40       	sbci	r29, 0x01	; 1
     ffa:	0c f4       	brge	.+2      	; 0xffe <main+0x4a6>
     ffc:	6b c0       	rjmp	.+214    	; 0x10d4 <main+0x57c>
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:187
    case 341 ... 370:
      return 'C';
    case 371 ... 410:
      return '4';
    case 411 ... 440:
      return '5';
     ffe:	c5 e3       	ldi	r28, 0x35	; 53
    1000:	15 c0       	rjmp	.+42     	; 0x102c <main+0x4d4>
getKey():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:167

char getKey() {
  int reading = analogRead(Keypad_pin);
  Serial.println(reading);

  switch (reading) {
    1002:	ce 30       	cpi	r28, 0x0E	; 14
    1004:	e2 e0       	ldi	r30, 0x02	; 2
    1006:	de 07       	cpc	r29, r30
    1008:	34 f4       	brge	.+12     	; 0x1016 <main+0x4be>
    100a:	cf 3f       	cpi	r28, 0xFF	; 255
    100c:	d1 40       	sbci	r29, 0x01	; 1
    100e:	0c f4       	brge	.+2      	; 0x1012 <main+0x4ba>
    1010:	67 c0       	rjmp	.+206    	; 0x10e0 <main+0x588>
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:195
    case 461 ... 480:
      return 'B';
    case 481 ... 510:
      return '1';
    case 511 ... 525:
      return '2';
    1012:	c2 e3       	ldi	r28, 0x32	; 50
    1014:	0b c0       	rjmp	.+22     	; 0x102c <main+0x4d4>
getKey():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:167

char getKey() {
  int reading = analogRead(Keypad_pin);
  Serial.println(reading);

  switch (reading) {
    1016:	cd 31       	cpi	r28, 0x1D	; 29
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	d8 07       	cpc	r29, r24
    101c:	0c f4       	brge	.+2      	; 0x1020 <main+0x4c8>
    101e:	62 c0       	rjmp	.+196    	; 0x10e4 <main+0x58c>
    1020:	c1 33       	cpi	r28, 0x31	; 49
    1022:	d2 40       	sbci	r29, 0x02	; 2
    1024:	1c f6       	brge	.-122    	; 0xfac <main+0x454>
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:199
    case 511 ... 525:
      return '2';
    case 526 ... 540:
      return '3';
    case 541 ... 560:
      return 'A';
    1026:	c1 e4       	ldi	r28, 0x41	; 65
    1028:	01 c0       	rjmp	.+2      	; 0x102c <main+0x4d4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:169
  int reading = analogRead(Keypad_pin);
  Serial.println(reading);

  switch (reading) {
    case 0 ... 30:
      return '*';
    102a:	ca e2       	ldi	r28, 0x2A	; 42
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:58
    if (face_rec) {
      door_state = true;
    } else {
      // Keypad input for password
      char key = getKey();
      delay(150);  // Debounce
    102c:	66 e9       	ldi	r22, 0x96	; 150
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	09 da       	rcall	.-3054   	; 0x448 <delay>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:60

      if (key != '\0' && i < 4) {  // Ensure password index does not exceed
    1036:	cc 23       	and	r28, r28
    1038:	b9 f0       	breq	.+46     	; 0x1068 <main+0x510>
    103a:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <i>
    103e:	e4 30       	cpi	r30, 0x04	; 4
    1040:	98 f4       	brcc	.+38     	; 0x1068 <main+0x510>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:61
        password[i] = key;
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	e8 58       	subi	r30, 0x88	; 136
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	c0 83       	st	Z, r28
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:62
        Serial.print(F("Key Pressed: "));
    104a:	89 ef       	ldi	r24, 0xF9	; 249
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	13 db       	rcall	.-2522   	; 0x676 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
print():
C:\Users\Lenovo\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.2\cores\MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1050:	6c 2f       	mov	r22, r28
    1052:	88 e8       	ldi	r24, 0x88	; 136
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	c4 da       	rcall	.-2680   	; 0x5e0 <HardwareSerial::write(unsigned char)>
write():
    1058:	82 e7       	ldi	r24, 0x72	; 114
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	45 db       	rcall	.-2422   	; 0x6e8 <Print::write(char const*) [clone .part.2] [clone .constprop.23]>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:64
        Serial.println(key);
        i++;
    105e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <i>
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <i>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:67
      }

      if (i == 4) {
    1068:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <i>
    106c:	84 30       	cpi	r24, 0x04	; 4
    106e:	09 f0       	breq	.+2      	; 0x1072 <main+0x51a>
    1070:	43 c0       	rjmp	.+134    	; 0x10f8 <main+0x5a0>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:68
        password[4] = '\0';  // Null-terminate the string
    1072:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <password+0x4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:69
        Serial.print(F("Entered Password: "));
    1076:	86 ee       	ldi	r24, 0xE6	; 230
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	fd da       	rcall	.-2566   	; 0x676 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
write():
    107c:	88 e7       	ldi	r24, 0x78	; 120
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	33 db       	rcall	.-2458   	; 0x6e8 <Print::write(char const*) [clone .part.2] [clone .constprop.23]>
    1082:	82 e7       	ldi	r24, 0x72	; 114
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	30 db       	rcall	.-2464   	; 0x6e8 <Print::write(char const*) [clone .part.2] [clone .constprop.23]>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:73
        Serial.println(password);

        // Compare entered password with saved password in flash memory
        if (strcmp_P(password, saved_pass) == 0) {  // Use strcmp_P to compare with PROGMEM
    1088:	61 ee       	ldi	r22, 0xE1	; 225
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	88 e7       	ldi	r24, 0x78	; 120
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	3c d0       	rcall	.+120    	; 0x110a <strcmp_P>
    1092:	89 2b       	or	r24, r25
    1094:	59 f5       	brne	.+86     	; 0x10ec <main+0x594>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:74
          password_flag = true;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <password_flag>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:80
        } else {
          password_flag = false;
        }

        // Handle password check result
        if (password_flag) {
    109c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <password_flag>
    10a0:	88 23       	and	r24, r24
    10a2:	39 f1       	breq	.+78     	; 0x10f2 <main+0x59a>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:81
          door_state = true;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <door_state>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:82
          Serial.println(F("Password correct. Door opened."));
    10aa:	82 ec       	ldi	r24, 0xC2	; 194
    10ac:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:84
        } else {
          Serial.println(F("Password incorrect. Try again."));
    10ae:	28 db       	rcall	.-2480   	; 0x700 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:87
        }

        memset(password, '\0', sizeof(password));  // Clear password array
    10b0:	e8 e7       	ldi	r30, 0x78	; 120
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	df 01       	movw	r26, r30
    10b6:	8d 2d       	mov	r24, r13
    10b8:	1d 92       	st	X+, r1
    10ba:	8a 95       	dec	r24
    10bc:	e9 f7       	brne	.-6      	; 0x10b8 <main+0x560>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:88
        i = 0;                                     // Reset password input index
    10be:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <i>
    10c2:	0b cf       	rjmp	.-490    	; 0xeda <main+0x382>
main():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:175
    case 57 ... 77:
      return '0';
    case 110 ... 170:
      return '#';
    case 171 ... 187:
      return 'D';
    10c4:	c4 e4       	ldi	r28, 0x44	; 68
    10c6:	b2 cf       	rjmp	.-156    	; 0x102c <main+0x4d4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:179
    case 240 ... 260:
      return '7';
    case 270 ... 300:
      return '8';
    10c8:	c8 e3       	ldi	r28, 0x38	; 56
    10ca:	b0 cf       	rjmp	.-160    	; 0x102c <main+0x4d4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:181
    case 301 ... 340:
      return '9';
    10cc:	c9 e3       	ldi	r28, 0x39	; 57
    10ce:	ae cf       	rjmp	.-164    	; 0x102c <main+0x4d4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:183
    case 341 ... 370:
      return 'C';
    10d0:	c3 e4       	ldi	r28, 0x43	; 67
    10d2:	ac cf       	rjmp	.-168    	; 0x102c <main+0x4d4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:185
    case 371 ... 410:
      return '4';
    10d4:	c4 e3       	ldi	r28, 0x34	; 52
    10d6:	aa cf       	rjmp	.-172    	; 0x102c <main+0x4d4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:189
    case 411 ... 440:
      return '5';
    case 441 ... 460:
      return '6';
    10d8:	c6 e3       	ldi	r28, 0x36	; 54
    10da:	a8 cf       	rjmp	.-176    	; 0x102c <main+0x4d4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:191
    case 461 ... 480:
      return 'B';
    10dc:	c2 e4       	ldi	r28, 0x42	; 66
    10de:	a6 cf       	rjmp	.-180    	; 0x102c <main+0x4d4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:193
    case 481 ... 510:
      return '1';
    10e0:	c1 e3       	ldi	r28, 0x31	; 49
    10e2:	a4 cf       	rjmp	.-184    	; 0x102c <main+0x4d4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:197
    case 511 ... 525:
      return '2';
    case 526 ... 540:
      return '3';
    10e4:	c3 e3       	ldi	r28, 0x33	; 51
    10e6:	a2 cf       	rjmp	.-188    	; 0x102c <main+0x4d4>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:171

  switch (reading) {
    case 0 ... 30:
      return '*';
    case 57 ... 77:
      return '0';
    10e8:	c0 e3       	ldi	r28, 0x30	; 48
    10ea:	a0 cf       	rjmp	.-192    	; 0x102c <main+0x4d4>
loop():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:76

        // Compare entered password with saved password in flash memory
        if (strcmp_P(password, saved_pass) == 0) {  // Use strcmp_P to compare with PROGMEM
          password_flag = true;
        } else {
          password_flag = false;
    10ec:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <password_flag>
    10f0:	d5 cf       	rjmp	.-86     	; 0x109c <main+0x544>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_code.ino:84
        // Handle password check result
        if (password_flag) {
          door_state = true;
          Serial.println(F("Password correct. Door opened."));
        } else {
          Serial.println(F("Password incorrect. Try again."));
    10f2:	83 ea       	ldi	r24, 0xA3	; 163
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	db cf       	rjmp	.-74     	; 0x10ae <main+0x556>
pir_sys_activate():
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:15
  pinMode(pirPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
}

void pir_sys_activate() {
  if (digitalRead(pirPin)) {
    10f8:	87 e0       	ldi	r24, 0x07	; 7
    10fa:	e6 d8       	rcall	.-3636   	; 0x2c8 <digitalRead>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:16
    digitalWrite(buzzerPin, HIGH);  // Motion detected
    10fc:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:15
  pinMode(pirPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
}

void pir_sys_activate() {
  if (digitalRead(pirPin)) {
    10fe:	89 2b       	or	r24, r25
    1100:	09 f4       	brne	.+2      	; 0x1104 <main+0x5ac>
C:\Users\Lenovo\Desktop\mindCloud\last_prject_mind\ARDUINO_IDE_CODE\mind_project_code/mind_project_lib.cpp:18
    digitalWrite(buzzerPin, HIGH);  // Motion detected
  } else {
    digitalWrite(buzzerPin, LOW);  // No motion
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	86 e0       	ldi	r24, 0x06	; 6
    1106:	08 d9       	rcall	.-3568   	; 0x318 <digitalWrite>
    1108:	e8 ce       	rjmp	.-560    	; 0xeda <main+0x382>

0000110a <strcmp_P>:
strcmp_P():
    110a:	fb 01       	movw	r30, r22
    110c:	dc 01       	movw	r26, r24
    110e:	8d 91       	ld	r24, X+
    1110:	05 90       	lpm	r0, Z+
    1112:	80 19       	sub	r24, r0
    1114:	01 10       	cpse	r0, r1
    1116:	d9 f3       	breq	.-10     	; 0x110e <strcmp_P+0x4>
    1118:	99 0b       	sbc	r25, r25
    111a:	08 95       	ret

0000111c <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    111c:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    111e:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    1120:	16 f4       	brtc	.+4      	; 0x1126 <__divmodsi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    1122:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    1124:	0f d0       	rcall	.+30     	; 0x1144 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    1126:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    1128:	05 d0       	rcall	.+10     	; 0x1134 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    112a:	24 d0       	rcall	.+72     	; 0x1174 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    112c:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    112e:	02 d0       	rcall	.+4      	; 0x1134 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    1130:	46 f4       	brtc	.+16     	; 0x1142 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    1132:	08 c0       	rjmp	.+16     	; 0x1144 <__negsi2>

00001134 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    1134:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    1136:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    1138:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    113a:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    113e:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    1140:	5f 4f       	sbci	r21, 0xFF	; 255

00001142 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    1142:	08 95       	ret

00001144 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    1144:	90 95       	com	r25
    1146:	80 95       	com	r24
    1148:	70 95       	com	r23
    114a:	61 95       	neg	r22
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
    114e:	8f 4f       	sbci	r24, 0xFF	; 255
    1150:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    1152:	08 95       	ret

00001154 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1154:	31 d0       	rcall	.+98     	; 0x11b8 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1156:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1158:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    115a:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    115c:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    115e:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1160:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1162:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1164:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1166:	08 95       	ret

00001168 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    1168:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    116a:	f4 cf       	rjmp	.-24     	; 0x1154 <__muluhisi3>

0000116c <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    116c:	f3 df       	rcall	.-26     	; 0x1154 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    116e:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    1170:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    1172:	08 95       	ret

00001174 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1174:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1176:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1178:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    117a:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    117c:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    117e:	0d c0       	rjmp	.+26     	; 0x119a <__udivmodsi4_ep>

00001180 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1180:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1182:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1184:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1186:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1188:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    118a:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    118c:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    118e:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1190:	20 f0       	brcs	.+8      	; 0x119a <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1192:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1194:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1196:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1198:	f5 0b       	sbc	r31, r21

0000119a <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    119a:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    119c:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    119e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    11a0:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    11a2:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    11a4:	69 f7       	brne	.-38     	; 0x1180 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    11a6:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    11a8:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    11aa:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    11ac:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    11ae:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    11b0:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    11b2:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    11b4:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    11b6:	08 95       	ret

000011b8 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    11b8:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    11ba:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    11bc:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    11be:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    11c0:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:578
    11c2:	01 d0       	rcall	.+2      	; 0x11c6 <__umulhisi3+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    11c4:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    11c6:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    11c8:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    11ca:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    11cc:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    11ce:	08 95       	ret

000011d0 <__subsf3>:
__subsf3():
    11d0:	50 58       	subi	r21, 0x80	; 128

000011d2 <__addsf3>:
    11d2:	bb 27       	eor	r27, r27
    11d4:	aa 27       	eor	r26, r26
    11d6:	0e d0       	rcall	.+28     	; 0x11f4 <__addsf3x>
    11d8:	75 c1       	rjmp	.+746    	; 0x14c4 <__fp_round>
__addsf3():
    11da:	66 d1       	rcall	.+716    	; 0x14a8 <__fp_pscA>
    11dc:	30 f0       	brcs	.+12     	; 0x11ea <__addsf3+0x18>
    11de:	6b d1       	rcall	.+726    	; 0x14b6 <__fp_pscB>
    11e0:	20 f0       	brcs	.+8      	; 0x11ea <__addsf3+0x18>
    11e2:	31 f4       	brne	.+12     	; 0x11f0 <__addsf3+0x1e>
    11e4:	9f 3f       	cpi	r25, 0xFF	; 255
    11e6:	11 f4       	brne	.+4      	; 0x11ec <__addsf3+0x1a>
    11e8:	1e f4       	brtc	.+6      	; 0x11f0 <__addsf3+0x1e>
    11ea:	5b c1       	rjmp	.+694    	; 0x14a2 <__fp_nan>
    11ec:	0e f4       	brtc	.+2      	; 0x11f0 <__addsf3+0x1e>
    11ee:	e0 95       	com	r30
    11f0:	e7 fb       	bst	r30, 7
    11f2:	51 c1       	rjmp	.+674    	; 0x1496 <__fp_inf>

000011f4 <__addsf3x>:
__addsf3x():
    11f4:	e9 2f       	mov	r30, r25
    11f6:	77 d1       	rcall	.+750    	; 0x14e6 <__fp_split3>
    11f8:	80 f3       	brcs	.-32     	; 0x11da <__addsf3+0x8>
    11fa:	ba 17       	cp	r27, r26
    11fc:	62 07       	cpc	r22, r18
    11fe:	73 07       	cpc	r23, r19
    1200:	84 07       	cpc	r24, r20
    1202:	95 07       	cpc	r25, r21
    1204:	18 f0       	brcs	.+6      	; 0x120c <__addsf3x+0x18>
    1206:	71 f4       	brne	.+28     	; 0x1224 <__addsf3x+0x30>
    1208:	9e f5       	brtc	.+102    	; 0x1270 <__addsf3x+0x7c>
    120a:	8f c1       	rjmp	.+798    	; 0x152a <__fp_zero>
    120c:	0e f4       	brtc	.+2      	; 0x1210 <__addsf3x+0x1c>
    120e:	e0 95       	com	r30
    1210:	0b 2e       	mov	r0, r27
    1212:	ba 2f       	mov	r27, r26
    1214:	a0 2d       	mov	r26, r0
    1216:	0b 01       	movw	r0, r22
    1218:	b9 01       	movw	r22, r18
    121a:	90 01       	movw	r18, r0
    121c:	0c 01       	movw	r0, r24
    121e:	ca 01       	movw	r24, r20
    1220:	a0 01       	movw	r20, r0
    1222:	11 24       	eor	r1, r1
    1224:	ff 27       	eor	r31, r31
    1226:	59 1b       	sub	r21, r25
    1228:	99 f0       	breq	.+38     	; 0x1250 <__addsf3x+0x5c>
    122a:	59 3f       	cpi	r21, 0xF9	; 249
    122c:	50 f4       	brcc	.+20     	; 0x1242 <__addsf3x+0x4e>
    122e:	50 3e       	cpi	r21, 0xE0	; 224
    1230:	68 f1       	brcs	.+90     	; 0x128c <__addsf3x+0x98>
    1232:	1a 16       	cp	r1, r26
    1234:	f0 40       	sbci	r31, 0x00	; 0
    1236:	a2 2f       	mov	r26, r18
    1238:	23 2f       	mov	r18, r19
    123a:	34 2f       	mov	r19, r20
    123c:	44 27       	eor	r20, r20
    123e:	58 5f       	subi	r21, 0xF8	; 248
    1240:	f3 cf       	rjmp	.-26     	; 0x1228 <__addsf3x+0x34>
    1242:	46 95       	lsr	r20
    1244:	37 95       	ror	r19
    1246:	27 95       	ror	r18
    1248:	a7 95       	ror	r26
    124a:	f0 40       	sbci	r31, 0x00	; 0
    124c:	53 95       	inc	r21
    124e:	c9 f7       	brne	.-14     	; 0x1242 <__addsf3x+0x4e>
    1250:	7e f4       	brtc	.+30     	; 0x1270 <__addsf3x+0x7c>
    1252:	1f 16       	cp	r1, r31
    1254:	ba 0b       	sbc	r27, r26
    1256:	62 0b       	sbc	r22, r18
    1258:	73 0b       	sbc	r23, r19
    125a:	84 0b       	sbc	r24, r20
    125c:	ba f0       	brmi	.+46     	; 0x128c <__addsf3x+0x98>
    125e:	91 50       	subi	r25, 0x01	; 1
    1260:	a1 f0       	breq	.+40     	; 0x128a <__addsf3x+0x96>
    1262:	ff 0f       	add	r31, r31
    1264:	bb 1f       	adc	r27, r27
    1266:	66 1f       	adc	r22, r22
    1268:	77 1f       	adc	r23, r23
    126a:	88 1f       	adc	r24, r24
    126c:	c2 f7       	brpl	.-16     	; 0x125e <__addsf3x+0x6a>
    126e:	0e c0       	rjmp	.+28     	; 0x128c <__addsf3x+0x98>
    1270:	ba 0f       	add	r27, r26
    1272:	62 1f       	adc	r22, r18
    1274:	73 1f       	adc	r23, r19
    1276:	84 1f       	adc	r24, r20
    1278:	48 f4       	brcc	.+18     	; 0x128c <__addsf3x+0x98>
    127a:	87 95       	ror	r24
    127c:	77 95       	ror	r23
    127e:	67 95       	ror	r22
    1280:	b7 95       	ror	r27
    1282:	f7 95       	ror	r31
    1284:	9e 3f       	cpi	r25, 0xFE	; 254
    1286:	08 f0       	brcs	.+2      	; 0x128a <__addsf3x+0x96>
    1288:	b3 cf       	rjmp	.-154    	; 0x11f0 <__addsf3+0x1e>
    128a:	93 95       	inc	r25
    128c:	88 0f       	add	r24, r24
    128e:	08 f0       	brcs	.+2      	; 0x1292 <__addsf3x+0x9e>
    1290:	99 27       	eor	r25, r25
    1292:	ee 0f       	add	r30, r30
    1294:	97 95       	ror	r25
    1296:	87 95       	ror	r24
    1298:	08 95       	ret

0000129a <__cmpsf2>:
    129a:	d9 d0       	rcall	.+434    	; 0x144e <__fp_cmp>
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <__cmpsf2+0x6>
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	08 95       	ret

000012a2 <__divsf3>:
    12a2:	0c d0       	rcall	.+24     	; 0x12bc <__divsf3x>
    12a4:	0f c1       	rjmp	.+542    	; 0x14c4 <__fp_round>
    12a6:	07 d1       	rcall	.+526    	; 0x14b6 <__fp_pscB>
    12a8:	40 f0       	brcs	.+16     	; 0x12ba <__divsf3+0x18>
    12aa:	fe d0       	rcall	.+508    	; 0x14a8 <__fp_pscA>
    12ac:	30 f0       	brcs	.+12     	; 0x12ba <__divsf3+0x18>
    12ae:	21 f4       	brne	.+8      	; 0x12b8 <__divsf3+0x16>
    12b0:	5f 3f       	cpi	r21, 0xFF	; 255
    12b2:	19 f0       	breq	.+6      	; 0x12ba <__divsf3+0x18>
__divsf3():
    12b4:	f0 c0       	rjmp	.+480    	; 0x1496 <__fp_inf>
    12b6:	51 11       	cpse	r21, r1
    12b8:	39 c1       	rjmp	.+626    	; 0x152c <__fp_szero>
    12ba:	f3 c0       	rjmp	.+486    	; 0x14a2 <__fp_nan>

000012bc <__divsf3x>:
__divsf3x():
    12bc:	14 d1       	rcall	.+552    	; 0x14e6 <__fp_split3>
    12be:	98 f3       	brcs	.-26     	; 0x12a6 <__divsf3+0x4>

000012c0 <__divsf3_pse>:
    12c0:	99 23       	and	r25, r25
    12c2:	c9 f3       	breq	.-14     	; 0x12b6 <__divsf3+0x14>
    12c4:	55 23       	and	r21, r21
    12c6:	b1 f3       	breq	.-20     	; 0x12b4 <__divsf3+0x12>
    12c8:	95 1b       	sub	r25, r21
    12ca:	55 0b       	sbc	r21, r21
    12cc:	bb 27       	eor	r27, r27
    12ce:	aa 27       	eor	r26, r26
    12d0:	62 17       	cp	r22, r18
    12d2:	73 07       	cpc	r23, r19
    12d4:	84 07       	cpc	r24, r20
    12d6:	38 f0       	brcs	.+14     	; 0x12e6 <__divsf3_pse+0x26>
    12d8:	9f 5f       	subi	r25, 0xFF	; 255
    12da:	5f 4f       	sbci	r21, 0xFF	; 255
    12dc:	22 0f       	add	r18, r18
    12de:	33 1f       	adc	r19, r19
    12e0:	44 1f       	adc	r20, r20
    12e2:	aa 1f       	adc	r26, r26
    12e4:	a9 f3       	breq	.-22     	; 0x12d0 <__divsf3_pse+0x10>
    12e6:	33 d0       	rcall	.+102    	; 0x134e <__divsf3_pse+0x8e>
    12e8:	0e 2e       	mov	r0, r30
    12ea:	3a f0       	brmi	.+14     	; 0x12fa <__divsf3_pse+0x3a>
    12ec:	e0 e8       	ldi	r30, 0x80	; 128
    12ee:	30 d0       	rcall	.+96     	; 0x1350 <__divsf3_pse+0x90>
    12f0:	91 50       	subi	r25, 0x01	; 1
    12f2:	50 40       	sbci	r21, 0x00	; 0
    12f4:	e6 95       	lsr	r30
    12f6:	00 1c       	adc	r0, r0
    12f8:	ca f7       	brpl	.-14     	; 0x12ec <__divsf3_pse+0x2c>
    12fa:	29 d0       	rcall	.+82     	; 0x134e <__divsf3_pse+0x8e>
    12fc:	fe 2f       	mov	r31, r30
    12fe:	27 d0       	rcall	.+78     	; 0x134e <__divsf3_pse+0x8e>
    1300:	66 0f       	add	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	88 1f       	adc	r24, r24
    1306:	bb 1f       	adc	r27, r27
    1308:	26 17       	cp	r18, r22
    130a:	37 07       	cpc	r19, r23
    130c:	48 07       	cpc	r20, r24
    130e:	ab 07       	cpc	r26, r27
    1310:	b0 e8       	ldi	r27, 0x80	; 128
    1312:	09 f0       	breq	.+2      	; 0x1316 <__divsf3_pse+0x56>
    1314:	bb 0b       	sbc	r27, r27
    1316:	80 2d       	mov	r24, r0
    1318:	bf 01       	movw	r22, r30
    131a:	ff 27       	eor	r31, r31
    131c:	93 58       	subi	r25, 0x83	; 131
    131e:	5f 4f       	sbci	r21, 0xFF	; 255
    1320:	2a f0       	brmi	.+10     	; 0x132c <__divsf3_pse+0x6c>
    1322:	9e 3f       	cpi	r25, 0xFE	; 254
    1324:	51 05       	cpc	r21, r1
    1326:	68 f0       	brcs	.+26     	; 0x1342 <__divsf3_pse+0x82>
    1328:	b6 c0       	rjmp	.+364    	; 0x1496 <__fp_inf>
    132a:	00 c1       	rjmp	.+512    	; 0x152c <__fp_szero>
    132c:	5f 3f       	cpi	r21, 0xFF	; 255
    132e:	ec f3       	brlt	.-6      	; 0x132a <__divsf3_pse+0x6a>
    1330:	98 3e       	cpi	r25, 0xE8	; 232
    1332:	dc f3       	brlt	.-10     	; 0x132a <__divsf3_pse+0x6a>
    1334:	86 95       	lsr	r24
    1336:	77 95       	ror	r23
    1338:	67 95       	ror	r22
    133a:	b7 95       	ror	r27
    133c:	f7 95       	ror	r31
    133e:	9f 5f       	subi	r25, 0xFF	; 255
    1340:	c9 f7       	brne	.-14     	; 0x1334 <__divsf3_pse+0x74>
    1342:	88 0f       	add	r24, r24
    1344:	91 1d       	adc	r25, r1
    1346:	96 95       	lsr	r25
    1348:	87 95       	ror	r24
    134a:	97 f9       	bld	r25, 7
    134c:	08 95       	ret
    134e:	e1 e0       	ldi	r30, 0x01	; 1
    1350:	66 0f       	add	r22, r22
    1352:	77 1f       	adc	r23, r23
    1354:	88 1f       	adc	r24, r24
    1356:	bb 1f       	adc	r27, r27
    1358:	62 17       	cp	r22, r18
    135a:	73 07       	cpc	r23, r19
    135c:	84 07       	cpc	r24, r20
    135e:	ba 07       	cpc	r27, r26
    1360:	20 f0       	brcs	.+8      	; 0x136a <__divsf3_pse+0xaa>
    1362:	62 1b       	sub	r22, r18
    1364:	73 0b       	sbc	r23, r19
    1366:	84 0b       	sbc	r24, r20
    1368:	ba 0b       	sbc	r27, r26
    136a:	ee 1f       	adc	r30, r30
    136c:	88 f7       	brcc	.-30     	; 0x1350 <__divsf3_pse+0x90>
    136e:	e0 95       	com	r30
    1370:	08 95       	ret

00001372 <__fixsfsi>:
    1372:	04 d0       	rcall	.+8      	; 0x137c <__fixunssfsi>
    1374:	68 94       	set
    1376:	b1 11       	cpse	r27, r1
    1378:	d9 c0       	rjmp	.+434    	; 0x152c <__fp_szero>
    137a:	08 95       	ret

0000137c <__fixunssfsi>:
    137c:	bc d0       	rcall	.+376    	; 0x14f6 <__fp_splitA>
    137e:	88 f0       	brcs	.+34     	; 0x13a2 <__fixunssfsi+0x26>
    1380:	9f 57       	subi	r25, 0x7F	; 127
    1382:	90 f0       	brcs	.+36     	; 0x13a8 <__fixunssfsi+0x2c>
    1384:	b9 2f       	mov	r27, r25
    1386:	99 27       	eor	r25, r25
__fixunssfsi():
    1388:	b7 51       	subi	r27, 0x17	; 23
    138a:	a0 f0       	brcs	.+40     	; 0x13b4 <__fixunssfsi+0x38>
    138c:	d1 f0       	breq	.+52     	; 0x13c2 <__fixunssfsi+0x46>
    138e:	66 0f       	add	r22, r22
    1390:	77 1f       	adc	r23, r23
    1392:	88 1f       	adc	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	1a f0       	brmi	.+6      	; 0x139e <__fixunssfsi+0x22>
    1398:	ba 95       	dec	r27
    139a:	c9 f7       	brne	.-14     	; 0x138e <__fixunssfsi+0x12>
    139c:	12 c0       	rjmp	.+36     	; 0x13c2 <__fixunssfsi+0x46>
    139e:	b1 30       	cpi	r27, 0x01	; 1
    13a0:	81 f0       	breq	.+32     	; 0x13c2 <__fixunssfsi+0x46>
    13a2:	c3 d0       	rcall	.+390    	; 0x152a <__fp_zero>
    13a4:	b1 e0       	ldi	r27, 0x01	; 1
    13a6:	08 95       	ret
    13a8:	c0 c0       	rjmp	.+384    	; 0x152a <__fp_zero>
    13aa:	67 2f       	mov	r22, r23
    13ac:	78 2f       	mov	r23, r24
    13ae:	88 27       	eor	r24, r24
    13b0:	b8 5f       	subi	r27, 0xF8	; 248
    13b2:	39 f0       	breq	.+14     	; 0x13c2 <__fixunssfsi+0x46>
    13b4:	b9 3f       	cpi	r27, 0xF9	; 249
    13b6:	cc f3       	brlt	.-14     	; 0x13aa <__fixunssfsi+0x2e>
    13b8:	86 95       	lsr	r24
    13ba:	77 95       	ror	r23
    13bc:	67 95       	ror	r22
    13be:	b3 95       	inc	r27
    13c0:	d9 f7       	brne	.-10     	; 0x13b8 <__fixunssfsi+0x3c>
    13c2:	3e f4       	brtc	.+14     	; 0x13d2 <__fixunssfsi+0x56>
    13c4:	90 95       	com	r25
    13c6:	80 95       	com	r24
    13c8:	70 95       	com	r23
    13ca:	61 95       	neg	r22
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	8f 4f       	sbci	r24, 0xFF	; 255
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	08 95       	ret

000013d4 <__floatunsisf>:
__floatunsisf():
    13d4:	e8 94       	clt
    13d6:	09 c0       	rjmp	.+18     	; 0x13ea <__floatsisf+0x12>

000013d8 <__floatsisf>:
    13d8:	97 fb       	bst	r25, 7
    13da:	3e f4       	brtc	.+14     	; 0x13ea <__floatsisf+0x12>
    13dc:	90 95       	com	r25
    13de:	80 95       	com	r24
    13e0:	70 95       	com	r23
    13e2:	61 95       	neg	r22
    13e4:	7f 4f       	sbci	r23, 0xFF	; 255
    13e6:	8f 4f       	sbci	r24, 0xFF	; 255
    13e8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ea:	99 23       	and	r25, r25
    13ec:	a9 f0       	breq	.+42     	; 0x1418 <__floatsisf+0x40>
    13ee:	f9 2f       	mov	r31, r25
    13f0:	96 e9       	ldi	r25, 0x96	; 150
    13f2:	bb 27       	eor	r27, r27
    13f4:	93 95       	inc	r25
    13f6:	f6 95       	lsr	r31
    13f8:	87 95       	ror	r24
    13fa:	77 95       	ror	r23
    13fc:	67 95       	ror	r22
    13fe:	b7 95       	ror	r27
    1400:	f1 11       	cpse	r31, r1
    1402:	f8 cf       	rjmp	.-16     	; 0x13f4 <__floatsisf+0x1c>
    1404:	fa f4       	brpl	.+62     	; 0x1444 <__floatsisf+0x6c>
    1406:	bb 0f       	add	r27, r27
    1408:	11 f4       	brne	.+4      	; 0x140e <__floatsisf+0x36>
    140a:	60 ff       	sbrs	r22, 0
    140c:	1b c0       	rjmp	.+54     	; 0x1444 <__floatsisf+0x6c>
    140e:	6f 5f       	subi	r22, 0xFF	; 255
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	8f 4f       	sbci	r24, 0xFF	; 255
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	16 c0       	rjmp	.+44     	; 0x1444 <__floatsisf+0x6c>
    1418:	88 23       	and	r24, r24
    141a:	11 f0       	breq	.+4      	; 0x1420 <__floatsisf+0x48>
    141c:	96 e9       	ldi	r25, 0x96	; 150
    141e:	11 c0       	rjmp	.+34     	; 0x1442 <__floatsisf+0x6a>
    1420:	77 23       	and	r23, r23
    1422:	21 f0       	breq	.+8      	; 0x142c <__floatsisf+0x54>
    1424:	9e e8       	ldi	r25, 0x8E	; 142
    1426:	87 2f       	mov	r24, r23
    1428:	76 2f       	mov	r23, r22
    142a:	05 c0       	rjmp	.+10     	; 0x1436 <__floatsisf+0x5e>
    142c:	66 23       	and	r22, r22
    142e:	71 f0       	breq	.+28     	; 0x144c <__floatsisf+0x74>
    1430:	96 e8       	ldi	r25, 0x86	; 134
    1432:	86 2f       	mov	r24, r22
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	2a f0       	brmi	.+10     	; 0x1444 <__floatsisf+0x6c>
    143a:	9a 95       	dec	r25
    143c:	66 0f       	add	r22, r22
    143e:	77 1f       	adc	r23, r23
    1440:	88 1f       	adc	r24, r24
    1442:	da f7       	brpl	.-10     	; 0x143a <__floatsisf+0x62>
    1444:	88 0f       	add	r24, r24
    1446:	96 95       	lsr	r25
    1448:	87 95       	ror	r24
    144a:	97 f9       	bld	r25, 7
    144c:	08 95       	ret

0000144e <__fp_cmp>:
__fp_cmp():
    144e:	99 0f       	add	r25, r25
    1450:	00 08       	sbc	r0, r0
    1452:	55 0f       	add	r21, r21
    1454:	aa 0b       	sbc	r26, r26
    1456:	e0 e8       	ldi	r30, 0x80	; 128
    1458:	fe ef       	ldi	r31, 0xFE	; 254
    145a:	16 16       	cp	r1, r22
    145c:	17 06       	cpc	r1, r23
    145e:	e8 07       	cpc	r30, r24
    1460:	f9 07       	cpc	r31, r25
    1462:	c0 f0       	brcs	.+48     	; 0x1494 <__fp_cmp+0x46>
    1464:	12 16       	cp	r1, r18
    1466:	13 06       	cpc	r1, r19
    1468:	e4 07       	cpc	r30, r20
    146a:	f5 07       	cpc	r31, r21
    146c:	98 f0       	brcs	.+38     	; 0x1494 <__fp_cmp+0x46>
    146e:	62 1b       	sub	r22, r18
    1470:	73 0b       	sbc	r23, r19
    1472:	84 0b       	sbc	r24, r20
    1474:	95 0b       	sbc	r25, r21
    1476:	39 f4       	brne	.+14     	; 0x1486 <__fp_cmp+0x38>
    1478:	0a 26       	eor	r0, r26
    147a:	61 f0       	breq	.+24     	; 0x1494 <__fp_cmp+0x46>
    147c:	23 2b       	or	r18, r19
    147e:	24 2b       	or	r18, r20
    1480:	25 2b       	or	r18, r21
    1482:	21 f4       	brne	.+8      	; 0x148c <__fp_cmp+0x3e>
    1484:	08 95       	ret
    1486:	0a 26       	eor	r0, r26
    1488:	09 f4       	brne	.+2      	; 0x148c <__fp_cmp+0x3e>
    148a:	a1 40       	sbci	r26, 0x01	; 1
    148c:	a6 95       	lsr	r26
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	81 1d       	adc	r24, r1
    1492:	81 1d       	adc	r24, r1
    1494:	08 95       	ret

00001496 <__fp_inf>:
__fp_inf():
    1496:	97 f9       	bld	r25, 7
    1498:	9f 67       	ori	r25, 0x7F	; 127
    149a:	80 e8       	ldi	r24, 0x80	; 128
    149c:	70 e0       	ldi	r23, 0x00	; 0
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	08 95       	ret

000014a2 <__fp_nan>:
__fp_nan():
    14a2:	9f ef       	ldi	r25, 0xFF	; 255
    14a4:	80 ec       	ldi	r24, 0xC0	; 192
    14a6:	08 95       	ret

000014a8 <__fp_pscA>:
__fp_pscA():
    14a8:	00 24       	eor	r0, r0
    14aa:	0a 94       	dec	r0
    14ac:	16 16       	cp	r1, r22
    14ae:	17 06       	cpc	r1, r23
    14b0:	18 06       	cpc	r1, r24
    14b2:	09 06       	cpc	r0, r25
    14b4:	08 95       	ret

000014b6 <__fp_pscB>:
__fp_pscB():
    14b6:	00 24       	eor	r0, r0
    14b8:	0a 94       	dec	r0
    14ba:	12 16       	cp	r1, r18
    14bc:	13 06       	cpc	r1, r19
    14be:	14 06       	cpc	r1, r20
    14c0:	05 06       	cpc	r0, r21
    14c2:	08 95       	ret

000014c4 <__fp_round>:
__fp_round():
    14c4:	09 2e       	mov	r0, r25
    14c6:	03 94       	inc	r0
    14c8:	00 0c       	add	r0, r0
    14ca:	11 f4       	brne	.+4      	; 0x14d0 <__fp_round+0xc>
    14cc:	88 23       	and	r24, r24
    14ce:	52 f0       	brmi	.+20     	; 0x14e4 <__fp_round+0x20>
    14d0:	bb 0f       	add	r27, r27
    14d2:	40 f4       	brcc	.+16     	; 0x14e4 <__fp_round+0x20>
    14d4:	bf 2b       	or	r27, r31
    14d6:	11 f4       	brne	.+4      	; 0x14dc <__fp_round+0x18>
    14d8:	60 ff       	sbrs	r22, 0
    14da:	04 c0       	rjmp	.+8      	; 0x14e4 <__fp_round+0x20>
    14dc:	6f 5f       	subi	r22, 0xFF	; 255
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	8f 4f       	sbci	r24, 0xFF	; 255
    14e2:	9f 4f       	sbci	r25, 0xFF	; 255
    14e4:	08 95       	ret

000014e6 <__fp_split3>:
__fp_split3():
    14e6:	57 fd       	sbrc	r21, 7
    14e8:	90 58       	subi	r25, 0x80	; 128
    14ea:	44 0f       	add	r20, r20
    14ec:	55 1f       	adc	r21, r21
    14ee:	59 f0       	breq	.+22     	; 0x1506 <__fp_splitA+0x10>
    14f0:	5f 3f       	cpi	r21, 0xFF	; 255
    14f2:	71 f0       	breq	.+28     	; 0x1510 <__fp_splitA+0x1a>
    14f4:	47 95       	ror	r20

000014f6 <__fp_splitA>:
    14f6:	88 0f       	add	r24, r24
    14f8:	97 fb       	bst	r25, 7
    14fa:	99 1f       	adc	r25, r25
    14fc:	61 f0       	breq	.+24     	; 0x1516 <__fp_splitA+0x20>
    14fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1500:	79 f0       	breq	.+30     	; 0x1520 <__fp_splitA+0x2a>
    1502:	87 95       	ror	r24
    1504:	08 95       	ret
    1506:	12 16       	cp	r1, r18
    1508:	13 06       	cpc	r1, r19
    150a:	14 06       	cpc	r1, r20
    150c:	55 1f       	adc	r21, r21
    150e:	f2 cf       	rjmp	.-28     	; 0x14f4 <__fp_split3+0xe>
    1510:	46 95       	lsr	r20
    1512:	f1 df       	rcall	.-30     	; 0x14f6 <__fp_splitA>
    1514:	08 c0       	rjmp	.+16     	; 0x1526 <__fp_splitA+0x30>
    1516:	16 16       	cp	r1, r22
    1518:	17 06       	cpc	r1, r23
    151a:	18 06       	cpc	r1, r24
    151c:	99 1f       	adc	r25, r25
    151e:	f1 cf       	rjmp	.-30     	; 0x1502 <__fp_splitA+0xc>
    1520:	86 95       	lsr	r24
    1522:	71 05       	cpc	r23, r1
    1524:	61 05       	cpc	r22, r1
    1526:	08 94       	sec
    1528:	08 95       	ret

0000152a <__fp_zero>:
__fp_zero():
    152a:	e8 94       	clt

0000152c <__fp_szero>:
    152c:	bb 27       	eor	r27, r27
    152e:	66 27       	eor	r22, r22
    1530:	77 27       	eor	r23, r23
    1532:	cb 01       	movw	r24, r22
    1534:	97 f9       	bld	r25, 7
    1536:	08 95       	ret

00001538 <__gesf2>:
__gesf2():
    1538:	8a df       	rcall	.-236    	; 0x144e <__fp_cmp>
    153a:	08 f4       	brcc	.+2      	; 0x153e <__gesf2+0x6>
    153c:	8f ef       	ldi	r24, 0xFF	; 255
    153e:	08 95       	ret
    1540:	0e f0       	brts	.+2      	; 0x1544 <__gesf2+0xc>
    1542:	a4 c0       	rjmp	.+328    	; 0x168c <__fp_mpack>
    1544:	ae cf       	rjmp	.-164    	; 0x14a2 <__fp_nan>
    1546:	68 94       	set
    1548:	a6 cf       	rjmp	.-180    	; 0x1496 <__fp_inf>

0000154a <log>:
log():
    154a:	d5 df       	rcall	.-86     	; 0x14f6 <__fp_splitA>
    154c:	c8 f3       	brcs	.-14     	; 0x1540 <__gesf2+0x8>
    154e:	99 23       	and	r25, r25
    1550:	d1 f3       	breq	.-12     	; 0x1546 <__gesf2+0xe>
    1552:	c6 f3       	brts	.-16     	; 0x1544 <__gesf2+0xc>
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	1f 93       	push	r17
    155a:	0f 93       	push	r16
    155c:	ff 92       	push	r15
    155e:	c9 2f       	mov	r28, r25
    1560:	dd 27       	eor	r29, r29
    1562:	88 23       	and	r24, r24
    1564:	2a f0       	brmi	.+10     	; 0x1570 <log+0x26>
    1566:	21 97       	sbiw	r28, 0x01	; 1
    1568:	66 0f       	add	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	88 1f       	adc	r24, r24
    156e:	da f7       	brpl	.-10     	; 0x1566 <log+0x1c>
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e8       	ldi	r20, 0x80	; 128
    1576:	5f eb       	ldi	r21, 0xBF	; 191
    1578:	9f e3       	ldi	r25, 0x3F	; 63
    157a:	88 39       	cpi	r24, 0x98	; 152
    157c:	20 f0       	brcs	.+8      	; 0x1586 <log+0x3c>
    157e:	80 3e       	cpi	r24, 0xE0	; 224
    1580:	30 f0       	brcs	.+12     	; 0x158e <log+0x44>
    1582:	21 96       	adiw	r28, 0x01	; 1
    1584:	8f 77       	andi	r24, 0x7F	; 127
    1586:	25 de       	rcall	.-950    	; 0x11d2 <__addsf3>
    1588:	e6 e2       	ldi	r30, 0x26	; 38
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	03 c0       	rjmp	.+6      	; 0x1594 <log+0x4a>
    158e:	21 de       	rcall	.-958    	; 0x11d2 <__addsf3>
    1590:	e3 e5       	ldi	r30, 0x53	; 83
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	89 d0       	rcall	.+274    	; 0x16a8 <__fp_powser>
    1596:	8b 01       	movw	r16, r22
    1598:	be 01       	movw	r22, r28
    159a:	ec 01       	movw	r28, r24
    159c:	fb 2e       	mov	r15, r27
    159e:	6f 57       	subi	r22, 0x7F	; 127
    15a0:	71 09       	sbc	r23, r1
    15a2:	75 95       	asr	r23
    15a4:	77 1f       	adc	r23, r23
    15a6:	88 0b       	sbc	r24, r24
    15a8:	99 0b       	sbc	r25, r25
    15aa:	16 df       	rcall	.-468    	; 0x13d8 <__floatsisf>
    15ac:	28 e1       	ldi	r18, 0x18	; 24
    15ae:	32 e7       	ldi	r19, 0x72	; 114
    15b0:	41 e3       	ldi	r20, 0x31	; 49
    15b2:	5f e3       	ldi	r21, 0x3F	; 63
    15b4:	14 d0       	rcall	.+40     	; 0x15de <__mulsf3x>
    15b6:	af 2d       	mov	r26, r15
    15b8:	98 01       	movw	r18, r16
    15ba:	ae 01       	movw	r20, r28
    15bc:	ff 90       	pop	r15
    15be:	0f 91       	pop	r16
    15c0:	1f 91       	pop	r17
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	16 de       	rcall	.-980    	; 0x11f4 <__addsf3x>
    15c8:	7d cf       	rjmp	.-262    	; 0x14c4 <__fp_round>
    15ca:	6e df       	rcall	.-292    	; 0x14a8 <__fp_pscA>
    15cc:	28 f0       	brcs	.+10     	; 0x15d8 <log+0x8e>
    15ce:	73 df       	rcall	.-282    	; 0x14b6 <__fp_pscB>
    15d0:	18 f0       	brcs	.+6      	; 0x15d8 <log+0x8e>
    15d2:	95 23       	and	r25, r21
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <log+0x8e>
    15d6:	5f cf       	rjmp	.-322    	; 0x1496 <__fp_inf>
    15d8:	64 cf       	rjmp	.-312    	; 0x14a2 <__fp_nan>
    15da:	11 24       	eor	r1, r1
    15dc:	a7 cf       	rjmp	.-178    	; 0x152c <__fp_szero>

000015de <__mulsf3x>:
__mulsf3x():
    15de:	83 df       	rcall	.-250    	; 0x14e6 <__fp_split3>
    15e0:	a0 f3       	brcs	.-24     	; 0x15ca <log+0x80>

000015e2 <__mulsf3_pse>:
    15e2:	95 9f       	mul	r25, r21
    15e4:	d1 f3       	breq	.-12     	; 0x15da <log+0x90>
    15e6:	95 0f       	add	r25, r21
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	55 1f       	adc	r21, r21
    15ec:	62 9f       	mul	r22, r18
    15ee:	f0 01       	movw	r30, r0
    15f0:	72 9f       	mul	r23, r18
    15f2:	bb 27       	eor	r27, r27
    15f4:	f0 0d       	add	r31, r0
    15f6:	b1 1d       	adc	r27, r1
    15f8:	63 9f       	mul	r22, r19
    15fa:	aa 27       	eor	r26, r26
    15fc:	f0 0d       	add	r31, r0
    15fe:	b1 1d       	adc	r27, r1
    1600:	aa 1f       	adc	r26, r26
    1602:	64 9f       	mul	r22, r20
    1604:	66 27       	eor	r22, r22
    1606:	b0 0d       	add	r27, r0
    1608:	a1 1d       	adc	r26, r1
    160a:	66 1f       	adc	r22, r22
    160c:	82 9f       	mul	r24, r18
    160e:	22 27       	eor	r18, r18
    1610:	b0 0d       	add	r27, r0
    1612:	a1 1d       	adc	r26, r1
    1614:	62 1f       	adc	r22, r18
    1616:	73 9f       	mul	r23, r19
    1618:	b0 0d       	add	r27, r0
    161a:	a1 1d       	adc	r26, r1
    161c:	62 1f       	adc	r22, r18
    161e:	83 9f       	mul	r24, r19
    1620:	a0 0d       	add	r26, r0
    1622:	61 1d       	adc	r22, r1
    1624:	22 1f       	adc	r18, r18
    1626:	74 9f       	mul	r23, r20
    1628:	33 27       	eor	r19, r19
    162a:	a0 0d       	add	r26, r0
    162c:	61 1d       	adc	r22, r1
    162e:	23 1f       	adc	r18, r19
    1630:	84 9f       	mul	r24, r20
    1632:	60 0d       	add	r22, r0
    1634:	21 1d       	adc	r18, r1
    1636:	82 2f       	mov	r24, r18
    1638:	76 2f       	mov	r23, r22
    163a:	6a 2f       	mov	r22, r26
    163c:	11 24       	eor	r1, r1
    163e:	9f 57       	subi	r25, 0x7F	; 127
    1640:	50 40       	sbci	r21, 0x00	; 0
    1642:	8a f0       	brmi	.+34     	; 0x1666 <__mulsf3_pse+0x84>
    1644:	e1 f0       	breq	.+56     	; 0x167e <__mulsf3_pse+0x9c>
    1646:	88 23       	and	r24, r24
    1648:	4a f0       	brmi	.+18     	; 0x165c <__mulsf3_pse+0x7a>
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	bb 1f       	adc	r27, r27
    1650:	66 1f       	adc	r22, r22
    1652:	77 1f       	adc	r23, r23
    1654:	88 1f       	adc	r24, r24
    1656:	91 50       	subi	r25, 0x01	; 1
    1658:	50 40       	sbci	r21, 0x00	; 0
    165a:	a9 f7       	brne	.-22     	; 0x1646 <__mulsf3_pse+0x64>
    165c:	9e 3f       	cpi	r25, 0xFE	; 254
    165e:	51 05       	cpc	r21, r1
    1660:	70 f0       	brcs	.+28     	; 0x167e <__mulsf3_pse+0x9c>
    1662:	19 cf       	rjmp	.-462    	; 0x1496 <__fp_inf>
    1664:	63 cf       	rjmp	.-314    	; 0x152c <__fp_szero>
    1666:	5f 3f       	cpi	r21, 0xFF	; 255
    1668:	ec f3       	brlt	.-6      	; 0x1664 <__mulsf3_pse+0x82>
    166a:	98 3e       	cpi	r25, 0xE8	; 232
    166c:	dc f3       	brlt	.-10     	; 0x1664 <__mulsf3_pse+0x82>
    166e:	86 95       	lsr	r24
    1670:	77 95       	ror	r23
    1672:	67 95       	ror	r22
    1674:	b7 95       	ror	r27
    1676:	f7 95       	ror	r31
    1678:	e7 95       	ror	r30
    167a:	9f 5f       	subi	r25, 0xFF	; 255
    167c:	c1 f7       	brne	.-16     	; 0x166e <__mulsf3_pse+0x8c>
    167e:	fe 2b       	or	r31, r30
    1680:	88 0f       	add	r24, r24
    1682:	91 1d       	adc	r25, r1
    1684:	96 95       	lsr	r25
    1686:	87 95       	ror	r24
    1688:	97 f9       	bld	r25, 7
    168a:	08 95       	ret

0000168c <__fp_mpack>:
    168c:	9f 3f       	cpi	r25, 0xFF	; 255
    168e:	31 f0       	breq	.+12     	; 0x169c <__fp_mpack_finite+0xc>

00001690 <__fp_mpack_finite>:
    1690:	91 50       	subi	r25, 0x01	; 1
    1692:	20 f4       	brcc	.+8      	; 0x169c <__fp_mpack_finite+0xc>
    1694:	87 95       	ror	r24
    1696:	77 95       	ror	r23
    1698:	67 95       	ror	r22
    169a:	b7 95       	ror	r27
    169c:	88 0f       	add	r24, r24
    169e:	91 1d       	adc	r25, r1
__fp_mpack_finite():
    16a0:	96 95       	lsr	r25
    16a2:	87 95       	ror	r24
    16a4:	97 f9       	bld	r25, 7
    16a6:	08 95       	ret

000016a8 <__fp_powser>:
__fp_powser():
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	1f 93       	push	r17
    16ae:	0f 93       	push	r16
    16b0:	ff 92       	push	r15
    16b2:	ef 92       	push	r14
    16b4:	df 92       	push	r13
    16b6:	7b 01       	movw	r14, r22
    16b8:	8c 01       	movw	r16, r24
    16ba:	68 94       	set
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <__fp_powser+0x20>
    16be:	da 2e       	mov	r13, r26
    16c0:	ef 01       	movw	r28, r30
    16c2:	8d df       	rcall	.-230    	; 0x15de <__mulsf3x>
    16c4:	fe 01       	movw	r30, r28
    16c6:	e8 94       	clt
    16c8:	a5 91       	lpm	r26, Z+
    16ca:	25 91       	lpm	r18, Z+
    16cc:	35 91       	lpm	r19, Z+
    16ce:	45 91       	lpm	r20, Z+
    16d0:	55 91       	lpm	r21, Z+
    16d2:	ae f3       	brts	.-22     	; 0x16be <__fp_powser+0x16>
    16d4:	ef 01       	movw	r28, r30
    16d6:	8e dd       	rcall	.-1252   	; 0x11f4 <__addsf3x>
    16d8:	fe 01       	movw	r30, r28
    16da:	97 01       	movw	r18, r14
    16dc:	a8 01       	movw	r20, r16
    16de:	da 94       	dec	r13
    16e0:	79 f7       	brne	.-34     	; 0x16c0 <__fp_powser+0x18>
    16e2:	df 90       	pop	r13
    16e4:	ef 90       	pop	r14
    16e6:	ff 90       	pop	r15
    16e8:	0f 91       	pop	r16
    16ea:	1f 91       	pop	r17
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    16f2:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    16f4:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    16f6:	04 c0       	rjmp	.+8      	; 0x1700 <__udivmodqi4_ep>

000016f8 <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    16f8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    16fa:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    16fe:	96 1b       	sub	r25, r22

00001700 <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    1700:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    1702:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    1706:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    1708:	08 95       	ret

0000170a <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    170a:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    170c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    170e:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1710:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1712:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1714:	09 94       	ijmp

00001716 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1716:	f8 94       	cli

00001718 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1718:	ff cf       	rjmp	.-2      	; 0x1718 <__stop_program>
